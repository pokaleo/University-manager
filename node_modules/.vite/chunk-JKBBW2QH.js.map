{
  "version": 3,
  "sources": ["../@vaadin/component-base/src/tabindex-mixin.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { DisabledMixin } from './disabled-mixin.js';\n\n/**\n * A mixin to toggle the `tabindex` attribute.\n *\n * By default, the attribute is set to 0 that makes the element focusable.\n *\n * The attribute is set to -1 whenever the user disables the element\n * and restored with the last known value once the element is enabled.\n *\n * @polymerMixin\n * @mixes DisabledMixin\n */\nexport const TabindexMixin = (superclass) =>\n  class TabindexMixinClass extends DisabledMixin(superclass) {\n    static get properties() {\n      return {\n        /**\n         * Indicates whether the element can be focused and where it participates in sequential keyboard navigation.\n         * @protected\n         */\n        tabindex: {\n          type: Number,\n          value: 0,\n          reflectToAttribute: true,\n          observer: '_tabindexChanged'\n        },\n\n        /**\n         * Stores the last known tabindex since the element has been disabled.\n         *\n         * @private\n         */\n        __lastTabIndex: {\n          type: Number,\n          value: 0\n        }\n      };\n    }\n\n    /**\n     * When the element gets disabled, the observer saves the last known tabindex\n     * and makes the element not focusable by setting tabindex to -1.\n     * As soon as the element gets enabled, the observer restores the last known tabindex\n     * so that the element can be focusable again.\n     *\n     * @protected\n     * @override\n     */\n    _disabledChanged(disabled, oldDisabled) {\n      super._disabledChanged(disabled, oldDisabled);\n\n      if (disabled) {\n        if (this.tabindex !== undefined) {\n          this.__lastTabIndex = this.tabindex;\n        }\n        this.tabindex = -1;\n      } else if (oldDisabled) {\n        this.tabindex = this.__lastTabIndex;\n      }\n    }\n\n    /**\n     * When the user has changed tabindex while the element is disabled,\n     * the observer reverts tabindex to -1 and rather saves the new tabindex value to apply it later.\n     * The new value will be applied as soon as the element becomes enabled.\n     *\n     * @protected\n     */\n    _tabindexChanged(tabindex) {\n      if (this.disabled && tabindex !== -1) {\n        this.__lastTabIndex = tabindex;\n        this.tabindex = -1;\n      }\n    }\n  };\n"],
  "mappings": ";;;;;AAAA,AAkBO,IAAM,gBAAgB,CAAC,eAC5B,MAAM,2BAA2B,cAAc,UAAU,EAAE;AAAA,aAC9C,aAAa;AACtB,WAAO;AAAA,MAKL,UAAU;AAAA,QACR,MAAM;AAAA,QACN,OAAO;AAAA,QACP,oBAAoB;AAAA,QACpB,UAAU;AAAA,MACZ;AAAA,MAOA,gBAAgB;AAAA,QACd,MAAM;AAAA,QACN,OAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AAAA,EAWA,iBAAiB,UAAU,aAAa;AACtC,UAAM,iBAAiB,UAAU,WAAW;AAE5C,QAAI,UAAU;AACZ,UAAI,KAAK,aAAa,QAAW;AAC/B,aAAK,iBAAiB,KAAK;AAAA,MAC7B;AACA,WAAK,WAAW;AAAA,IAClB,WAAW,aAAa;AACtB,WAAK,WAAW,KAAK;AAAA,IACvB;AAAA,EACF;AAAA,EASA,iBAAiB,UAAU;AACzB,QAAI,KAAK,YAAY,aAAa,IAAI;AACpC,WAAK,iBAAiB;AACtB,WAAK,WAAW;AAAA,IAClB;AAAA,EACF;AACF;",
  "names": []
}
