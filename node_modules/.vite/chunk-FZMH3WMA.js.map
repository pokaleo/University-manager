{
  "version": 3,
  "sources": ["../@vaadin/select/src/vaadin-select-item.js", "../@vaadin/select/src/vaadin-select-list-box.js", "../@vaadin/select/src/vaadin-select-overlay.js", "../@vaadin/select/src/vaadin-select-value-button.js", "../@vaadin/select/src/vaadin-select.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2017 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { Item } from '@vaadin/item/src/vaadin-item.js';\n\n/**\n * An element used internally by `<vaadin-select>`. Not intended to be used separately.\n *\n * @extends Item\n * @protected\n */\nclass SelectItem extends Item {\n  static get is() {\n    return 'vaadin-select-item';\n  }\n}\n\ncustomElements.define(SelectItem.is, SelectItem);\n", "/**\n * @license\n * Copyright (c) 2017 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { ListBox } from '@vaadin/list-box/src/vaadin-list-box.js';\n\n/**\n * An element used internally by `<vaadin-select>`. Not intended to be used separately.\n *\n * @extends ListBox\n * @protected\n */\nclass SelectListBox extends ListBox {\n  static get is() {\n    return 'vaadin-select-list-box';\n  }\n}\n\ncustomElements.define(SelectListBox.is, SelectListBox);\n", "/**\n * @license\n * Copyright (c) 2017 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { OverlayElement } from '@vaadin/vaadin-overlay/src/vaadin-overlay.js';\nimport { PositionMixin } from '@vaadin/vaadin-overlay/src/vaadin-overlay-position-mixin.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nregisterStyles(\n  'vaadin-select-overlay',\n  css`\n    :host {\n      align-items: flex-start;\n      justify-content: flex-start;\n    }\n  `,\n  { moduleId: 'vaadin-select-overlay-styles' }\n);\n\n/**\n * An element used internally by `<vaadin-select>`. Not intended to be used separately.\n *\n * @extends OverlayElement\n * @protected\n */\nclass SelectOverlay extends PositionMixin(OverlayElement) {\n  static get is() {\n    return 'vaadin-select-overlay';\n  }\n\n  requestContentUpdate() {\n    super.requestContentUpdate();\n\n    if (this.owner) {\n      // Ensure menuElement reference is correct.\n      const menuElement = this._getMenuElement();\n      this.owner._assignMenuElement(menuElement);\n    }\n  }\n\n  /** @protected */\n  _getMenuElement() {\n    return Array.from(this.children).find((el) => el.localName !== 'style');\n  }\n}\n\ncustomElements.define(SelectOverlay.is, SelectOverlay);\n", "/**\n * @license\n * Copyright (c) 2017 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { Button } from '@vaadin/button/src/vaadin-button.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nregisterStyles(\n  'vaadin-select-value-button',\n  css`\n    :host {\n      margin: 0;\n      min-width: 0;\n      width: 0;\n    }\n\n    ::slotted(:not([slot])) {\n      padding-left: 0;\n      padding-right: 0;\n      flex: auto;\n    }\n\n    /* placeholder styles */\n    ::slotted(:not([slot]):not([selected])) {\n      line-height: normal;\n    }\n\n    /* TODO: unsupported selector */\n    .vaadin-button-container {\n      text-align: inherit;\n    }\n\n    [part='label'] {\n      width: 100%;\n      padding: 0;\n      line-height: inherit;\n    }\n  `,\n  { moduleId: 'vaadin-select-value-button-styles' }\n);\n\n/**\n * An element used internally by `<vaadin-select>`. Not intended to be used separately.\n *\n * @extends Button\n * @protected\n */\nclass SelectValueButton extends Button {\n  static get is() {\n    return 'vaadin-select-value-button';\n  }\n}\n\ncustomElements.define(SelectValueButton.is, SelectValueButton);\n", "/**\n * @license\n * Copyright (c) 2017 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport '@vaadin/input-container/src/vaadin-input-container.js';\nimport './vaadin-select-item.js';\nimport './vaadin-select-list-box.js';\nimport './vaadin-select-overlay.js';\nimport './vaadin-select-value-button.js';\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { MediaQueryController } from '@vaadin/component-base/src/media-query-controller.js';\nimport { SlotMixin } from '@vaadin/component-base/src/slot-mixin.js';\nimport { processTemplates } from '@vaadin/component-base/src/templates.js';\nimport { DelegateFocusMixin } from '@vaadin/field-base/src/delegate-focus-mixin.js';\nimport { FieldMixin } from '@vaadin/field-base/src/field-mixin.js';\nimport { fieldShared } from '@vaadin/field-base/src/styles/field-shared-styles.js';\nimport { inputFieldContainer } from '@vaadin/field-base/src/styles/input-field-container-styles.js';\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nregisterStyles('vaadin-select', [fieldShared, inputFieldContainer], { moduleId: 'vaadin-select-styles' });\n\n/**\n * `<vaadin-select>` is a Web Component for selecting values from a list of items.\n *\n * ### Items\n *\n * Use the `items` property to define possible options for the select:\n *\n * ```html\n * <vaadin-select id=\"select\"></vaadin-select>\n * ```\n * ```js\n * const select = document.querySelector('#select');\n * select.items = [\n *   { label: 'Most recent first', value: 'recent' },\n *   { component: 'hr' },\n *   { label: 'Rating: low to high', value: 'rating-asc' },\n *   { label: 'Rating: high to low', value: 'rating-desc' },\n *   { component: 'hr' },\n *   { label: 'Price: low to high', value: 'price-asc', disabled: true },\n *   { label: 'Price: high to low', value: 'price-desc', disabled: true }\n * ];\n * ```\n *\n * ### Rendering\n *\n * Alternatively, the content of the select can be populated by using the renderer callback function.\n *\n * The renderer function provides `root`, `select` arguments.\n * Generate DOM content, append it to the `root` element and control the state\n * of the host element by accessing `select`.\n *\n * ```js\n * const select = document.querySelector('#select');\n * select.renderer = function(root, select) {\n *   const listBox = document.createElement('vaadin-list-box');\n *   // append 3 <vaadin-item> elements\n *   ['Jose', 'Manolo', 'Pedro'].forEach(function(name) {\n *     const item = document.createElement('vaadin-item');\n *     item.textContent = name;\n *     item.setAttribute('label', name)\n *     listBox.appendChild(item);\n *   });\n *\n *   // update the content\n *   root.appendChild(listBox);\n * };\n * ```\n *\n * Renderer is called on initialization of new select and on its opening.\n * DOM generated during the renderer call can be reused\n * in the next renderer call and will be provided with the `root` argument.\n * On first call it will be empty.\n *\n * * Hint: By setting the `label` property of inner vaadin-items you will\n * be able to change the visual representation of the selected value in the input part.\n *\n * ### Styling\n *\n * The following custom properties are available for styling:\n *\n * Custom property                    | Description                  | Target element          | Default\n * -----------------------------------|------------------------------|----------------------------------\n * `--vaadin-field-default-width`     | Default width of the field   | :host                   | `12em`\n * `--vaadin-select-text-field-width` | Effective width of the field | `vaadin-select-overlay` |\n *\n * `<vaadin-select>` provides mostly the same set of shadow DOM parts and state attributes as `<vaadin-text-field>`.\n * See [`<vaadin-text-field>`](#/elements/vaadin-text-field) for the styling documentation.\n *\n *\n * In addition to `<vaadin-text-field>` parts, the following parts are available for theming:\n *\n * Part name       | Description\n * ----------------|----------------\n * `toggle-button` | The toggle button\n *\n * In addition to `<vaadin-text-field>` state attributes, the following state attributes are available for theming:\n *\n * Attribute | Description                 | Part name\n * ----------|-----------------------------|-----------\n * `opened`  | Set when the select is open | :host\n *\n * There are two exceptions in terms of styling compared to `<vaadin-text-field>`:\n * - the `clear-button` shadow DOM part does not exist in `<vaadin-select>`.\n * - the `input-prevented` state attribute is not supported by `<vaadin-select>`.\n *\n * ### Internal components\n *\n * In addition to `<vaadin-select>` itself, the following internal\n * components are themable:\n *\n * - `<vaadin-select-overlay>` - has the same API as [`<vaadin-overlay>`](#/elements/vaadin-overlay).\n * - `<vaadin-select-value-button>` - has the same API as [`<vaadin-button>`](#/elements/vaadin-button).\n * - [`<vaadin-input-container>`](#/elements/vaadin-input-container) - an internal element wrapping the button.\n *\n * Note: the `theme` attribute value set on `<vaadin-select>` is\n * propagated to the internal components listed above.\n *\n * See [Styling Components](https://vaadin.com/docs/latest/ds/customization/styling-components) documentation.\n *\n * @fires {Event} change - Fired when the user commits a value change.\n * @fires {CustomEvent} invalid-changed - Fired when the `invalid` property changes.\n * @fires {CustomEvent} opened-changed - Fired when the `opened` property changes.\n * @fires {CustomEvent} value-changed - Fired when the `value` property changes.\n *\n * @extends HTMLElement\n * @mixes ElementMixin\n * @mixes ThemableMixin\n * @mixes SlotMixin\n * @mixes FieldMixin\n * @mixes DelegateFocusMixin\n */\nclass Select extends DelegateFocusMixin(FieldMixin(SlotMixin(ElementMixin(ThemableMixin(PolymerElement))))) {\n  static get is() {\n    return 'vaadin-select';\n  }\n\n  static get template() {\n    return html`\n      <style>\n        ::slotted([slot='value']) {\n          flex-grow: 1;\n          background-color: transparent;\n        }\n      </style>\n\n      <div class=\"vaadin-select-container\">\n        <div part=\"label\" on-click=\"_onClick\">\n          <slot name=\"label\"></slot>\n          <span part=\"required-indicator\" aria-hidden=\"true\" on-click=\"focus\"></span>\n        </div>\n\n        <vaadin-input-container\n          part=\"input-field\"\n          readonly=\"[[readonly]]\"\n          disabled=\"[[disabled]]\"\n          invalid=\"[[invalid]]\"\n          theme$=\"[[theme]]\"\n          on-click=\"_onClick\"\n        >\n          <slot name=\"prefix\" slot=\"prefix\"></slot>\n          <slot name=\"value\"></slot>\n          <div part=\"toggle-button\" slot=\"suffix\" aria-hidden=\"true\"></div>\n        </vaadin-input-container>\n\n        <div part=\"helper-text\">\n          <slot name=\"helper\"></slot>\n        </div>\n\n        <div part=\"error-message\">\n          <slot name=\"error-message\"></slot>\n        </div>\n      </div>\n\n      <vaadin-select-overlay\n        position-target=\"[[_inputContainer]]\"\n        opened=\"{{opened}}\"\n        with-backdrop=\"[[_phone]]\"\n        phone$=\"[[_phone]]\"\n        theme$=\"[[theme]]\"\n      ></vaadin-select-overlay>\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * An array containing items that will be rendered as the options of the select.\n       *\n       * #### Example\n       * ```js\n       * select.items = [\n       *   { label: 'Most recent first', value: 'recent' },\n       *   { component: 'hr' },\n       *   { label: 'Rating: low to high', value: 'rating-asc' },\n       *   { label: 'Rating: high to low', value: 'rating-desc' },\n       *   { component: 'hr' },\n       *   { label: 'Price: low to high', value: 'price-asc', disabled: true },\n       *   { label: 'Price: high to low', value: 'price-desc', disabled: true }\n       * ];\n       * ```\n       *\n       * Note: each item is rendered by default as the internal `<vaadin-select-item>` that is an extension of `<vaadin-item>`.\n       * To render the item with a custom component, provide a tag name by the `component` property.\n       *\n       * @type {!Array<!SelectItem>}\n       */\n      items: {\n        type: Array,\n        observer: '__itemsChanged'\n      },\n\n      /**\n       * Set when the select is open\n       * @type {boolean}\n       */\n      opened: {\n        type: Boolean,\n        value: false,\n        notify: true,\n        reflectToAttribute: true,\n        observer: '_openedChanged'\n      },\n\n      /**\n       * Custom function for rendering the content of the `<vaadin-select>`.\n       * Receives two arguments:\n       *\n       * - `root` The `<vaadin-select-overlay>` internal container\n       *   DOM element. Append your content to it.\n       * - `select` The reference to the `<vaadin-select>` element.\n       * @type {!SelectRenderer | undefined}\n       */\n      renderer: Function,\n\n      /**\n       * It stores the the `value` property of the selected item, providing the\n       * value for iron-form.\n       * When there\u2019s an item selected, it's the value of that item, otherwise\n       * it's an empty string.\n       * On change or initialization, the component finds the item which matches the\n       * value and displays it.\n       * If no value is provided to the component, it selects the first item without\n       * value or empty value.\n       * Hint: If you do not want to select any item by default, you can either set all\n       * the values of inner vaadin-items, or set the vaadin-select value to\n       * an inexistent value in the items list.\n       * @type {string}\n       */\n      value: {\n        type: String,\n        value: '',\n        notify: true,\n        observer: '_valueChanged'\n      },\n\n      /**\n       * The name of this element.\n       */\n      name: {\n        type: String\n      },\n\n      /**\n       * A hint to the user of what can be entered in the control.\n       * The placeholder will be displayed in the case that there\n       * is no item selected, or the selected item has an empty\n       * string label, or the selected item has no label and it's\n       * DOM content is empty.\n       */\n      placeholder: {\n        type: String\n      },\n\n      /**\n       * When present, it specifies that the element is read-only.\n       * @type {boolean}\n       */\n      readonly: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n\n      /** @private */\n      _phone: Boolean,\n\n      /** @private */\n      _phoneMediaQuery: {\n        value: '(max-width: 420px), (max-height: 420px)'\n      },\n\n      /** @private */\n      _overlayElement: Object,\n\n      /** @private */\n      _inputContainer: Object,\n\n      /** @private */\n      _items: Object\n    };\n  }\n\n  static get observers() {\n    return [\n      '_updateAriaExpanded(opened)',\n      '_updateAriaRequired(required)',\n      '_updateSelectedItem(value, _items, placeholder)',\n      '_rendererChanged(renderer, _overlayElement)'\n    ];\n  }\n\n  /** @protected */\n  get slots() {\n    return {\n      ...super.slots,\n      value: () => {\n        const button = document.createElement('vaadin-select-value-button');\n        button.setAttribute('aria-haspopup', 'listbox');\n        return button;\n      }\n    };\n  }\n\n  /** @protected */\n  get _valueButton() {\n    return this._getDirectSlotChild('value');\n  }\n\n  constructor() {\n    super();\n\n    // Ensure every instance has unique ID\n    const uniqueId = (Select._uniqueSelectId = 1 + Select._uniqueSelectId || 0);\n    this._fieldId = `${this.localName}-${uniqueId}`;\n\n    this._boundOnKeyDown = this._onKeyDown.bind(this);\n  }\n\n  /** @protected */\n  connectedCallback() {\n    super.connectedCallback();\n\n    if (this._valueButton) {\n      this._valueButton.setAttribute('aria-labelledby', `${this._labelId} ${this._fieldId}`);\n\n      this._updateAriaRequired(this.required);\n      this._updateAriaExpanded(this.opened);\n\n      this._setFocusElement(this._valueButton);\n      this.ariaTarget = this._valueButton;\n\n      this._valueButton.addEventListener('keydown', this._boundOnKeyDown);\n    }\n  }\n\n  /** @protected */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    if (this._valueButton) {\n      this._valueButton.removeEventListener('keydown', this._boundOnKeyDown);\n    }\n    // Making sure the select is closed and removed from DOM after detaching the select.\n    this.opened = false;\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    this._overlayElement = this.shadowRoot.querySelector('vaadin-select-overlay');\n    this._inputContainer = this.shadowRoot.querySelector('[part~=\"input-field\"]');\n\n    this.addController(\n      new MediaQueryController(this._phoneMediaQuery, (matches) => {\n        this._phone = matches;\n      })\n    );\n\n    processTemplates(this);\n  }\n\n  /**\n   * Requests an update for the content of the select.\n   * While performing the update, it invokes the renderer passed in the `renderer` property.\n   *\n   * It is not guaranteed that the update happens immediately (synchronously) after it is requested.\n   */\n  requestContentUpdate() {\n    if (!this._overlayElement) {\n      return;\n    }\n\n    this._overlayElement.requestContentUpdate();\n\n    if (this._menuElement && this._menuElement.items) {\n      this._updateSelectedItem(this.value, this._menuElement.items);\n    }\n  }\n\n  /**\n   * @param {SelectRenderer | undefined | null} renderer\n   * @param {SelectOverlay | undefined} overlay\n   * @private\n   */\n  _rendererChanged(renderer, overlay) {\n    if (!overlay) {\n      return;\n    }\n\n    overlay.setProperties({ owner: this, renderer: renderer || this.__defaultRenderer });\n\n    this.requestContentUpdate();\n  }\n\n  /**\n   * @param {SelectItem[] | undefined | null} newItems\n   * @param {SelectItem[] | undefined | null} oldItems\n   * @private\n   */\n  __itemsChanged(newItems, oldItems) {\n    if (newItems || oldItems) {\n      this.requestContentUpdate();\n    }\n  }\n\n  /**\n   * @param {HTMLElement} menuElement\n   * @protected\n   */\n  _assignMenuElement(menuElement) {\n    if (menuElement && menuElement !== this.__lastMenuElement) {\n      this._menuElement = menuElement;\n\n      // Ensure items are initialized\n      this.__initMenuItems(menuElement);\n\n      menuElement.addEventListener('items-changed', () => {\n        this.__initMenuItems(menuElement);\n      });\n\n      menuElement.addEventListener('selected-changed', () => this.__updateValueButton());\n      // Use capture phase to make it possible for `<vaadin-grid-pro-edit-select>`\n      // to override and handle the keydown event before the value change happens.\n      menuElement.addEventListener('keydown', (e) => this._onKeyDownInside(e), true);\n      menuElement.addEventListener(\n        'click',\n        () => {\n          this.__userInteraction = true;\n          this.opened = false;\n        },\n        true\n      );\n\n      menuElement.setAttribute('role', 'listbox');\n\n      // Store the menu element reference\n      this.__lastMenuElement = menuElement;\n    }\n  }\n\n  /** @private */\n  __initMenuItems(menuElement) {\n    if (menuElement.items) {\n      this._items = menuElement.items;\n      this._items.forEach((item) => item.setAttribute('role', 'option'));\n    }\n  }\n\n  /** @private */\n  _valueChanged(value, oldValue) {\n    this.toggleAttribute('has-value', Boolean(value));\n\n    // Skip validation for the initial empty string value\n    if (value === '' && oldValue === undefined) {\n      return;\n    }\n    this.validate();\n  }\n\n  /**\n   * Opens the overlay if the field is not read-only.\n   *\n   * @private\n   */\n  _onClick() {\n    this.opened = !this.readonly;\n  }\n\n  /**\n   * @param {!KeyboardEvent} e\n   * @protected\n   */\n  _onKeyDown(e) {\n    if (!this.readonly && !this.opened) {\n      if (/^(Enter|SpaceBar|\\s|ArrowDown|Down|ArrowUp|Up)$/.test(e.key)) {\n        e.preventDefault();\n        this.opened = true;\n      } else if (/[\\p{L}\\p{Nd}]/u.test(e.key) && e.key.length === 1) {\n        const selected = this._menuElement.selected;\n        const currentIdx = selected !== undefined ? selected : -1;\n        const newIdx = this._menuElement._searchKey(currentIdx, e.key);\n        if (newIdx >= 0) {\n          this.__userInteraction = true;\n\n          // Announce the value selected with the first letter shortcut\n          this._updateAriaLive(true);\n          this._menuElement.selected = newIdx;\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {!KeyboardEvent} e\n   * @protected\n   */\n  _onKeyDownInside(e) {\n    if (/^(Tab)$/.test(e.key)) {\n      this.opened = false;\n    }\n  }\n\n  /** @private */\n  _openedChanged(opened, wasOpened) {\n    if (opened) {\n      // Avoid multiple announcements when a value gets selected from the dropdown\n      this._updateAriaLive(false);\n\n      if (!this._overlayElement || !this._menuElement || !this.focusElement || this.disabled || this.readonly) {\n        this.opened = false;\n        return;\n      }\n\n      this._overlayElement.style.setProperty(\n        '--vaadin-select-text-field-width',\n        this._inputContainer.offsetWidth + 'px'\n      );\n\n      // Preserve focus-ring to restore it later\n      const hasFocusRing = this.hasAttribute('focus-ring');\n      this._openedWithFocusRing = hasFocusRing;\n\n      // Opened select should not keep focus-ring\n      if (hasFocusRing) {\n        this.removeAttribute('focus-ring');\n      }\n\n      this._menuElement.focus();\n    } else if (wasOpened) {\n      this.focus();\n      if (this._openedWithFocusRing) {\n        this.setAttribute('focus-ring', '');\n      }\n      this.validate();\n    }\n  }\n\n  /** @private */\n  _updateAriaExpanded(opened) {\n    if (this._valueButton) {\n      this._valueButton.setAttribute('aria-expanded', opened ? 'true' : 'false');\n    }\n  }\n\n  /** @private */\n  _updateAriaRequired(required) {\n    if (this._valueButton) {\n      this._valueButton.setAttribute('aria-required', required ? 'true' : 'false');\n    }\n  }\n\n  /** @private */\n  _updateAriaLive(ariaLive) {\n    if (this._valueButton) {\n      if (ariaLive) {\n        this._valueButton.setAttribute('aria-live', 'polite');\n      } else {\n        this._valueButton.removeAttribute('aria-live');\n      }\n    }\n  }\n\n  /** @private */\n  __attachSelectedItem(selected) {\n    let labelItem;\n\n    const label = selected.getAttribute('label');\n    if (label) {\n      labelItem = this.__createItemElement({ label });\n    } else {\n      labelItem = selected.cloneNode(true);\n    }\n\n    // store reference to the original item\n    labelItem._sourceItem = selected;\n\n    this.__appendValueItemElement(labelItem);\n\n    // ensure the item gets proper styles\n    labelItem.selected = true;\n  }\n\n  /**\n   * @param {!SelectItem} item\n   * @private\n   */\n  __createItemElement(item) {\n    const itemElement = document.createElement(item.component || 'vaadin-select-item');\n    if (item.label) {\n      itemElement.textContent = item.label;\n    }\n    if (item.value) {\n      itemElement.value = item.value;\n    }\n    if (item.disabled) {\n      itemElement.disabled = item.disabled;\n    }\n    return itemElement;\n  }\n\n  /**\n   * @param {!HTMLElement} itemElement\n   * @private\n   */\n  __appendValueItemElement(itemElement) {\n    itemElement.removeAttribute('tabindex');\n    itemElement.removeAttribute('role');\n    itemElement.setAttribute('id', this._fieldId);\n\n    this._valueButton.appendChild(itemElement);\n  }\n\n  /** @private */\n  __updateValueButton() {\n    if (!this._valueButton) {\n      return;\n    }\n\n    this._valueButton.innerHTML = '';\n\n    const selected = this._items[this._menuElement.selected];\n\n    this._valueButton.removeAttribute('placeholder');\n\n    if (!selected) {\n      if (this.placeholder) {\n        const item = this.__createItemElement({ label: this.placeholder });\n        this.__appendValueItemElement(item);\n        this._valueButton.setAttribute('placeholder', '');\n      }\n    } else {\n      this.__attachSelectedItem(selected);\n\n      if (!this._valueChanging) {\n        this._selectedChanging = true;\n        this.value = selected.value || '';\n        if (this.__userInteraction) {\n          this.opened = false;\n          this.dispatchEvent(new CustomEvent('change', { bubbles: true }));\n          this.__userInteraction = false;\n        }\n        delete this._selectedChanging;\n      }\n    }\n  }\n\n  /** @private */\n  _updateSelectedItem(value, items) {\n    if (items) {\n      this._menuElement.selected = items.reduce((prev, item, idx) => {\n        return prev === undefined && item.value === value ? idx : prev;\n      }, undefined);\n      if (!this._selectedChanging) {\n        this._valueChanging = true;\n        this.__updateValueButton();\n        delete this._valueChanging;\n      }\n    }\n  }\n\n  /**\n   * Override method inherited from `FocusMixin` to not remove focused\n   * state when select is opened and focus moves to list-box.\n   * @return {boolean}\n   * @protected\n   * @override\n   */\n  _shouldRemoveFocus() {\n    return !this.opened;\n  }\n\n  /**\n   * Override method inherited from `FocusMixin` to validate on blur.\n   * @param {boolean} focused\n   * @protected\n   * @override\n   */\n  _setFocused(focused) {\n    super._setFocused(focused);\n\n    if (!focused) {\n      this.validate();\n    }\n  }\n\n  /**\n   * Returns true if `value` is valid, and sets the `invalid` flag appropriately.\n   *\n   * @return {boolean} True if the value is valid and sets the `invalid` flag appropriately\n   */\n  validate() {\n    return !(this.invalid = !(this.disabled || !this.required || this.value));\n  }\n\n  /**\n   * Renders items when they are provided by the `items` property and clears the content otherwise.\n   * @param {!HTMLElement} root\n   * @param {!Select} _select\n   * @private\n   */\n  __defaultRenderer(root, _select) {\n    if (!this.items || this.items.length === 0) {\n      root.textContent = '';\n      return;\n    }\n\n    let listBox = root.firstElementChild;\n    if (!listBox) {\n      listBox = document.createElement('vaadin-select-list-box');\n      root.appendChild(listBox);\n    }\n\n    listBox.textContent = '';\n    this.items.forEach((item) => {\n      listBox.appendChild(this.__createItemElement(item));\n    });\n  }\n\n  /**\n   * Fired when the user commits a value change.\n   *\n   * @event change\n   */\n}\n\ncustomElements.define(Select.is, Select);\n\nexport { Select };\n"],
  "mappings": "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",
  "names": []
}
