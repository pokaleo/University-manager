import { ServeAndBuildChecker, BuildInCheckerNames } from './types';
import { Script } from './worker';
import chokidar from 'chokidar';
import type { CreateDiagnostic, BuildInCheckers } from './types';
export interface CheckerMeta<T extends BuildInCheckerNames> {
    name: string;
    absFilePath: string;
    createDiagnostic: CreateDiagnostic<T>;
    build: ServeAndBuildChecker['build'];
    script?: Script<any>;
}
export declare abstract class Checker<T extends BuildInCheckerNames> implements CheckerMeta<T> {
    static watcher: chokidar.FSWatcher;
    name: string;
    absFilePath: string;
    createDiagnostic: CreateDiagnostic<T>;
    build: ServeAndBuildChecker['build'];
    script?: Script<any>;
    constructor({ name, absFilePath, createDiagnostic, build }: CheckerMeta<T>);
    prepare(): Script<Pick<BuildInCheckers, T>>;
    initMainThread(): ((config: any, env: import("vite").ConfigEnv) => ServeAndBuildChecker) | undefined;
    initWorkerThread(): void;
}
//# sourceMappingURL=Checker.d.ts.map