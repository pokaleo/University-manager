import {
  Avatar
} from "./chunk-EHVDM2T3.js";
import "./chunk-I7BP3VNY.js";
import "./chunk-IZT3AP6L.js";
import "./chunk-Z624KRTI.js";
import "./chunk-T5JDTCGA.js";
import "./chunk-N4COYWWO.js";
import "./chunk-VRMTXLCJ.js";
import "./chunk-5B3W7TLP.js";
import "./chunk-75WEHVQA.js";
import {
  FocusMixin
} from "./chunk-Q3ITW52D.js";
import "./chunk-SYJMCSOT.js";
import "./chunk-TSMFV5J4.js";
import "./chunk-WUR5UZ22.js";
import "./chunk-YZXPUGLM.js";
import {
  ThemableMixin,
  registerStyles
} from "./chunk-PALO6AVQ.js";
import {
  ElementMixin
} from "./chunk-OKCEHAIA.js";
import "./chunk-KCWZ32HQ.js";
import "./chunk-ZFVP5VBM.js";
import {
  microTask
} from "./chunk-QNRFZUBX.js";
import {
  css
} from "./chunk-PYLEJJK2.js";
import {
  PolymerElement,
  html
} from "./chunk-EMDRMWGL.js";
import "./chunk-H3KD7FYF.js";
import "./chunk-NZ6RMXB7.js";
import "./chunk-RQI6IG5T.js";
import "./chunk-KTZKXPFA.js";

// node_modules/@vaadin/message-list/theme/lumo/vaadin-message-avatar-styles.js
registerStyles("vaadin-message-avatar", css`
    :host {
      margin-right: calc(var(--lumo-space-m) - var(--vaadin-avatar-outline-width));
      margin-top: calc(var(--lumo-space-s) - var(--vaadin-avatar-outline-width));
    }

    :host([dir='rtl']) {
      margin-left: calc(var(--lumo-space-m) - var(--vaadin-avatar-outline-width));
      margin-right: calc(var(--vaadin-avatar-outline-width) * -1);
    }
  `, { moduleId: "lumo-message-avatar" });

// node_modules/@vaadin/message-list/theme/lumo/vaadin-message-styles.js
registerStyles("vaadin-message", css`
    :host {
      color: var(--lumo-body-text-color);
      font-family: var(--lumo-font-family);
      font-size: var(--lumo-font-size-m);
      line-height: var(--lumo-line-height-m);
      padding: var(--lumo-space-s) var(--lumo-space-m);
      -moz-osx-font-smoothing: grayscale;
      -webkit-font-smoothing: antialiased;
      -webkit-text-size-adjust: 100%;
    }

    :host([focus-ring]) {
      box-shadow: inset 0 0 0 2px var(--lumo-primary-color-50pct);
    }

    [part='header'] {
      min-height: calc(var(--lumo-font-size-m) * var(--lumo-line-height-m));
    }

    [part='name'] {
      margin-right: var(--lumo-space-s);
    }

    [part='name']:empty {
      margin-right: 0;
    }

    :host([dir='rtl']) [part='name'] {
      margin-left: var(--lumo-space-s);
      margin-right: 0;
    }

    :host([dir='rtl']) [part='name']:empty {
      margin-left: 0;
    }

    [part='time'] {
      color: var(--lumo-secondary-text-color);
      font-size: var(--lumo-font-size-s);
    }
  `, { moduleId: "lumo-message" });

// node_modules/@vaadin/message-list/theme/lumo/vaadin-message-list-styles.js
registerStyles("vaadin-message-list", css``, { moduleId: "lumo-message-list" });

// node_modules/@vaadin/message-list/src/vaadin-message-avatar.js
registerStyles("vaadin-message-avatar", css`
    :host {
      --vaadin-avatar-outline-width: 0px; /* stylelint-disable-line length-zero-no-unit */
      flex-shrink: 0;
    }
  `, { moduleId: "vaadin-message-avatar-styles" });
var MessageAvatar = class extends Avatar {
  static get is() {
    return "vaadin-message-avatar";
  }
};
customElements.define(MessageAvatar.is, MessageAvatar);

// node_modules/@vaadin/message-list/src/vaadin-message.js
var Message = class extends FocusMixin(ElementMixin(ThemableMixin(PolymerElement))) {
  static get properties() {
    return {
      time: {
        type: String
      },
      userName: {
        type: String
      },
      userAbbr: {
        type: String
      },
      userImg: {
        type: String
      },
      userColorIndex: {
        type: Number
      }
    };
  }
  static get template() {
    return html`
      <style>
        :host {
          display: flex;
          flex-direction: row;
          outline: none;
        }

        :host([hidden]) {
          display: none !important;
        }

        [part='content'] {
          display: flex;
          flex-direction: column;
          flex-grow: 1;
        }

        [part='header'] {
          align-items: baseline;
          display: flex;
          flex-direction: row;
          flex-wrap: wrap;
        }

        [part='name'] {
          font-weight: 500;
        }

        [part='message'] {
          white-space: pre-wrap;
        }
      </style>
      <vaadin-message-avatar
        part="avatar"
        name="[[userName]]"
        abbr="[[userAbbr]]"
        img="[[userImg]]"
        color-index="[[userColorIndex]]"
        tabindex="-1"
        aria-hidden="true"
      ></vaadin-message-avatar>
      <div part="content">
        <div part="header">
          <span part="name">[[userName]]</span>
          <span part="time">[[time]]</span>
        </div>
        <div part="message"><slot></slot></div>
      </div>
    `;
  }
  static get is() {
    return "vaadin-message";
  }
};
customElements.define(Message.is, Message);

// node_modules/@vaadin/message-list/src/vaadin-message-list.js
var MessageList = class extends ElementMixin(ThemableMixin(PolymerElement)) {
  static get is() {
    return "vaadin-message-list";
  }
  static get properties() {
    return {
      items: {
        type: Array,
        value: function() {
          return [];
        },
        observer: "_itemsChanged"
      }
    };
  }
  static get template() {
    return html`
      <style>
        :host {
          display: block;
          overflow: auto;
        }

        :host([hidden]) {
          display: none !important;
        }
      </style>
      <div part="list" role="list">
        <template is="dom-repeat" items="[[items]]">
          <vaadin-message
            time="[[item.time]]"
            user-name="[[item.userName]]"
            user-abbr="[[item.userAbbr]]"
            user-img="[[item.userImg]]"
            user-color-index="[[item.userColorIndex]]"
            theme$="[[item.theme]]"
            role="listitem"
            on-focusin="_handleFocusEvent"
            >[[item.text]]</vaadin-message
          >
        </template>
      </div>
    `;
  }
  ready() {
    super.ready();
    this.setAttribute("aria-relevant", "additions");
    this.setAttribute("role", "log");
    this.addEventListener("keydown", (e) => this._onKeydown(e));
  }
  get _messages() {
    return Array.from(this.shadowRoot.querySelectorAll("vaadin-message"));
  }
  _itemsChanged(newVal, oldVal) {
    const focusedIndex = this._getIndexOfFocusableElement();
    if (newVal && newVal.length) {
      const moreItems = !oldVal || newVal.length > oldVal.length;
      const closeToBottom = this.scrollHeight < this.clientHeight + this.scrollTop + 50;
      microTask.run(() => {
        this._setTabIndexesByIndex(focusedIndex);
        if (moreItems && closeToBottom) {
          this._scrollToLastMessage();
        }
      });
    }
  }
  _scrollToLastMessage() {
    if (this.items.length > 0) {
      this.scrollTop = this.scrollHeight - this.clientHeight;
    }
  }
  _onKeydown(event) {
    if (event.metaKey || event.ctrlKey) {
      return;
    }
    const target = event.composedPath()[0];
    let currentIndex = this._messages.indexOf(target);
    switch (event.key) {
      case "ArrowUp":
        currentIndex -= 1;
        break;
      case "ArrowDown":
        currentIndex += 1;
        break;
      case "Home":
        currentIndex = 0;
        break;
      case "End":
        currentIndex = this._messages.length - 1;
        break;
      default:
        return;
    }
    if (currentIndex < 0) {
      currentIndex = this._messages.length - 1;
    }
    if (currentIndex > this._messages.length - 1) {
      currentIndex = 0;
    }
    this._focus(currentIndex);
    event.preventDefault();
  }
  _focus(idx) {
    const target = this._messages[idx];
    target.focus();
  }
  _handleFocusEvent(e) {
    const target = e.composedPath().find((node) => node instanceof Message);
    this._setTabIndexesByMessage(target);
  }
  _setTabIndexesByIndex(index) {
    const message = this._messages[index] || this._messages[0];
    this._setTabIndexesByMessage(message);
  }
  _setTabIndexesByMessage(message) {
    this._messages.forEach((e) => e.tabIndex = e === message ? 0 : -1);
  }
  _getIndexOfFocusableElement() {
    const index = this._messages.findIndex((e) => e.tabIndex == 0);
    return index != -1 ? index : 0;
  }
};
customElements.define(MessageList.is, MessageList);
/**
 * @license
 * Copyright (c) 2021 - 2022 Vaadin Ltd.
 * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
 */
//# sourceMappingURL=@vaadin_message-list_theme_lumo_vaadin-message-list_js.js.map
