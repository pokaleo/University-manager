{
  "version": 3,
  "sources": ["../@vaadin/field-base/src/input-constraints-mixin.js", "../@vaadin/field-base/src/input-control-mixin.js", "../@vaadin/field-base/src/styles/clear-button-styles.js", "../@vaadin/field-base/src/styles/input-field-shared-styles.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\nimport { DelegateStateMixin } from './delegate-state-mixin.js';\nimport { InputMixin } from './input-mixin.js';\nimport { ValidateMixin } from './validate-mixin.js';\n\n/**\n * A mixin to combine multiple input validation constraints.\n *\n * @polymerMixin\n * @mixes DelegateStateMixin\n * @mixes InputMixin\n * @mixes ValidateMixin\n */\nexport const InputConstraintsMixin = dedupingMixin(\n  (superclass) =>\n    class InputConstraintsMixinClass extends DelegateStateMixin(ValidateMixin(InputMixin(superclass))) {\n      /**\n       * An array of attributes which participate in the input validation.\n       * Changing these attributes will cause the input to re-validate.\n       *\n       * IMPORTANT: The attributes should be properly delegated to the input element\n       * from the host using `delegateAttrs` getter (see `DelegateStateMixin`).\n       * The `required` attribute is already delegated.\n       */\n      static get constraints() {\n        return ['required'];\n      }\n\n      static get delegateAttrs() {\n        return [...super.delegateAttrs, 'required'];\n      }\n\n      /** @protected */\n      ready() {\n        super.ready();\n\n        this._createConstraintsObserver();\n      }\n\n      /**\n       * Returns true if the current input value satisfies all constraints (if any).\n       * @return {boolean}\n       */\n      checkValidity() {\n        if (this.inputElement && this._hasValidConstraints(this.constructor.constraints.map((c) => this[c]))) {\n          return this.inputElement.checkValidity();\n        }\n        return !this.invalid;\n      }\n\n      /**\n       * Returns true if some of the provided set of constraints are valid.\n       * @param {Array} constraints\n       * @return {boolean}\n       * @protected\n       */\n      _hasValidConstraints(constraints) {\n        return constraints.some((c) => this.__isValidConstraint(c));\n      }\n\n      /**\n       * Override this method to customize setting up constraints observer.\n       * @protected\n       */\n      _createConstraintsObserver() {\n        // This complex observer needs to be added dynamically instead of using `static get observers()`\n        // to make it possible to tweak this behavior in classes that apply this mixin.\n        this._createMethodObserver(`_constraintsChanged(${this.constructor.constraints.join(', ')})`);\n      }\n\n      /**\n       * Override this method to implement custom validation constraints.\n       * @param {unknown[]} constraints\n       * @protected\n       */\n      _constraintsChanged(...constraints) {\n        // Prevent marking field as invalid when setting required state\n        // or any other constraint before a user has entered the value.\n        if (!this.invalid) {\n          return;\n        }\n\n        if (this._hasValidConstraints(constraints)) {\n          this.validate();\n        } else {\n          this.invalid = false;\n        }\n      }\n\n      /**\n       * Override an event listener inherited from `InputMixin`\n       * to capture native `change` event and make sure that\n       * a new one is dispatched after validation runs.\n       * @param {Event} event\n       * @protected\n       * @override\n       */\n      _onChange(event) {\n        event.stopPropagation();\n\n        this.validate();\n\n        this.dispatchEvent(\n          new CustomEvent('change', {\n            detail: {\n              sourceEvent: event\n            },\n            bubbles: event.bubbles,\n            cancelable: event.cancelable\n          })\n        );\n      }\n\n      /** @private */\n      __isValidConstraint(constraint) {\n        // 0 is valid for `minlength` and `maxlength`\n        return Boolean(constraint) || constraint === 0;\n      }\n    }\n);\n", "/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { KeyboardMixin } from '@vaadin/component-base/src/keyboard-mixin.js';\nimport { DelegateFocusMixin } from './delegate-focus-mixin.js';\nimport { FieldMixin } from './field-mixin.js';\nimport { InputConstraintsMixin } from './input-constraints-mixin.js';\n\n/**\n * A mixin to provide shared logic for the editable form input controls.\n *\n * @polymerMixin\n * @mixes DelegateFocusMixin\n * @mixes FieldMixin\n * @mixes InputConstraintsMixin\n * @mixes KeyboardMixin\n */\nexport const InputControlMixin = (superclass) =>\n  class InputControlMixinClass extends DelegateFocusMixin(\n    InputConstraintsMixin(FieldMixin(KeyboardMixin(superclass)))\n  ) {\n    static get properties() {\n      return {\n        /**\n         * If true, the input text gets fully selected when the field is focused using click or touch / tap.\n         */\n        autoselect: {\n          type: Boolean,\n          value: false\n        },\n\n        /**\n         * Set to true to display the clear icon which clears the input.\n         * @attr {boolean} clear-button-visible\n         */\n        clearButtonVisible: {\n          type: Boolean,\n          reflectToAttribute: true,\n          value: false\n        },\n\n        /**\n         * The name of this field.\n         */\n        name: {\n          type: String,\n          reflectToAttribute: true\n        },\n\n        /**\n         * A hint to the user of what can be entered in the field.\n         */\n        placeholder: {\n          type: String,\n          reflectToAttribute: true\n        },\n\n        /**\n         * When present, it specifies that the field is read-only.\n         */\n        readonly: {\n          type: Boolean,\n          value: false,\n          reflectToAttribute: true\n        },\n\n        /**\n         * The text usually displayed in a tooltip popup when the mouse is over the field.\n         */\n        title: {\n          type: String,\n          reflectToAttribute: true\n        }\n      };\n    }\n\n    static get delegateAttrs() {\n      return [...super.delegateAttrs, 'name', 'type', 'placeholder', 'readonly', 'invalid', 'title'];\n    }\n\n    /**\n     * Any element extending this mixin is required to implement this getter.\n     * It returns the reference to the clear button element.\n     * @protected\n     * @return {Element | null | undefined}\n     */\n    get clearElement() {\n      console.warn(`Please implement the 'clearElement' property in <${this.localName}>`);\n      return null;\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n\n      if (this.clearElement) {\n        this.clearElement.addEventListener('click', (e) => this._onClearButtonClick(e));\n      }\n    }\n\n    /**\n     * @param {Event} event\n     * @protected\n     */\n    _onClearButtonClick(event) {\n      event.preventDefault();\n      this.inputElement.focus();\n      this.__clear();\n    }\n\n    /**\n     * Override an event listener from `DelegateFocusMixin`.\n     * @param {FocusEvent} event\n     * @protected\n     * @override\n     */\n    _onFocus(event) {\n      super._onFocus(event);\n\n      if (this.autoselect && this.inputElement) {\n        this.inputElement.select();\n      }\n    }\n\n    /**\n     * Override an event listener inherited from `KeydownMixin` to clear on Esc.\n     * Components that extend this mixin can prevent this behavior by overriding\n     * this method without calling `super._onKeyDown` to provide custom logic.\n     * @param {KeyboardEvent} event\n     * @protected\n     * @override\n     */\n    _onKeyDown(event) {\n      super._onKeyDown(event);\n\n      if (event.key === 'Escape' && this.clearButtonVisible && !!this.value) {\n        this.__clear();\n      }\n    }\n\n    /**\n     * Override an event listener inherited from `InputMixin`\n     * to capture native `change` event and make sure that\n     * a new one is dispatched after validation runs.\n     * @param {Event} event\n     * @protected\n     * @override\n     */\n    _onChange(event) {\n      event.stopPropagation();\n\n      this.validate();\n\n      this.dispatchEvent(\n        new CustomEvent('change', {\n          detail: {\n            sourceEvent: event\n          },\n          bubbles: event.bubbles,\n          cancelable: event.cancelable\n        })\n      );\n    }\n\n    /** @private */\n    __clear() {\n      this.clear();\n      this.inputElement.dispatchEvent(new Event('input', { bubbles: true, composed: true }));\n      this.inputElement.dispatchEvent(new Event('change', { bubbles: true }));\n    }\n\n    /**\n     * Fired when the user commits a value change.\n     *\n     * @event change\n     */\n\n    /**\n     * Fired when the value is changed by the user: on every typing keystroke,\n     * and the value is cleared using the clear button.\n     *\n     * @event input\n     */\n  };\n", "/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd..\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { css } from 'lit';\n\nexport const clearButton = css`\n  [part='clear-button'] {\n    display: none;\n    cursor: default;\n  }\n\n  [part='clear-button']::before {\n    content: '\u2715';\n  }\n\n  :host([clear-button-visible][has-value]:not([disabled]):not([readonly])) [part='clear-button'] {\n    display: block;\n  }\n`;\n", "/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd..\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { clearButton } from './clear-button-styles.js';\nimport { fieldShared } from './field-shared-styles.js';\nimport { inputFieldContainer } from './input-field-container-styles.js';\n\nexport const inputFieldShared = [fieldShared, inputFieldContainer, clearButton];\n"],
  "mappings": "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",
  "names": []
}
