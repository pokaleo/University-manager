{
  "version": 3,
  "sources": ["../@vaadin/field-base/src/input-field-mixin.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { InputControlMixin } from './input-control-mixin.js';\n\n/**\n * A mixin to provide logic for vaadin-text-field and related components.\n *\n * @polymerMixin\n * @mixes InputControlMixin\n */\nexport const InputFieldMixin = (superclass) =>\n  class InputFieldMixinClass extends InputControlMixin(superclass) {\n    static get properties() {\n      return {\n        /**\n         * Whether the value of the control can be automatically completed by the browser.\n         * List of available options at:\n         * https://developer.mozilla.org/en/docs/Web/HTML/Element/input#attr-autocomplete\n         */\n        autocomplete: {\n          type: String\n        },\n\n        /**\n         * This is a property supported by Safari that is used to control whether\n         * autocorrection should be enabled when the user is entering/editing the text.\n         * Possible values are:\n         * on: Enable autocorrection.\n         * off: Disable autocorrection.\n         */\n        autocorrect: {\n          type: String\n        },\n\n        /**\n         * This is a property supported by Safari and Chrome that is used to control whether\n         * autocapitalization should be enabled when the user is entering/editing the text.\n         * Possible values are:\n         * characters: Characters capitalization.\n         * words: Words capitalization.\n         * sentences: Sentences capitalization.\n         * none: No capitalization.\n         */\n        autocapitalize: {\n          type: String\n        },\n\n        /**\n         * A pattern matched against individual characters the user inputs.\n         * When set, the field will prevent:\n         * - `keyDown` events if the entered key doesn't match `/^_enabledCharPattern$/`\n         * - `paste` events if the pasted text doesn't match `/^_enabledCharPattern*$/`\n         * - `drop` events if the dropped text doesn't match `/^_enabledCharPattern*$/`\n         *\n         * For example, to enable entering only numbers and minus signs,\n         * `_enabledCharPattern = \"[\\\\d-]\"`\n         * @protected\n         */\n        _enabledCharPattern: {\n          type: String,\n          observer: '_enabledCharPatternChanged'\n        }\n      };\n    }\n\n    static get delegateAttrs() {\n      return [...super.delegateAttrs, 'autocapitalize', 'autocomplete', 'autocorrect'];\n    }\n\n    constructor() {\n      super();\n\n      this._boundOnPaste = this._onPaste.bind(this);\n      this._boundOnDrop = this._onDrop.bind(this);\n      this._boundOnBeforeInput = this._onBeforeInput.bind(this);\n    }\n\n    /**\n     * @param {HTMLElement} input\n     * @protected\n     * @override\n     */\n    _inputElementChanged(input) {\n      super._inputElementChanged(input);\n\n      if (input) {\n        // Discard value set on the custom slotted input.\n        if (input.value && input.value !== this.value) {\n          console.warn(`Please define value on the <${this.localName}> component!`);\n          input.value = '';\n        }\n\n        if (this.value) {\n          input.value = this.value;\n        }\n      }\n    }\n\n    // Workaround for https://github.com/Polymer/polymer/issues/5259\n    get __data() {\n      return this.__dataValue || {};\n    }\n\n    set __data(value) {\n      this.__dataValue = value;\n    }\n\n    /**\n     * Override an event listener from `DelegateFocusMixin`.\n     * @param {FocusEvent} event\n     * @protected\n     * @override\n     */\n    _onBlur(event) {\n      super._onBlur(event);\n\n      this.validate();\n    }\n\n    /**\n     * Override an event listener from `InputMixin`\n     * to mark as valid after user started typing.\n     * @param {Event} event\n     * @protected\n     * @override\n     */\n    _onInput(event) {\n      super._onInput(event);\n\n      if (this.invalid) {\n        this.validate();\n      }\n    }\n\n    /**\n     * Override a method from `InputMixin` to validate the field\n     * when a new value is set programmatically.\n     * @param {string} value\n     * @protected\n     * @override\n     */\n    _forwardInputValue(value) {\n      super._forwardInputValue(value);\n\n      if (this.invalid) {\n        this.validate();\n      }\n    }\n\n    /**\n     * Override a method from `InputMixin`.\n     * @param {!HTMLElement} input\n     * @protected\n     * @override\n     */\n    _addInputListeners(input) {\n      super._addInputListeners(input);\n\n      input.addEventListener('paste', this._boundOnPaste);\n      input.addEventListener('drop', this._boundOnDrop);\n      input.addEventListener('beforeinput', this._boundOnBeforeInput);\n    }\n\n    /**\n     * Override a method from `InputMixin`.\n     * @param {!HTMLElement} input\n     * @protected\n     * @override\n     */\n    _removeInputListeners(input) {\n      super._removeInputListeners(input);\n\n      input.removeEventListener('paste', this._boundOnPaste);\n      input.removeEventListener('drop', this._boundOnDrop);\n      input.removeEventListener('beforeinput', this._boundOnBeforeInput);\n    }\n\n    /**\n     * Override an event listener from `ClearButtonMixin`\n     * to avoid adding a separate listener.\n     * @param {!KeyboardEvent} event\n     * @protected\n     * @override\n     */\n    _onKeyDown(event) {\n      if (this._enabledCharPattern && !this.__shouldAcceptKey(event)) {\n        event.preventDefault();\n      }\n\n      super._onKeyDown(event);\n    }\n\n    /** @private */\n    __shouldAcceptKey(event) {\n      return (\n        event.metaKey ||\n        event.ctrlKey ||\n        !event.key || // allow typing anything if event.key is not supported\n        event.key.length !== 1 || // allow \"Backspace\", \"ArrowLeft\" etc.\n        this.__enabledCharRegExp.test(event.key)\n      );\n    }\n\n    /** @private */\n    _onPaste(e) {\n      if (this._enabledCharPattern) {\n        const pastedText = (e.clipboardData || window.clipboardData).getData('text');\n        if (!this.__enabledTextRegExp.test(pastedText)) {\n          e.preventDefault();\n        }\n      }\n    }\n\n    /** @private */\n    _onDrop(e) {\n      if (this._enabledCharPattern) {\n        const draggedText = e.dataTransfer.getData('text');\n        if (!this.__enabledTextRegExp.test(draggedText)) {\n          e.preventDefault();\n        }\n      }\n    }\n\n    /** @private */\n    _onBeforeInput(e) {\n      // The `beforeinput` event covers all the cases for `_enabledCharPattern`: keyboard, pasting and dropping,\n      // but it is still experimental technology so we can't rely on it. It's used here just as an additional check,\n      // because it seems to be the only way to detect and prevent specific keys on mobile devices.\n      // See https://github.com/vaadin/vaadin-text-field/issues/429\n      if (this._enabledCharPattern && e.data && !this.__enabledTextRegExp.test(e.data)) {\n        e.preventDefault();\n      }\n    }\n\n    /** @private */\n    _enabledCharPatternChanged(charPattern) {\n      if (charPattern) {\n        this.__enabledCharRegExp = new RegExp('^' + charPattern + '$');\n        this.__enabledTextRegExp = new RegExp('^' + charPattern + '*$');\n      }\n    }\n  };\n"],
  "mappings": "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",
  "names": []
}
