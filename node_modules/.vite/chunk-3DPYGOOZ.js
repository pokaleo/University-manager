import {
  fieldShared,
  inputFieldContainer
} from "./chunk-OA3YIVWN.js";
import {
  FieldMixin,
  ValidateMixin
} from "./chunk-YJVFTOSG.js";
import {
  DelegateStateMixin,
  InputMixin
} from "./chunk-YESAUM4I.js";
import {
  DelegateFocusMixin
} from "./chunk-W2FE6W4J.js";
import {
  KeyboardMixin
} from "./chunk-CHZ6BFNC.js";
import {
  css
} from "./chunk-PYLEJJK2.js";
import {
  dedupingMixin
} from "./chunk-NZ6RMXB7.js";

// node_modules/@vaadin/field-base/src/input-constraints-mixin.js
var InputConstraintsMixin = dedupingMixin((superclass) => class InputConstraintsMixinClass extends DelegateStateMixin(ValidateMixin(InputMixin(superclass))) {
  static get constraints() {
    return ["required"];
  }
  static get delegateAttrs() {
    return [...super.delegateAttrs, "required"];
  }
  ready() {
    super.ready();
    this._createConstraintsObserver();
  }
  checkValidity() {
    if (this.inputElement && this._hasValidConstraints(this.constructor.constraints.map((c) => this[c]))) {
      return this.inputElement.checkValidity();
    }
    return !this.invalid;
  }
  _hasValidConstraints(constraints) {
    return constraints.some((c) => this.__isValidConstraint(c));
  }
  _createConstraintsObserver() {
    this._createMethodObserver(`_constraintsChanged(${this.constructor.constraints.join(", ")})`);
  }
  _constraintsChanged(...constraints) {
    if (!this.invalid) {
      return;
    }
    if (this._hasValidConstraints(constraints)) {
      this.validate();
    } else {
      this.invalid = false;
    }
  }
  _onChange(event) {
    event.stopPropagation();
    this.validate();
    this.dispatchEvent(new CustomEvent("change", {
      detail: {
        sourceEvent: event
      },
      bubbles: event.bubbles,
      cancelable: event.cancelable
    }));
  }
  __isValidConstraint(constraint) {
    return Boolean(constraint) || constraint === 0;
  }
});

// node_modules/@vaadin/field-base/src/input-control-mixin.js
var InputControlMixin = (superclass) => class InputControlMixinClass extends DelegateFocusMixin(InputConstraintsMixin(FieldMixin(KeyboardMixin(superclass)))) {
  static get properties() {
    return {
      autoselect: {
        type: Boolean,
        value: false
      },
      clearButtonVisible: {
        type: Boolean,
        reflectToAttribute: true,
        value: false
      },
      name: {
        type: String,
        reflectToAttribute: true
      },
      placeholder: {
        type: String,
        reflectToAttribute: true
      },
      readonly: {
        type: Boolean,
        value: false,
        reflectToAttribute: true
      },
      title: {
        type: String,
        reflectToAttribute: true
      }
    };
  }
  static get delegateAttrs() {
    return [...super.delegateAttrs, "name", "type", "placeholder", "readonly", "invalid", "title"];
  }
  get clearElement() {
    console.warn(`Please implement the 'clearElement' property in <${this.localName}>`);
    return null;
  }
  ready() {
    super.ready();
    if (this.clearElement) {
      this.clearElement.addEventListener("click", (e) => this._onClearButtonClick(e));
    }
  }
  _onClearButtonClick(event) {
    event.preventDefault();
    this.inputElement.focus();
    this.__clear();
  }
  _onFocus(event) {
    super._onFocus(event);
    if (this.autoselect && this.inputElement) {
      this.inputElement.select();
    }
  }
  _onKeyDown(event) {
    super._onKeyDown(event);
    if (event.key === "Escape" && this.clearButtonVisible && !!this.value) {
      this.__clear();
    }
  }
  _onChange(event) {
    event.stopPropagation();
    this.validate();
    this.dispatchEvent(new CustomEvent("change", {
      detail: {
        sourceEvent: event
      },
      bubbles: event.bubbles,
      cancelable: event.cancelable
    }));
  }
  __clear() {
    this.clear();
    this.inputElement.dispatchEvent(new Event("input", { bubbles: true, composed: true }));
    this.inputElement.dispatchEvent(new Event("change", { bubbles: true }));
  }
};

// node_modules/@vaadin/field-base/src/styles/clear-button-styles.js
var clearButton = css`
  [part='clear-button'] {
    display: none;
    cursor: default;
  }

  [part='clear-button']::before {
    content: 'âœ•';
  }

  :host([clear-button-visible][has-value]:not([disabled]):not([readonly])) [part='clear-button'] {
    display: block;
  }
`;

// node_modules/@vaadin/field-base/src/styles/input-field-shared-styles.js
var inputFieldShared = [fieldShared, inputFieldContainer, clearButton];

export {
  InputConstraintsMixin,
  InputControlMixin,
  inputFieldShared
};
/**
 * @license
 * Copyright (c) 2021 - 2022 Vaadin Ltd.
 * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
 */
/**
 * @license
 * Copyright (c) 2021 - 2022 Vaadin Ltd..
 * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
 */
//# sourceMappingURL=chunk-3DPYGOOZ.js.map
