import {
  SlotStylesMixin
} from "./chunk-6P7LAZ4E.js";
import {
  TextField
} from "./chunk-ATQKI5W3.js";
import {
  Button
} from "./chunk-JTXRSU57.js";
import {
  SlotController
} from "./chunk-2PREY5TQ.js";
import {
  html
} from "./chunk-EMDRMWGL.js";

// node_modules/@vaadin/password-field/src/vaadin-password-field-button.js
var PasswordFieldButton = class extends Button {
  static get is() {
    return "vaadin-password-field-button";
  }
  static get template() {
    return html`
      <style>
        :host {
          display: block;
        }

        :host([hidden]) {
          display: none !important;
        }
      </style>
    `;
  }
};
customElements.define(PasswordFieldButton.is, PasswordFieldButton);

// node_modules/@vaadin/password-field/src/vaadin-password-field.js
var ownTemplate = html`
  <div part="reveal-button" slot="suffix">
    <slot name="reveal"></slot>
  </div>
`;
var memoizedTemplate;
var PasswordField = class extends SlotStylesMixin(TextField) {
  static get is() {
    return "vaadin-password-field";
  }
  static get template() {
    if (!memoizedTemplate) {
      memoizedTemplate = super.template.cloneNode(true);
      const revealButton = ownTemplate.content.querySelector('[part="reveal-button"]');
      const inputField = memoizedTemplate.content.querySelector('[part="input-field"]');
      inputField.appendChild(revealButton);
    }
    return memoizedTemplate;
  }
  static get properties() {
    return {
      revealButtonHidden: {
        type: Boolean,
        observer: "_revealButtonHiddenChanged",
        value: false
      },
      passwordVisible: {
        type: Boolean,
        value: false,
        reflectToAttribute: true,
        observer: "_passwordVisibleChanged",
        readOnly: true
      },
      i18n: {
        type: Object,
        value: () => {
          return {
            reveal: "Show password"
          };
        }
      }
    };
  }
  static get observers() {
    return ["__i18nChanged(i18n.*)"];
  }
  get slotStyles() {
    const tag = this.localName;
    return [
      `
        ${tag} [slot="input"]::-ms-reveal {
          display: none;
        }
      `
    ];
  }
  get _revealNode() {
    return this._revealButtonController && this._revealButtonController.node;
  }
  constructor() {
    super();
    this._setType("password");
    this.__boundRevealButtonClick = this._onRevealButtonClick.bind(this);
    this.__boundRevealButtonTouchend = this._onRevealButtonTouchend.bind(this);
  }
  ready() {
    super.ready();
    this._revealPart = this.shadowRoot.querySelector('[part="reveal-button"]');
    this._revealButtonController = new SlotController(this, "reveal", () => document.createElement("vaadin-password-field-button"), (host, btn) => {
      btn.disabled = host.disabled;
      btn.addEventListener("click", host.__boundRevealButtonClick);
      btn.addEventListener("touchend", host.__boundRevealButtonTouchend);
    });
    this.addController(this._revealButtonController);
    this.__updateAriaLabel(this.i18n);
    this._updateToggleState(false);
    this._toggleRevealHidden(this.revealButtonHidden);
    if (this.inputElement) {
      this.inputElement.autocapitalize = "off";
    }
  }
  _shouldSetFocus(event) {
    return event.target === this.inputElement || event.target === this._revealNode;
  }
  _shouldRemoveFocus(event) {
    return !(event.relatedTarget === this._revealNode || event.relatedTarget === this.inputElement && event.target === this._revealNode);
  }
  _setFocused(focused) {
    super._setFocused(focused);
    if (!focused) {
      this._setPasswordVisible(false);
    } else {
      const isButtonFocused = this.getRootNode().activeElement === this._revealNode;
      this.toggleAttribute("focus-ring", this._keyboardActive && !isButtonFocused);
    }
  }
  __updateAriaLabel(i18n) {
    if (i18n.reveal && this._revealNode) {
      this._revealNode.setAttribute("aria-label", i18n.reveal);
    }
  }
  __i18nChanged(i18n) {
    this.__updateAriaLabel(i18n.base);
  }
  _revealButtonHiddenChanged(hidden) {
    this._toggleRevealHidden(hidden);
  }
  _togglePasswordVisibility() {
    this._setPasswordVisible(!this.passwordVisible);
  }
  _onRevealButtonClick() {
    this._togglePasswordVisibility();
  }
  _onRevealButtonTouchend(e) {
    e.preventDefault();
    this._togglePasswordVisibility();
    this.inputElement.focus();
  }
  _toggleRevealHidden(hidden) {
    if (this._revealNode) {
      if (hidden) {
        this._revealPart.setAttribute("hidden", "");
        this._revealNode.setAttribute("tabindex", "-1");
        this._revealNode.setAttribute("aria-hidden", "true");
      } else {
        this._revealPart.removeAttribute("hidden");
        this._revealNode.setAttribute("tabindex", "0");
        this._revealNode.removeAttribute("aria-hidden");
      }
    }
  }
  _updateToggleState(passwordVisible) {
    if (this._revealNode) {
      this._revealNode.setAttribute("aria-pressed", passwordVisible ? "true" : "false");
    }
  }
  _passwordVisibleChanged(passwordVisible) {
    this._setType(passwordVisible ? "text" : "password");
    this._updateToggleState(passwordVisible);
  }
  _disabledChanged(disabled, oldDisabled) {
    super._disabledChanged(disabled, oldDisabled);
    if (this._revealNode) {
      this._revealNode.disabled = disabled;
    }
  }
};
customElements.define(PasswordField.is, PasswordField);
/**
 * @license
 * Copyright (c) 2021 - 2022 Vaadin Ltd.
 * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
 */
//# sourceMappingURL=chunk-WBRBJ4QO.js.map
