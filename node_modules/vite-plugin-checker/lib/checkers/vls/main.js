"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VlsChecker = exports.createDiagnostic = void 0;
const worker_threads_1 = require("worker_threads");
const Checker_1 = require("../../Checker");
const diagnostics_1 = require("./diagnostics");
const createDiagnostic = (pluginConfig) => {
    let overlay = true; // Vite defaults to true
    return {
        config: ({ hmr }) => {
            const viteOverlay = !(typeof hmr === 'object' && hmr.overlay === false);
            if (pluginConfig.overlay === false || !viteOverlay) {
                overlay = false;
            }
        },
        configureServer({ root }) {
            return __awaiter(this, void 0, void 0, function* () {
                const workDir = root;
                const errorCallback = (diagnostics, overlayErr) => {
                    if (!overlay)
                        return;
                    if (!overlayErr)
                        return;
                    worker_threads_1.parentPort === null || worker_threads_1.parentPort === void 0 ? void 0 : worker_threads_1.parentPort.postMessage({
                        type: 'ERROR',
                        payload: {
                            type: 'error',
                            err: overlayErr,
                        },
                    });
                };
                yield diagnostics_1.diagnostics(workDir, 'WARN', { watch: true, errorCallback, verbose: false });
            });
        },
    };
};
exports.createDiagnostic = createDiagnostic;
class VlsChecker extends Checker_1.Checker {
    constructor() {
        super({
            name: 'vls',
            absFilePath: __filename,
            build: { buildBin: ['vite-plugin-checker-vls', ['diagnostics']] },
            createDiagnostic: exports.createDiagnostic,
        });
    }
    init() {
        const createServeAndBuild = super.initMainThread();
        module.exports.createServeAndBuild = createServeAndBuild;
        super.initWorkerThread();
    }
}
exports.VlsChecker = VlsChecker;
const vlsChecker = new VlsChecker();
vlsChecker.prepare();
vlsChecker.init();
