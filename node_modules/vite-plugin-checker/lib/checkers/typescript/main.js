"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TscChecker = void 0;
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const tiny_invariant_1 = __importDefault(require("tiny-invariant"));
const typescript_1 = __importDefault(require("typescript"));
const worker_threads_1 = require("worker_threads");
const Checker_1 = require("../../Checker");
const logger_1 = require("../../logger");
const createDiagnostic = (pluginConfig) => {
    let overlay = true; // Vite defaults to true
    let currErr = null;
    return {
        config: ({ hmr }) => {
            const viteOverlay = !(typeof hmr === 'object' && hmr.overlay === false);
            if (pluginConfig.overlay === false || !viteOverlay) {
                overlay = false;
            }
        },
        configureServer({ root }) {
            var _a, _b;
            tiny_invariant_1.default(pluginConfig.typescript, 'config.typescript should be `false`');
            const finalConfig = pluginConfig.typescript === true
                ? { root, tsconfigPath: 'tsconfig.json' }
                : {
                    root: (_a = pluginConfig.typescript.root) !== null && _a !== void 0 ? _a : root,
                    tsconfigPath: (_b = pluginConfig.typescript.tsconfigPath) !== null && _b !== void 0 ? _b : 'tsconfig.json',
                };
            let configFile;
            configFile = typescript_1.default.findConfigFile(finalConfig.root, typescript_1.default.sys.fileExists, finalConfig.tsconfigPath);
            if (configFile === undefined) {
                throw Error(`Failed to find a valid tsconfig.json: ${finalConfig.tsconfigPath} at ${finalConfig.root} is not a valid tsconfig`);
            }
            let logChunk = '';
            // https://github.com/microsoft/TypeScript/blob/a545ab1ac2cb24ff3b1aaf0bfbfb62c499742ac2/src/compiler/watch.ts#L12-L28
            const reportDiagnostic = (diagnostic) => {
                const formattedDiagnostics = logger_1.normalizeTsDiagnostic(diagnostic);
                if (!currErr) {
                    currErr = logger_1.diagnosticToViteError(formattedDiagnostics);
                }
                logChunk += os_1.default.EOL + logger_1.diagnosticToTerminalLog(formattedDiagnostics, 'TypeScript');
            };
            const reportWatchStatusChanged = (diagnostic, newLine, options, errorCount
            // eslint-disable-next-line max-params
            ) => {
                if (diagnostic.code === 6031)
                    return;
                // https://github.com/microsoft/TypeScript/issues/32542
                // https://github.com/microsoft/TypeScript/blob/dc237b317ed4bbccd043ddda802ffde00362a387/src/compiler/diagnosticMessages.json#L4086-L4088
                switch (diagnostic.code) {
                    case 6031:
                    case 6032:
                        // clear current error and use the newer errors
                        logChunk = '';
                        currErr = null;
                        return;
                    case 6193: // 1 Error
                    case 6194: // 0 errors or 2+ errors
                        if (currErr && overlay) {
                            worker_threads_1.parentPort === null || worker_threads_1.parentPort === void 0 ? void 0 : worker_threads_1.parentPort.postMessage({
                                type: 'ERROR',
                                payload: {
                                    type: 'error',
                                    err: currErr,
                                },
                            });
                        }
                }
                logger_1.ensureCall(() => {
                    if (errorCount === 0) {
                        logChunk = '';
                    }
                    console.log(logChunk + os_1.default.EOL + diagnostic.messageText.toString());
                });
            };
            // https://github.com/microsoft/TypeScript/issues/32385
            // https://github.com/microsoft/TypeScript/pull/33082/files
            const createProgram = typescript_1.default.createEmitAndSemanticDiagnosticsBuilderProgram;
            const host = typescript_1.default.createWatchCompilerHost(configFile, { noEmit: true }, typescript_1.default.sys, createProgram, reportDiagnostic, reportWatchStatusChanged);
            typescript_1.default.createWatchProgram(host);
        },
    };
};
class TscChecker extends Checker_1.Checker {
    constructor() {
        super({
            name: 'typescript',
            absFilePath: __filename,
            build: {
                buildBin: (config) => {
                    if (typeof config.typescript === 'object' && config.typescript.tsconfigPath) {
                        const tsconfig = config.typescript.root
                            ? path_1.default.join(config.typescript.root, config.typescript.tsconfigPath)
                            : config.typescript.tsconfigPath;
                        return ['tsc', ['--noEmit', '-p', tsconfig]];
                    }
                    return ['tsc', ['--noEmit']];
                },
            },
            createDiagnostic,
        });
    }
    init() {
        const createServeAndBuild = super.initMainThread();
        module.exports.createServeAndBuild = createServeAndBuild;
        super.initWorkerThread();
    }
}
exports.TscChecker = TscChecker;
const tscChecker = new TscChecker();
tscChecker.prepare();
tscChecker.init();
