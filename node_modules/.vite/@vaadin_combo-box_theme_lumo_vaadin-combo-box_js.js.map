{
  "version": 3,
  "sources": ["../@vaadin/combo-box/theme/lumo/vaadin-combo-box-styles.js", "../@vaadin/combo-box/src/vaadin-combo-box-data-provider-mixin.js", "../@vaadin/combo-box/src/vaadin-combo-box.js"],
  "sourcesContent": ["import '@vaadin/vaadin-lumo-styles/font-icons.js';\nimport { inputFieldShared } from '@vaadin/vaadin-lumo-styles/mixins/input-field-shared.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nconst comboBox = css`\n  :host {\n    outline: none;\n  }\n\n  [part='toggle-button']::before {\n    content: var(--lumo-icons-dropdown);\n  }\n`;\n\nregisterStyles('vaadin-combo-box', [inputFieldShared, comboBox], { moduleId: 'lumo-combo-box' });\n", "/**\n * @license\n * Copyright (c) 2015 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { ComboBoxPlaceholder } from './vaadin-combo-box-placeholder.js';\n\n/**\n * @polymerMixin\n */\nexport const ComboBoxDataProviderMixin = (superClass) =>\n  class DataProviderMixin extends superClass {\n    static get properties() {\n      return {\n        /**\n         * Number of items fetched at a time from the dataprovider.\n         * @attr {number} page-size\n         * @type {number}\n         */\n        pageSize: {\n          type: Number,\n          value: 50,\n          observer: '_pageSizeChanged'\n        },\n\n        /**\n         * Total number of items.\n         * @type {number | undefined}\n         */\n        size: {\n          type: Number,\n          observer: '_sizeChanged'\n        },\n\n        /**\n         * Function that provides items lazily. Receives arguments `params`, `callback`\n         *\n         * `params.page` Requested page index\n         *\n         * `params.pageSize` Current page size\n         *\n         * `params.filter` Currently applied filter\n         *\n         * `callback(items, size)` Callback function with arguments:\n         *   - `items` Current page of items\n         *   - `size` Total number of items.\n         * @type {ComboBoxDataProvider | undefined}\n         */\n        dataProvider: {\n          type: Object,\n          observer: '_dataProviderChanged'\n        },\n\n        /** @private */\n        _pendingRequests: {\n          value: () => {\n            return {};\n          }\n        },\n\n        /** @private */\n        __placeHolder: {\n          value: new ComboBoxPlaceholder()\n        }\n      };\n    }\n\n    static get observers() {\n      return [\n        '_dataProviderFilterChanged(filter, dataProvider)',\n        '_dataProviderClearFilter(dataProvider, opened, value)',\n        '_warnDataProviderValue(dataProvider, value)',\n        '_ensureFirstPage(opened)'\n      ];\n    }\n\n    /** @private */\n    _dataProviderClearFilter(dataProvider, opened, value) {\n      // Can't depend on filter in this observer as we don't want\n      // to clear the filter whenever it's set\n      if (dataProvider && !this.loading && this.filter && !(opened && this.autoOpenDisabled && value === this.filter)) {\n        this.size = undefined;\n        this._pendingRequests = {};\n        this.filter = '';\n        this.clearCache();\n      }\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n      this.clearCache();\n      this.$.dropdown.addEventListener('index-requested', (e) => {\n        const index = e.detail.index;\n        const currentScrollerPos = e.detail.currentScrollerPos;\n        const allowedIndexRange = Math.floor(this.pageSize * 1.5);\n\n        // Ignores the indexes, which are being re-sent during scrolling reset,\n        // if the corresponding page is around the current scroller position.\n        // Otherwise, there might be a last pages duplicates, which cause the\n        // loading indicator hanging and blank items\n        if (this._shouldSkipIndex(index, allowedIndexRange, currentScrollerPos)) {\n          return;\n        }\n\n        if (index !== undefined) {\n          const page = this._getPageForIndex(index);\n          if (this._shouldLoadPage(page)) {\n            this._loadPage(page);\n          }\n        }\n      });\n    }\n\n    /** @private */\n    _dataProviderFilterChanged() {\n      if (!this._shouldFetchData()) {\n        return;\n      }\n\n      this.size = undefined;\n      this._pendingRequests = {};\n      this.clearCache();\n    }\n\n    /** @private */\n    _shouldFetchData() {\n      if (!this.dataProvider) {\n        return false;\n      }\n\n      return this.opened || (this.filter && this.filter.length);\n    }\n\n    /** @private */\n    _ensureFirstPage(opened) {\n      if (opened && this._shouldLoadPage(0)) {\n        this._loadPage(0);\n      }\n    }\n\n    /** @private */\n    _shouldSkipIndex(index, allowedIndexRange, currentScrollerPos) {\n      return (\n        currentScrollerPos !== 0 &&\n        index >= currentScrollerPos - allowedIndexRange &&\n        index <= currentScrollerPos + allowedIndexRange\n      );\n    }\n\n    /** @private */\n    _shouldLoadPage(page) {\n      if (!this.filteredItems || this._forceNextRequest) {\n        this._forceNextRequest = false;\n        return true;\n      }\n\n      const loadedItem = this.filteredItems[page * this.pageSize];\n      if (loadedItem !== undefined) {\n        return loadedItem instanceof ComboBoxPlaceholder;\n      }\n      return this.size === undefined;\n    }\n\n    /** @private */\n    _loadPage(page) {\n      // make sure same page isn't requested multiple times.\n      if (!this._pendingRequests[page] && this.dataProvider) {\n        this.loading = true;\n\n        const params = {\n          page,\n          pageSize: this.pageSize,\n          filter: this.filter\n        };\n\n        const callback = (items, size) => {\n          if (this._pendingRequests[page] === callback) {\n            if (!this.filteredItems) {\n              const filteredItems = [];\n              filteredItems.splice(params.page * params.pageSize, items.length, ...items);\n              this.filteredItems = filteredItems;\n            } else {\n              this.splice('filteredItems', params.page * params.pageSize, items.length, ...items);\n            }\n            // Update selectedItem from filteredItems if value is set\n            if (this._isValidValue(this.value) && this._getItemValue(this.selectedItem) !== this.value) {\n              this._selectItemForValue(this.value);\n            }\n            if (!this.opened && !this.hasAttribute('focused')) {\n              this._commitValue();\n            }\n            this.size = size;\n\n            delete this._pendingRequests[page];\n\n            if (Object.keys(this._pendingRequests).length === 0) {\n              this.loading = false;\n            }\n          }\n        };\n\n        if (!this._pendingRequests[page]) {\n          // Don't request page if it's already being requested\n          this._pendingRequests[page] = callback;\n          this.dataProvider(params, callback);\n        }\n      }\n    }\n\n    /** @private */\n    _getPageForIndex(index) {\n      return Math.floor(index / this.pageSize);\n    }\n\n    /**\n     * Clears the cached pages and reloads data from dataprovider when needed.\n     */\n    clearCache() {\n      if (!this.dataProvider) {\n        return;\n      }\n      this._pendingRequests = {};\n      const filteredItems = [];\n      for (let i = 0; i < (this.size || 0); i++) {\n        filteredItems.push(this.__placeHolder);\n      }\n      this.filteredItems = filteredItems;\n      if (this._shouldFetchData()) {\n        this._loadPage(0);\n      } else {\n        this._forceNextRequest = true;\n      }\n    }\n\n    /** @private */\n    _sizeChanged(size = 0) {\n      const filteredItems = (this.filteredItems || []).slice(0, size);\n      for (let i = 0; i < size; i++) {\n        filteredItems[i] = filteredItems[i] !== undefined ? filteredItems[i] : this.__placeHolder;\n      }\n      this.filteredItems = filteredItems;\n\n      // Cleans up the redundant pending requests for pages > size\n      // Refers to https://github.com/vaadin/vaadin-flow-components/issues/229\n      this._flushPendingRequests(size);\n    }\n\n    /** @private */\n    _pageSizeChanged(pageSize, oldPageSize) {\n      if (Math.floor(pageSize) !== pageSize || pageSize < 1) {\n        this.pageSize = oldPageSize;\n        throw new Error('`pageSize` value must be an integer > 0');\n      }\n      this.clearCache();\n    }\n\n    /** @private */\n    _dataProviderChanged(dataProvider, oldDataProvider) {\n      this._ensureItemsOrDataProvider(() => {\n        this.dataProvider = oldDataProvider;\n      });\n    }\n\n    /** @private */\n    _ensureItemsOrDataProvider(restoreOldValueCallback) {\n      if (this.items !== undefined && this.dataProvider !== undefined) {\n        restoreOldValueCallback();\n        throw new Error('Using `items` and `dataProvider` together is not supported');\n      } else if (this.dataProvider && !this.filteredItems) {\n        this.filteredItems = [];\n      }\n    }\n\n    /** @private */\n    _warnDataProviderValue(dataProvider, value) {\n      if (dataProvider && value !== '' && (this.selectedItem === undefined || this.selectedItem === null)) {\n        const valueIndex = this._indexOfValue(value, this.filteredItems);\n        if (valueIndex < 0 || !this._getItemLabel(this.filteredItems[valueIndex])) {\n          console.warn(\n            'Warning: unable to determine the label for the provided `value`. ' +\n              'Nothing to display in the text field. This usually happens when ' +\n              'setting an initial `value` before any items are returned from ' +\n              'the `dataProvider` callback. Consider setting `selectedItem` ' +\n              'instead of `value`'\n          );\n        }\n      }\n    }\n\n    /**\n     * This method cleans up the page callbacks which refers to the\n     * non-existing pages, i.e. which item indexes are greater than the\n     * changed size.\n     * This case is basically happens when:\n     * 1. Users scroll fast to the bottom and combo box generates the\n     * redundant page request/callback\n     * 2. Server side uses undefined size lazy loading and suddenly reaches\n     * the exact size which is on the range edge\n     * (for default page size = 50, it will be 100, 200, 300, ...).\n     * @param size the new size of items\n     * @private\n     */\n    _flushPendingRequests(size) {\n      if (this._pendingRequests) {\n        const lastPage = Math.ceil(size / this.pageSize);\n        const pendingRequestsKeys = Object.keys(this._pendingRequests);\n        for (let reqIdx = 0; reqIdx < pendingRequestsKeys.length; reqIdx++) {\n          const page = parseInt(pendingRequestsKeys[reqIdx]);\n          if (page >= lastPage) {\n            this._pendingRequests[page]([], size);\n          }\n        }\n      }\n    }\n  };\n", "/**\n * @license\n * Copyright (c) 2015 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport '@vaadin/input-container/src/vaadin-input-container.js';\nimport './vaadin-combo-box-dropdown.js';\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { InputControlMixin } from '@vaadin/field-base/src/input-control-mixin.js';\nimport { InputController } from '@vaadin/field-base/src/input-controller.js';\nimport { LabelledInputController } from '@vaadin/field-base/src/labelled-input-controller.js';\nimport { PatternMixin } from '@vaadin/field-base/src/pattern-mixin.js';\nimport { inputFieldShared } from '@vaadin/field-base/src/styles/input-field-shared-styles.js';\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { ComboBoxDataProviderMixin } from './vaadin-combo-box-data-provider-mixin.js';\nimport { ComboBoxMixin } from './vaadin-combo-box-mixin.js';\n\nregisterStyles('vaadin-combo-box', inputFieldShared, { moduleId: 'vaadin-combo-box-styles' });\n\n/**\n * `<vaadin-combo-box>` is a web component for choosing a value from a filterable list of options\n * presented in a dropdown overlay. The options can be provided as a list of strings or objects\n * by setting [`items`](#/elements/vaadin-combo-box#property-items) property on the element.\n *\n * ```html\n * <vaadin-combo-box id=\"combo-box\"></vaadin-combo-box>\n * ```\n *\n * ```js\n * document.querySelector('#combo-box').items = ['apple', 'orange', 'banana'];\n * ```\n *\n * When the selected `value` is changed, a `value-changed` event is triggered.\n *\n * ### Item rendering\n *\n * To customize the content of the `<vaadin-combo-box-item>` elements placed in the dropdown, use\n * [`renderer`](#/elements/vaadin-combo-box#property-renderer) property which accepts a function.\n * The renderer function is called with `root`, `comboBox`, and `model` as arguments.\n *\n * Generate DOM content by using `model` object properties if needed, and append it to the `root`\n * element. The `comboBox` reference is provided to access the combo-box element state. Do not\n * set combo-box properties in a `renderer` function.\n *\n * ```js\n * const comboBox = document.querySelector('#combo-box');\n * comboBox.items = [{'label': 'Hydrogen', 'value': 'H'}];\n * comboBox.renderer = (root, comboBox, model) => {\n *   const item = model.item;\n *   root.innerHTML = `${model.index}: ${item.label} <b>${item.value}</b>`;\n * };\n * ```\n *\n * Renderer is called on the opening of the combo-box and each time the related model is updated.\n * Before creating new content, it is recommended to check if there is already an existing DOM\n * element in `root` from a previous renderer call for reusing it. Even though combo-box uses\n * infinite scrolling, reducing DOM operations might improve performance.\n *\n * The following properties are available in the `model` argument:\n *\n * Property   | Type             | Description\n * -----------|------------------|-------------\n * `index`    | Number           | Index of the item in the `items` array\n * `item`     | String or Object | The item reference\n * `selected` | Boolean          | True when item is selected\n * `focused`  | Boolean          | True when item is focused\n *\n * ### Lazy Loading with Function Data Provider\n *\n * In addition to assigning an array to the items property, you can alternatively use the\n * [`dataProvider`](#/elements/vaadin-combo-box#property-dataProvider) function property.\n * The `<vaadin-combo-box>` calls this function lazily, only when it needs more data\n * to be displayed.\n *\n * __Note that when using function data providers, the total number of items\n * needs to be set manually. The total number of items can be returned\n * in the second argument of the data provider callback:__\n *\n * ```javascript\n * comboBox.dataProvider = function(params, callback) {\n *   var url = 'https://api.example/data' +\n *       '?page=' + params.page +        // the requested page index\n *       '&per_page=' + params.pageSize; // number of items on the page\n *   var xhr = new XMLHttpRequest();\n *   xhr.onload = function() {\n *     var response = JSON.parse(xhr.responseText);\n *     callback(\n *       response.employees, // requested page of items\n *       response.totalSize  // total number of items\n *     );\n *   };\n *   xhr.open('GET', url, true);\n *   xhr.send();\n * };\n * ```\n *\n * ### Styling\n *\n * The following custom properties are available for styling:\n *\n * Custom property                         | Description                | Default\n * ----------------------------------------|----------------------------|---------\n * `--vaadin-field-default-width`          | Default width of the field | `12em`\n * `--vaadin-combo-box-overlay-max-height` | Max height of the overlay  | `65vh`\n *\n * `<vaadin-combo-box>` provides the same set of shadow DOM parts and state attributes as `<vaadin-text-field>`.\n * See [`<vaadin-text-field>`](#/elements/vaadin-text-field) for the styling documentation.\n *\n * In addition to `<vaadin-text-field>` parts, the following parts are available for theming:\n *\n * Part name       | Description\n * ----------------|----------------\n * `toggle-button` | The toggle button\n *\n * In addition to `<vaadin-text-field>` state attributes, the following state attributes are available for theming:\n *\n * Attribute | Description | Part name\n * ----------|-------------|------------\n * `opened`  | Set when the combo box dropdown is open | :host\n * `loading` | Set when new items are expected | :host\n *\n * If you want to replace the default `<input>` and its container with a custom implementation to get full control\n * over the input field, consider using the [`<vaadin-combo-box-light>`](#/elements/vaadin-combo-box-light) element.\n *\n * ### Internal components\n *\n * In addition to `<vaadin-combo-box>` itself, the following internal\n * components are themable:\n *\n * - `<vaadin-combo-box-overlay>` - has the same API as [`<vaadin-overlay>`](#/elements/vaadin-overlay).\n * - `<vaadin-combo-box-item>` - has the same API as [`<vaadin-item>`](#/elements/vaadin-item).\n * - [`<vaadin-input-container>`](#/elements/vaadin-input-container) - an internal element wrapping the input.\n *\n * Note: the `theme` attribute value set on `<vaadin-combo-box>` is\n * propagated to the internal components listed above.\n *\n * See [Styling Components](https://vaadin.com/docs/latest/ds/customization/styling-components) documentation.\n *\n * @fires {Event} change - Fired when the user commits a value change.\n * @fires {CustomEvent} custom-value-set - Fired when the user sets a custom value.\n * @fires {CustomEvent} filter-changed - Fired when the `filter` property changes.\n * @fires {CustomEvent} invalid-changed - Fired when the `invalid` property changes.\n * @fires {CustomEvent} opened-changed - Fired when the `opened` property changes.\n * @fires {CustomEvent} selected-item-changed - Fired when the `selectedItem` property changes.\n * @fires {CustomEvent} value-changed - Fired when the `value` property changes.\n *\n * @extends HTMLElement\n * @mixes ElementMixin\n * @mixes ThemableMixin\n * @mixes InputControlMixin\n * @mixes PatternMixin\n * @mixes ComboBoxDataProviderMixin\n * @mixes ComboBoxMixin\n */\nclass ComboBox extends ComboBoxDataProviderMixin(\n  ComboBoxMixin(PatternMixin(InputControlMixin(ThemableMixin(ElementMixin(PolymerElement)))))\n) {\n  static get is() {\n    return 'vaadin-combo-box';\n  }\n\n  static get template() {\n    return html`\n      <style>\n        :host([opened]) {\n          pointer-events: auto;\n        }\n      </style>\n\n      <div class=\"vaadin-combo-box-container\">\n        <div part=\"label\">\n          <slot name=\"label\"></slot>\n          <span part=\"required-indicator\" aria-hidden=\"true\" on-click=\"focus\"></span>\n        </div>\n\n        <vaadin-input-container\n          part=\"input-field\"\n          readonly=\"[[readonly]]\"\n          disabled=\"[[disabled]]\"\n          invalid=\"[[invalid]]\"\n          theme$=\"[[theme]]\"\n        >\n          <slot name=\"prefix\" slot=\"prefix\"></slot>\n          <slot name=\"input\"></slot>\n          <div id=\"clearButton\" part=\"clear-button\" slot=\"suffix\" aria-hidden=\"true\"></div>\n          <div id=\"toggleButton\" part=\"toggle-button\" slot=\"suffix\" aria-hidden=\"true\"></div>\n        </vaadin-input-container>\n\n        <div part=\"helper-text\">\n          <slot name=\"helper\"></slot>\n        </div>\n\n        <div part=\"error-message\">\n          <slot name=\"error-message\"></slot>\n        </div>\n      </div>\n\n      <vaadin-combo-box-dropdown\n        id=\"dropdown\"\n        opened=\"[[opened]]\"\n        renderer=\"[[renderer]]\"\n        position-target=\"[[_positionTarget]]\"\n        restore-focus-on-close=\"[[__restoreFocusOnClose]]\"\n        restore-focus-node=\"[[inputElement]]\"\n        _focused-index=\"[[_focusedIndex]]\"\n        _item-id-path=\"[[itemIdPath]]\"\n        _item-label-path=\"[[itemLabelPath]]\"\n        loading=\"[[loading]]\"\n        theme=\"[[theme]]\"\n      ></vaadin-combo-box-dropdown>\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * @protected\n       */\n      _positionTarget: {\n        type: Object\n      }\n    };\n  }\n\n  /**\n   * Used by `ClearButtonMixin` as a reference to the clear button element.\n   * @protected\n   * @return {!HTMLElement}\n   */\n  get clearElement() {\n    return this.$.clearButton;\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    this.addController(\n      new InputController(this, (input) => {\n        this._setInputElement(input);\n        this._setFocusElement(input);\n        this.stateTarget = input;\n        this.ariaTarget = input;\n      })\n    );\n    this.addController(new LabelledInputController(this.inputElement, this._labelController));\n    this._positionTarget = this.shadowRoot.querySelector('[part=\"input-field\"]');\n    this._toggleElement = this.$.toggleButton;\n  }\n\n  /**\n   * Override method inherited from `FocusMixin` to validate on blur.\n   * @param {boolean} focused\n   * @protected\n   * @override\n   */\n  _setFocused(focused) {\n    super._setFocused(focused);\n\n    if (!focused) {\n      this.validate();\n    }\n  }\n\n  /**\n   * Override method inherited from `FocusMixin` to not remove focused\n   * state when focus moves to the overlay.\n   * @param {FocusEvent} event\n   * @return {boolean}\n   * @protected\n   * @override\n   */\n  _shouldRemoveFocus(event) {\n    // Do not blur when focus moves to the overlay\n    if (event.relatedTarget === this.$.dropdown.$.overlay) {\n      event.composedPath()[0].focus();\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Override method inherited from `ClearButtonMixin` to handle clear\n   * button click and stop event from propagating to the host element.\n   * @param {Event} event\n   * @protected\n   * @override\n   */\n  _onClearButtonClick(event) {\n    event.stopPropagation();\n\n    this._handleClearButtonClick(event);\n  }\n\n  /**\n   * @param {Event} event\n   * @protected\n   */\n  _onHostClick(event) {\n    const path = event.composedPath();\n\n    // Open dropdown only when clicking on the label or input field\n    if (path.includes(this._labelNode) || path.includes(this._positionTarget)) {\n      super._onHostClick(event);\n    }\n  }\n}\n\ncustomElements.define(ComboBox.is, ComboBox);\n\nexport { ComboBox };\n"],
  "mappings": "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",
  "names": []
}
