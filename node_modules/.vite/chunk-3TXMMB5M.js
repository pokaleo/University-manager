import {
  SlotMixin
} from "./chunk-HEO3XYAH.js";
import {
  Dialog,
  DialogOverlay
} from "./chunk-LJHVE6HB.js";
import {
  ThemePropertyMixin,
  registerStyles
} from "./chunk-PALO6AVQ.js";
import {
  ElementMixin
} from "./chunk-OKCEHAIA.js";
import {
  css
} from "./chunk-PYLEJJK2.js";
import {
  FlattenedNodesObserver
} from "./chunk-IASAGYPQ.js";
import {
  PolymerElement,
  html
} from "./chunk-EMDRMWGL.js";
import {
  __spreadProps,
  __spreadValues
} from "./chunk-KTZKXPFA.js";

// node_modules/@vaadin/confirm-dialog/theme/lumo/vaadin-confirm-dialog-styles.js
registerStyles("vaadin-confirm-dialog-overlay", css`
    [part='header'] ::slotted(h3) {
      margin-top: 0 !important;
    }

    [part='message'] {
      width: 25em;
      min-width: 100%;
      max-width: 100%;
    }

    [part='footer'] {
      display: flex;
      flex-wrap: wrap;
      justify-content: flex-end;
      margin: calc(var(--lumo-space-l) * -1);
      margin-top: var(--lumo-space-l);
      padding: 0 var(--lumo-space-l);
      background-color: var(--lumo-contrast-5pct);
      border-bottom-left-radius: var(--lumo-border-radius-l);
      border-bottom-right-radius: var(--lumo-border-radius-l);
    }

    [part='footer'] > * {
      margin-top: var(--lumo-space-s);
      margin-bottom: var(--lumo-space-s);
    }

    ::slotted([slot$='button'][theme~='tertiary']) {
      padding-left: var(--lumo-space-s);
      padding-right: var(--lumo-space-s);
    }

    [part='cancel-button'] {
      flex-grow: 1;
    }

    @media (max-width: 360px) {
      [part='footer'] {
        flex-direction: column-reverse;
      }

      [part='footer'] div {
        margin: var(--lumo-space-xs) calc(var(--lumo-space-l) / -2) calc(var(--lumo-space-xs) * -1);
      }

      ::slotted([slot$='button']) {
        width: 100%;
        margin-top: var(--lumo-space-xs);
        margin-bottom: var(--lumo-space-xs);
      }

      [part='confirm-button'] {
        margin-top: var(--lumo-space-s);
      }

      [part='cancel-button'] {
        margin-bottom: var(--lumo-space-s);
      }
    }

    /* LTR styles */
    :host(:not([dir='rtl'])) [part='cancel-button'] {
      margin-left: calc(var(--lumo-space-s) * -1);
    }

    :host(:not([dir='rtl'])) [part='confirm-button'] {
      margin-right: calc(var(--lumo-space-s) * -1);
      margin-left: var(--lumo-space-s);
    }

    :host(:not([dir='rtl'])) [part='reject-button'] {
      margin-left: var(--lumo-space-s);
    }

    /* RTL styles */
    :host([dir='rtl']) [part='cancel-button'] {
      margin-right: calc(var(--lumo-space-s) * -1);
    }

    :host([dir='rtl']) [part='confirm-button'] {
      margin-right: var(--lumo-space-s);
      margin-left: calc(var(--lumo-space-s) * -1);
    }

    :host([dir='rtl']) [part='reject-button'] {
      margin-right: var(--lumo-space-s);
    }
  `, { moduleId: "lumo-confirm-dialog-overlay" });

// node_modules/@vaadin/confirm-dialog/src/vaadin-confirm-dialog-overlay.js
registerStyles("vaadin-confirm-dialog-overlay", css`
    :host {
      --_vaadin-confirm-dialog-content-width: auto;
      --_vaadin-confirm-dialog-content-height: auto;
    }

    [part='content'] {
      width: var(--_vaadin-confirm-dialog-content-width);
      display: flex;
      flex-direction: column;
      height: var(--_vaadin-confirm-dialog-content-height);
      box-sizing: content-box;
    }

    [part='message'] {
      margin-bottom: auto;
    }
  `, { moduleId: "vaadin-confirm-dialog-overlay-styles" });
var memoizedTemplate;
var dialogTemplate = html`
  <div part="header">
    <slot name="header"></slot>
  </div>

  <div part="message">
    <slot></slot>
  </div>

  <div part="footer">
    <div part="cancel-button">
      <slot name="cancel-button"></slot>
    </div>
    <div part="reject-button">
      <slot name="reject-button"></slot>
    </div>
    <div part="confirm-button">
      <slot name="confirm-button"></slot>
    </div>
  </div>
`;
var ConfirmDialogOverlay = class extends DialogOverlay {
  static get is() {
    return "vaadin-confirm-dialog-overlay";
  }
  static get template() {
    if (!memoizedTemplate) {
      memoizedTemplate = super.template.cloneNode(true);
      const contentPart = memoizedTemplate.content.querySelector('[part="content"]');
      const defaultSlot = contentPart.querySelector("slot:not([name])");
      contentPart.removeChild(defaultSlot);
      contentPart.appendChild(dialogTemplate.content.cloneNode(true));
    }
    return memoizedTemplate;
  }
  _finishClosing() {
    super._finishClosing();
    this.dispatchEvent(new CustomEvent("vaadin-confirm-dialog-close"));
  }
};
customElements.define(ConfirmDialogOverlay.is, ConfirmDialogOverlay);
var ConfirmDialogDialog = class extends Dialog {
  static get is() {
    return "vaadin-confirm-dialog-dialog";
  }
  static get template() {
    return html`
      <style>
        :host {
          display: none;
        }
      </style>

      <vaadin-confirm-dialog-overlay
        id="overlay"
        on-opened-changed="_onOverlayOpened"
        on-mousedown="_bringOverlayToFront"
        on-touchstart="_bringOverlayToFront"
        theme$="[[theme]]"
        modeless="[[modeless]]"
        with-backdrop="[[!modeless]]"
        resizable$="[[resizable]]"
        focus-trap
      ></vaadin-confirm-dialog-overlay>
    `;
  }
};
customElements.define(ConfirmDialogDialog.is, ConfirmDialogDialog);

// node_modules/@vaadin/confirm-dialog/src/vaadin-confirm-dialog.js
var ConfirmDialog = class extends SlotMixin(ElementMixin(ThemePropertyMixin(PolymerElement))) {
  static get template() {
    return html`
      <style>
        :host {
          display: none;
        }

        [hidden] {
          display: none !important;
        }
      </style>

      <vaadin-confirm-dialog-dialog
        id="dialog"
        opened="{{opened}}"
        aria-label="[[_getAriaLabel(header)]]"
        theme$="[[theme]]"
        no-close-on-outside-click
        no-close-on-esc="[[noCloseOnEsc]]"
      ></vaadin-confirm-dialog-dialog>

      <div hidden>
        <slot name="header"></slot>
        <slot></slot>
        <slot name="cancel-button"></slot>
        <slot name="reject-button"></slot>
        <slot name="confirm-button"></slot>
      </div>
    `;
  }
  static get is() {
    return "vaadin-confirm-dialog";
  }
  static get properties() {
    return {
      opened: {
        type: Boolean,
        value: false,
        notify: true
      },
      header: {
        type: String,
        value: ""
      },
      message: {
        type: String,
        value: ""
      },
      confirmText: {
        type: String,
        value: "Confirm"
      },
      confirmTheme: {
        type: String,
        value: "primary"
      },
      noCloseOnEsc: {
        type: Boolean,
        value: false
      },
      reject: {
        type: Boolean,
        reflectToAttribute: true,
        value: false
      },
      rejectText: {
        type: String,
        value: "Reject"
      },
      rejectTheme: {
        type: String,
        value: "error tertiary"
      },
      cancel: {
        type: Boolean,
        reflectToAttribute: true,
        value: false
      },
      cancelText: {
        type: String,
        value: "Cancel"
      },
      cancelTheme: {
        type: String,
        value: "tertiary"
      },
      _cancelButton: {
        type: HTMLElement,
        observer: "_cancelButtonChanged"
      },
      _confirmButton: {
        type: HTMLElement,
        observer: "_confirmButtonChanged"
      },
      _headerNode: {
        type: HTMLElement
      },
      _messageNode: {
        type: HTMLElement
      },
      _rejectButton: {
        type: HTMLElement,
        observer: "_rejectButtonChanged"
      }
    };
  }
  static _finalizeClass() {
    super._finalizeClass();
    const devModeCallback = window.Vaadin.developmentModeCallback;
    const licenseChecker = devModeCallback && devModeCallback["vaadin-license-checker"];
    if (typeof licenseChecker === "function") {
      licenseChecker(ConfirmDialog);
    }
  }
  static get observers() {
    return [
      "__updateConfirmButton(_confirmButton, confirmText, confirmTheme)",
      "__updateCancelButton(_cancelButton, cancelText, cancelTheme, cancel)",
      "__updateHeaderNode(_headerNode, header)",
      "__updateMessageNode(_messageNode, message)",
      "__updateRejectButton(_rejectButton, rejectText, rejectTheme, reject)"
    ];
  }
  get slots() {
    return __spreadProps(__spreadValues({}, super.slots), {
      header: () => {
        const h3 = document.createElement("h3");
        this.__defaultHeader = h3;
        return h3;
      },
      "": () => {
        const div = document.createElement("div");
        this.__defaultMessage = div;
        return div;
      },
      "cancel-button": () => {
        const button = document.createElement("vaadin-button");
        button.setAttribute("theme", this.cancelTheme);
        button.textContent = this.cancelText;
        button._isDefaultButton = true;
        return button;
      },
      "reject-button": () => {
        const button = document.createElement("vaadin-button");
        button.setAttribute("theme", this.rejectTheme);
        button.textContent = this.rejectText;
        button._isDefaultButton = true;
        return button;
      },
      "confirm-button": () => {
        const button = document.createElement("vaadin-button");
        button._isDefaultButton = true;
        return button;
      }
    });
  }
  constructor() {
    super();
    this.__slottedNodes = [];
    this._observer = new FlattenedNodesObserver(this, (info) => {
      this.__onDomChange(info.addedNodes);
    });
  }
  ready() {
    super.ready();
    this.__boundCancel = this._cancel.bind(this);
    this.__boundConfirm = this._confirm.bind(this);
    this.__boundReject = this._reject.bind(this);
    this._overlayElement = this.$.dialog.$.overlay;
    this._overlayElement.addEventListener("vaadin-overlay-escape-press", this._escPressed.bind(this));
    this._overlayElement.addEventListener("vaadin-overlay-open", () => this.__onDialogOpened());
    this._overlayElement.addEventListener("vaadin-confirm-dialog-close", () => this.__onDialogClosed());
    if (this._dimensions) {
      Object.keys(this._dimensions).forEach((name) => {
        this._setDimension(name, this._dimensions[name]);
      });
    }
  }
  __onDialogOpened() {
    const overlay = this._overlayElement;
    this.__slottedNodes.forEach((node) => {
      overlay.appendChild(node);
    });
    const confirmButton = overlay.querySelector('[slot="confirm-button"]');
    if (confirmButton) {
      confirmButton.focus();
    }
  }
  __onDialogClosed() {
    const nodes = this.__slottedNodes;
    this.__slottedNodes = [];
    nodes.forEach((node) => {
      this.appendChild(node);
    });
  }
  __onDomChange(addedNodes) {
    addedNodes.forEach((node) => {
      this.__slottedNodes.push(node);
      const isElementNode = node.nodeType == Node.ELEMENT_NODE;
      const slotName = isElementNode ? node.getAttribute("slot") : "";
      if (slotName) {
        if (slotName.indexOf("button") >= 0) {
          const [button] = slotName.split("-");
          this[`_${button}Button`] = node;
        } else if (slotName == "header") {
          this._headerNode = node;
        }
      } else {
        const isNotEmptyText = node.nodeType == Node.TEXT_NODE && node.textContent.trim() !== "";
        if (isNotEmptyText || isElementNode && node.slot === "") {
          this._messageNode = node;
        }
      }
    });
  }
  _cancelButtonChanged(button, oldButton) {
    this.__setupSlottedButton(button, oldButton, this.__boundCancel);
  }
  _confirmButtonChanged(button, oldButton) {
    this.__setupSlottedButton(button, oldButton, this.__boundConfirm);
  }
  _rejectButtonChanged(button, oldButton) {
    this.__setupSlottedButton(button, oldButton, this.__boundReject);
  }
  __setupSlottedButton(slottedButton, currentButton, clickListener) {
    if (currentButton && currentButton.parentElement) {
      currentButton.remove();
    }
    slottedButton.addEventListener("click", clickListener);
  }
  __updateCancelButton(button, cancelText, cancelTheme, showCancel) {
    if (button) {
      if (button._isDefaultButton) {
        button.textContent = cancelText;
        button.setAttribute("theme", cancelTheme);
      }
      button.toggleAttribute("hidden", !showCancel);
    }
  }
  __updateConfirmButton(button, confirmText, confirmTheme) {
    if (button && button._isDefaultButton) {
      button.textContent = confirmText;
      button.setAttribute("theme", confirmTheme);
    }
  }
  __updateHeaderNode(headerNode, header) {
    if (headerNode && headerNode === this.__defaultHeader) {
      headerNode.textContent = header;
    }
  }
  __updateMessageNode(messageNode, message) {
    if (messageNode && messageNode === this.__defaultMessage) {
      messageNode.textContent = message;
    }
  }
  __updateRejectButton(button, rejectText, rejectTheme, showReject) {
    if (button) {
      if (button._isDefaultButton) {
        button.textContent = rejectText;
        button.setAttribute("theme", rejectTheme);
      }
      button.toggleAttribute("hidden", !showReject);
    }
  }
  _escPressed(event) {
    if (!event.defaultPrevented) {
      this._cancel();
    }
  }
  _confirm() {
    this.dispatchEvent(new CustomEvent("confirm"));
    this.opened = false;
  }
  _cancel() {
    this.dispatchEvent(new CustomEvent("cancel"));
    this.opened = false;
  }
  _reject() {
    this.dispatchEvent(new CustomEvent("reject"));
    this.opened = false;
  }
  _getAriaLabel(header) {
    return header || "confirmation";
  }
  _setWidth(width) {
    this._setDimensionIfAttached("width", width);
  }
  _setHeight(height) {
    this._setDimensionIfAttached("height", height);
  }
  _setDimensionIfAttached(name, value) {
    if (this._overlayElement) {
      this._setDimension(name, value);
    } else {
      this._dimensions = this._dimensions || {};
      this._dimensions[name] = value;
    }
  }
  _setDimension(name, value) {
    this._overlayElement.style.setProperty(`--_vaadin-confirm-dialog-content-${name}`, value);
  }
};
customElements.define(ConfirmDialog.is, ConfirmDialog);
/**
 * @license
 * Copyright (c) 2018 - 2022 Vaadin Ltd.
 * This program is available under Commercial Vaadin Developer License 4.0, available at https://vaadin.com/license/cvdl-4.0.
 */
//# sourceMappingURL=chunk-3TXMMB5M.js.map
