{
  "version": 3,
  "sources": ["../@vaadin/flow-frontend/timepickerConnector.js", "dep:@vaadin_flow-frontend_timepickerConnector_js"],
  "sourcesContent": ["(function () {\n    const tryCatchWrapper = function (callback) {\n        return window.Vaadin.Flow.tryCatchWrapper(callback, 'Vaadin Time Picker');\n    };\n\n    // Execute callback when predicate returns true.\n    // Try again later if predicate returns false.\n    function when(predicate, callback, timeout = 0) {\n        if (predicate()) {\n            callback();\n        } else {\n            setTimeout(() => when(predicate, callback, 200), timeout);\n        }\n    }\n\n    window.Vaadin.Flow.timepickerConnector = {\n        initLazy: timepicker => tryCatchWrapper(function (timepicker) {\n            // Check whether the connector was already initialized for the timepicker\n            if (timepicker.$connector) {\n                return;\n            }\n\n            timepicker.$connector = {};\n\n            const getAmPmString = function (locale, testTime) {\n                const testTimeString = testTime.toLocaleTimeString(locale);\n                // AM/PM string is anything from one letter in eastern arabic to standard two letters,\n                // to having space in between, dots ...\n                // cannot disqualify whitespace since some locales use a. m. / p. m.\n                // TODO when more scripts support is added (than Arabic), need to exclude those numbers too\n                const endWithAmPmRegex = /[^\\d\\u0660-\\u0669]+$/g;\n                let amPmString = testTimeString.match(endWithAmPmRegex);\n                if (!amPmString) {\n                    // eg. chinese (and some else too) starts with am/pm\n                    amPmString = testTimeString.match(/^[^\\d\\u0660-\\u0669]+/g);\n                }\n                if (amPmString) {\n                    amPmString = amPmString[0].trim();\n                }\n                return amPmString;\n            };\n            const testPmTime = new Date('August 19, 1975 23:15:30');\n            const testAmTime = new Date('August 19, 1975 05:15:30');\n\n            const getPmString = function (locale) {\n                return getAmPmString(locale, testPmTime);\n\n            };\n            const getAmString = function (locale) {\n                return getAmPmString(locale, testAmTime);\n            };\n\n            // map from unicode eastern arabic number characters to arabic numbers\n            const arabicDigitMap = {\n                '\\\\u0660': '0',\n                '\\\\u0661': '1',\n                '\\\\u0662': '2',\n                '\\\\u0663': '3',\n                '\\\\u0664': '4',\n                '\\\\u0665': '5',\n                '\\\\u0666': '6',\n                '\\\\u0667': '7',\n                '\\\\u0668': '8',\n                '\\\\u0669': '9'\n            };\n\n            // parses eastern arabic number characters to arabic numbers (0-9)\n            const anyNumberCharToArabicNumberReplacer = function (charsToReplace) {\n                return charsToReplace.replace(/[\\u0660-\\u0669]/g, function (char) {\n                    const unicode = '\\\\u0' + char.charCodeAt(0).toString(16);\n                    return arabicDigitMap[unicode];\n                });\n            };\n\n            const parseAnyCharsToInt = function (anyNumberChars) {\n                return parseInt(anyNumberCharToArabicNumberReplacer(anyNumberChars));\n            };\n\n            const parseMillisecondCharsToInt =function (millisecondChars) {\n                millisecondChars = anyNumberCharToArabicNumberReplacer(millisecondChars);\n                // digits are either .1 .01 or .001 so need to \"shift\"\n                if (millisecondChars.length === 1) {\n                    millisecondChars += \"00\";\n                } else if (millisecondChars.length === 2) {\n                    millisecondChars += \"0\";\n                }\n                return parseInt(millisecondChars);\n            };\n\n            // detecting milliseconds from input, expects am/pm removed from end, eg. .0 or .00 or .000\n            const millisecondRegExp = /[[\\.][\\d\\u0660-\\u0669]{1,3}$/;\n\n            timepicker.$connector.setLocale = tryCatchWrapper(function (locale) {\n                // capture previous value if any\n                let previousValueObject;\n                if (timepicker.value && timepicker.value !== '') {\n                    previousValueObject = timepicker.i18n.parseTime(timepicker.value);\n                }\n\n                try {\n                    // Check whether the locale is supported by the browser or not\n                    testPmTime.toLocaleTimeString(locale);\n                } catch (e) {\n                    locale = \"en-US\";\n                    // FIXME should do a callback for server to throw an exception ?\n                    throw new Error(\"vaadin-time-picker: The locale \" + locale + \" is not supported, falling back to default locale setting(en-US).\");\n                }\n\n                // 1. 24 or 12 hour clock, if latter then what are the am/pm strings ?\n                const pmString = getPmString(locale);\n                const amString = getAmString(locale);\n\n                // 2. What is the separator ?\n                let localeTimeString = testPmTime.toLocaleTimeString(locale);\n                // since the next regex picks first non-number-whitespace, need to discard possible PM from beginning (eg. chinese locale)\n                if (pmString && localeTimeString.startsWith(pmString)) {\n                    localeTimeString = localeTimeString.replace(pmString, '');\n                }\n                const separator = localeTimeString.match(/[^\\u0660-\\u0669\\s\\d]/);\n\n                // 3. regexp that allows to find the numbers with optional separator and continuing searching after it\n                const numbersRegExp = new RegExp('([\\\\d\\\\u0660-\\\\u0669]){1,2}(?:' + separator + ')?', 'g');\n\n                const includeSeconds = function () {\n                    return timepicker.step && timepicker.step < 60;\n                };\n\n                const includeMilliSeconds = function () {\n                    return timepicker.step && timepicker.step < 1;\n                };\n\n                // the web component expects the correct granularity used for the time string,\n                // thus need to format the time object in correct granularity by passing the format options\n                let cachedStep;\n                let cachedOptions;\n                const getTimeFormatOptions = function () {\n                    // calculate the format options if none done cached or step has changed\n                    if (!cachedOptions || cachedStep !== timepicker.step) {\n                        cachedOptions = {\n                            hour: \"numeric\",\n                            minute: \"numeric\",\n                            second: includeSeconds() ? \"numeric\" : undefined,\n                        };\n                        cachedStep = timepicker.step;\n                    }\n                    return cachedOptions;\n                };\n\n                const formatMilliseconds = function (localeTimeString, milliseconds) {\n                    if (includeMilliSeconds()) {\n                        // might need to inject milliseconds between seconds and AM/PM\n                        let cleanedTimeString = localeTimeString;\n                        if (localeTimeString.endsWith(amString)) {\n                            cleanedTimeString = localeTimeString.replace(\" \" + amString, '');\n                        } else if (localeTimeString.endsWith(pmString)) {\n                            cleanedTimeString = localeTimeString.replace(\" \" + pmString, '');\n                        }\n                        if (milliseconds) {\n                            let millisecondsString = milliseconds < 10 ? \"0\" : \"\";\n                            millisecondsString += milliseconds < 100 ? \"0\" : \"\";\n                            millisecondsString += milliseconds;\n                            cleanedTimeString += \".\" + millisecondsString;\n                        } else {\n                            cleanedTimeString += \".000\";\n                        }\n                        if (localeTimeString.endsWith(amString)) {\n                            cleanedTimeString = cleanedTimeString + \" \" + amString;\n                        } else if (localeTimeString.endsWith(pmString)) {\n                            cleanedTimeString = cleanedTimeString + \" \" + pmString;\n                        }\n                        return cleanedTimeString;\n                    }\n                    return localeTimeString;\n                };\n\n                let cachedTimeString;\n                let cachedTimeObject;\n\n                timepicker.i18n = {\n                    formatTime: tryCatchWrapper(function (timeObject) {\n                        if (timeObject) {\n                            let timeToBeFormatted = new Date();\n                            timeToBeFormatted.setHours(timeObject.hours);\n                            timeToBeFormatted.setMinutes(timeObject.minutes);\n                            timeToBeFormatted.setSeconds(timeObject.seconds !== undefined ? timeObject.seconds : 0);\n                            let localeTimeString = timeToBeFormatted.toLocaleTimeString(locale, getTimeFormatOptions());\n                            // milliseconds not part of the time format API\n                            localeTimeString = formatMilliseconds(localeTimeString, timeObject.milliseconds);\n                            return localeTimeString;\n                        }\n                    }),\n                    parseTime: tryCatchWrapper(function (timeString) {\n                        if (timeString && timeString === cachedTimeString && cachedTimeObject) {\n                            return cachedTimeObject;\n                        }\n                        if (timeString) {\n                            const pm = timeString.search(pmString);\n                            const am = timeString.search(amString);\n                            let numbersOnlyTimeString = timeString.replace(amString, '').replace(pmString, '').trim();\n                            // reset regex to beginning or things can explode when the length of the input changes\n                            numbersRegExp.lastIndex = 0;\n                            let hours = numbersRegExp.exec(numbersOnlyTimeString);\n                            if (hours) {\n                                hours = parseAnyCharsToInt(hours[0].replace(separator, ''));\n                                // handle 12 am -> 0\n                                // do not do anything if am & pm are not used or if those are the same,\n                                // as with locale bg-BG there is always \u0447. at the end of the time\n                                if (pm !== am) {\n                                    if (hours === 12 && am !== -1) {\n                                        hours = 0;\n                                    } else {\n                                        hours += (pm !== -1 && hours !== 12 ? 12 : 0)\n                                    }\n                                }\n                                const minutes = numbersRegExp.exec(numbersOnlyTimeString);\n                                const seconds = minutes && numbersRegExp.exec(numbersOnlyTimeString);\n                                // reset to end or things can explode\n                                let milliseconds = seconds && includeMilliSeconds() && millisecondRegExp.exec(numbersOnlyTimeString);\n                                // handle case where last numbers are seconds and . is the separator (invalid regexp match)\n                                if (milliseconds && milliseconds['index'] <= seconds['index']) {\n                                    milliseconds = undefined;\n                                }\n                                // hours is a number at this point, others are either arrays or null\n                                // the string in [0] from the arrays includes the separator too\n                                cachedTimeObject = hours !== undefined && {\n                                    hours: hours,\n                                    minutes: minutes ? parseAnyCharsToInt(minutes[0].replace(separator, '')) : 0,\n                                    seconds: seconds ? parseAnyCharsToInt(seconds[0].replace(separator, '')) : 0,\n                                    milliseconds: minutes && seconds && milliseconds ? parseMillisecondCharsToInt(milliseconds[0].replace('.', '')) : 0\n                                };\n                                cachedTimeString = timeString;\n                                return cachedTimeObject;\n                            }\n                            // when nothing is returned, the component shows the invalid state for the input\n                        }\n                    })\n                };\n\n                if (previousValueObject) {\n                    when(() => timepicker.$, () => {\n                        const newValue = timepicker.i18n.formatTime(previousValueObject);\n                        // FIXME works but uses private API, needs fixes in web component\n                        if (timepicker.inputElement.value !== newValue) {\n                            timepicker.inputElement.value = newValue;\n                            timepicker.$.comboBox.value = newValue;\n                        }\n                    });\n                }\n            });\n        })(timepicker)\n    };\n})();\n", "export default require(\"../node_modules/@vaadin/flow-frontend/timepickerConnector.js\");"],
  "mappings": "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",
  "names": []
}
