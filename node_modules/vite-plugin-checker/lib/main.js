"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const lodash_pick_1 = __importDefault(require("lodash.pick"));
const npm_run_path_1 = __importDefault(require("npm-run-path"));
const os_1 = __importDefault(require("os"));
__exportStar(require("./types"), exports);
__exportStar(require("./codeFrame"), exports);
__exportStar(require("./worker"), exports);
const sharedConfigKeys = ['enableBuild', 'overlay'];
const buildInCheckerKeys = ['typescript', 'vueTsc', 'vls', 'eslint'];
function createCheckers(userConfig, env) {
    const serveAndBuildCheckers = [];
    const sharedConfig = lodash_pick_1.default(userConfig, sharedConfigKeys);
    buildInCheckerKeys.forEach((name) => {
        if (!userConfig[name])
            return;
        const { createServeAndBuild } = require(`./checkers/${name}/main`);
        serveAndBuildCheckers.push(createServeAndBuild(Object.assign({ [name]: userConfig[name] }, sharedConfig), env));
    });
    return serveAndBuildCheckers;
}
function Plugin(userConfig) {
    var _a;
    const enableBuild = (_a = userConfig === null || userConfig === void 0 ? void 0 : userConfig.enableBuild) !== null && _a !== void 0 ? _a : true;
    let checkers = [];
    let viteMode;
    return {
        name: 'vite-plugin-checker',
        config: (config, env) => {
            // for dev mode (1/2)
            // Initialize checker with config
            viteMode = env.command;
            checkers = createCheckers(userConfig || {}, env);
            if (viteMode !== 'serve')
                return;
            checkers.forEach((checker) => {
                var _a;
                const workerConfig = checker.serve.config;
                workerConfig({
                    hmr: (_a = config.server) === null || _a === void 0 ? void 0 : _a.hmr,
                    env,
                });
            });
        },
        buildStart: () => {
            // for build mode
            // run a bin command in a separated process
            if (viteMode !== 'build')
                return;
            // do not do anything when disable build mode
            if (!enableBuild)
                return;
            const localEnv = npm_run_path_1.default.env({
                env: process.env,
                cwd: process.cwd(),
                execPath: process.execPath,
            });
            (() => __awaiter(this, void 0, void 0, function* () {
                var _a;
                const exitCodes = yield Promise.all(checkers.map((checker) => spawnChecker(checker, userConfig, localEnv)));
                const exitCode = (_a = exitCodes.find((code) => code !== 0)) !== null && _a !== void 0 ? _a : 0;
                if (exitCode !== 0)
                    process.exit(exitCode);
            }))();
        },
        configureServer(server) {
            // for dev mode (2/2)
            // Get the server instance and keep reference in a closure
            checkers.forEach((checker) => {
                const { worker, configureServer: workerConfigureServer } = checker.serve;
                workerConfigureServer({ root: server.config.root });
                worker.on('message', (action) => {
                    server.ws.send(action.payload);
                });
            });
            return () => {
                server.middlewares.use((req, res, next) => {
                    next();
                });
            };
        },
    };
}
exports.default = Plugin;
function spawnChecker(checker, userConfig, localEnv) {
    return new Promise((resolve) => {
        const buildBin = checker.build.buildBin;
        const finalBin = typeof buildBin === 'function' ? buildBin(userConfig) : buildBin;
        const proc = child_process_1.spawn(...finalBin, {
            cwd: process.cwd(),
            stdio: 'inherit',
            env: localEnv,
            shell: os_1.default.platform() === 'win32',
        });
        proc.on('exit', (code) => {
            if (code !== null && code !== 0) {
                resolve(code);
            }
            else {
                resolve(0);
            }
        });
    });
}
