{
  "version": 3,
  "sources": ["../@vaadin/field-base/src/labelled-input-controller.js", "../@vaadin/field-base/src/delegate-state-mixin.js", "../@vaadin/field-base/src/input-mixin.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * A controller for linking a `<label>` element with an `<input>` element.\n */\nexport class LabelledInputController {\n  constructor(input, labelController) {\n    this.input = input;\n    this.__preventDuplicateLabelClick = this.__preventDuplicateLabelClick.bind(this);\n\n    labelController.addEventListener('label-changed', (event) => {\n      this.__initLabel(event.detail.node);\n    });\n\n    // Initialize the default label element\n    this.__initLabel(labelController.node);\n  }\n\n  /**\n   * @param {HTMLElement} label\n   * @private\n   */\n  __initLabel(label) {\n    if (label) {\n      label.addEventListener('click', this.__preventDuplicateLabelClick);\n\n      if (this.input) {\n        label.setAttribute('for', this.input.id);\n      }\n    }\n  }\n\n  /**\n   * The native platform fires an event for both the click on the label, and also\n   * the subsequent click on the native input element caused by label click.\n   * This results in two click events arriving at the host, but we only want one.\n   * This method prevents the duplicate click and ensures the correct isTrusted event\n   * with the correct event.target arrives at the host.\n   * @private\n   */\n  __preventDuplicateLabelClick() {\n    const inputClickHandler = (e) => {\n      e.stopImmediatePropagation();\n      this.input.removeEventListener('click', inputClickHandler);\n    };\n    this.input.addEventListener('click', inputClickHandler);\n  }\n}\n", "/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\n\n/**\n * A mixin to delegate properties and attributes to a target element.\n *\n * @polymerMixin\n */\nexport const DelegateStateMixin = dedupingMixin(\n  (superclass) =>\n    class DelegateStateMixinClass extends superclass {\n      static get properties() {\n        return {\n          /**\n           * A target element to which attributes and properties are delegated.\n           * @protected\n           */\n          stateTarget: {\n            type: Object,\n            observer: '_stateTargetChanged'\n          }\n        };\n      }\n\n      /**\n       * An array of the host attributes to delegate to the target element.\n       */\n      static get delegateAttrs() {\n        return [];\n      }\n\n      /**\n       * An array of the host properties to delegate to the target element.\n       */\n      static get delegateProps() {\n        return [];\n      }\n\n      /** @protected */\n      ready() {\n        super.ready();\n\n        this._createDelegateAttrsObserver();\n        this._createDelegatePropsObserver();\n      }\n\n      /** @protected */\n      _stateTargetChanged(target) {\n        if (target) {\n          this._ensureAttrsDelegated();\n          this._ensurePropsDelegated();\n        }\n      }\n\n      /** @protected */\n      _createDelegateAttrsObserver() {\n        this._createMethodObserver(`_delegateAttrsChanged(${this.constructor.delegateAttrs.join(', ')})`);\n      }\n\n      /** @protected */\n      _createDelegatePropsObserver() {\n        this._createMethodObserver(`_delegatePropsChanged(${this.constructor.delegateProps.join(', ')})`);\n      }\n\n      /** @protected */\n      _ensureAttrsDelegated() {\n        this.constructor.delegateAttrs.forEach((name) => {\n          this._delegateAttribute(name, this[name]);\n        });\n      }\n\n      /** @protected */\n      _ensurePropsDelegated() {\n        this.constructor.delegateProps.forEach((name) => {\n          this._delegateProperty(name, this[name]);\n        });\n      }\n\n      /** @protected */\n      _delegateAttrsChanged(...values) {\n        this.constructor.delegateAttrs.forEach((name, index) => {\n          this._delegateAttribute(name, values[index]);\n        });\n      }\n\n      /** @protected */\n      _delegatePropsChanged(...values) {\n        this.constructor.delegateProps.forEach((name, index) => {\n          this._delegateProperty(name, values[index]);\n        });\n      }\n\n      /** @protected */\n      _delegateAttribute(name, value) {\n        if (!this.stateTarget) {\n          return;\n        }\n\n        if (name === 'invalid') {\n          this._delegateAttribute('aria-invalid', value ? 'true' : false);\n        }\n\n        if (typeof value === 'boolean') {\n          this.stateTarget.toggleAttribute(name, value);\n        } else if (value) {\n          this.stateTarget.setAttribute(name, value);\n        } else {\n          this.stateTarget.removeAttribute(name);\n        }\n      }\n\n      /** @protected */\n      _delegateProperty(name, value) {\n        if (!this.stateTarget) {\n          return;\n        }\n\n        this.stateTarget[name] = value;\n      }\n    }\n);\n", "/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\n\n/**\n * A mixin to store the reference to an input element\n * and add input and change event listeners to it.\n *\n * @polymerMixin\n */\nexport const InputMixin = dedupingMixin(\n  (superclass) =>\n    class InputMixinClass extends superclass {\n      static get properties() {\n        return {\n          /**\n           * A reference to the input element controlled by the mixin.\n           * Any component implementing this mixin is expected to provide it\n           * by using `this._setInputElement(input)` Polymer API.\n           *\n           * A typical case is using `InputController` that does this automatically.\n           * However, the input element does not have to always be native <input>:\n           * as an example, <vaadin-combo-box-light> accepts other components.\n           *\n           * @protected\n           * @type {!HTMLElement}\n           */\n          inputElement: {\n            type: Object,\n            readOnly: true,\n            observer: '_inputElementChanged'\n          },\n\n          /**\n           * String used to define input type.\n           * @protected\n           */\n          type: {\n            type: String,\n            readOnly: true\n          },\n\n          /**\n           * The value of the field.\n           */\n          value: {\n            type: String,\n            value: '',\n            observer: '_valueChanged',\n            notify: true\n          }\n        };\n      }\n\n      constructor() {\n        super();\n\n        this._boundOnInput = this._onInput.bind(this);\n        this._boundOnChange = this._onChange.bind(this);\n      }\n\n      /**\n       * Clear the value of the field.\n       */\n      clear() {\n        this.value = '';\n      }\n\n      /**\n       * Add event listeners to the input element instance.\n       * Override this method to add custom listeners.\n       * @param {!HTMLElement} input\n       */\n      _addInputListeners(input) {\n        input.addEventListener('input', this._boundOnInput);\n        input.addEventListener('change', this._boundOnChange);\n      }\n\n      /**\n       * Remove event listeners from the input element instance.\n       * @param {!HTMLElement} input\n       */\n      _removeInputListeners(input) {\n        input.removeEventListener('input', this._boundOnInput);\n        input.removeEventListener('change', this._boundOnChange);\n      }\n\n      /**\n       * A method to forward the value property set on the field\n       * programmatically back to the input element value.\n       * Override this method to perform additional checks,\n       * for example to skip this in certain conditions.\n       * @param {string} value\n       * @protected\n       * @override\n       */\n      _forwardInputValue(value) {\n        // Value might be set before an input element is initialized.\n        // This case should be handled separately by a component that\n        // implements this mixin, for example in `connectedCallback`.\n        if (!this.inputElement) {\n          return;\n        }\n\n        if (value != undefined) {\n          this.inputElement.value = value;\n        } else {\n          this.inputElement.value = '';\n        }\n      }\n\n      /** @protected */\n      _inputElementChanged(input, oldInput) {\n        if (input) {\n          this._addInputListeners(input);\n        } else if (oldInput) {\n          this._removeInputListeners(oldInput);\n        }\n      }\n\n      /**\n       * An input event listener used to update the field value.\n       * Override this method with an actual implementation.\n       * @param {Event} _event\n       * @protected\n       * @override\n       */\n      _onInput(event) {\n        // Ignore fake input events e.g. used by clear button.\n        this.__userInput = event.isTrusted;\n        this.value = event.target.value;\n        this.__userInput = false;\n      }\n\n      /**\n       * A change event listener.\n       * Override this method with an actual implementation.\n       * @param {Event} _event\n       * @protected\n       * @override\n       */\n      _onChange(_event) {}\n\n      /**\n       * Toggle the has-value attribute based on the value property.\n       * @param {boolean} hasValue\n       * @protected\n       */\n      _toggleHasValue(hasValue) {\n        this.toggleAttribute('has-value', hasValue);\n      }\n\n      /**\n       * Observer called when a value property changes.\n       * @param {string | undefined} newVal\n       * @param {string | undefined} oldVal\n       * @protected\n       * @override\n       */\n      _valueChanged(newVal, oldVal) {\n        this._toggleHasValue(newVal !== '' && newVal != null);\n\n        // Setting initial value to empty string, do nothing.\n        if (newVal === '' && oldVal === undefined) {\n          return;\n        }\n\n        // Value is set by the user, no need to sync it back to input.\n        if (this.__userInput) {\n          return;\n        }\n\n        // Setting a value programmatically, sync it to input element.\n        this._forwardInputValue(newVal);\n      }\n    }\n);\n"],
  "mappings": "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",
  "names": []
}
