"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EslintChecker = void 0;
const eslint_1 = require("eslint");
// import debounce from 'lodash.debounce'
// import os from 'os'
const path_1 = __importDefault(require("path"));
const tiny_invariant_1 = __importDefault(require("tiny-invariant"));
const worker_threads_1 = require("worker_threads");
const Checker_1 = require("../../Checker");
const logger_1 = require("../../logger");
const createDiagnostic = (pluginConfig) => {
    let overlay = true; // Vite defaults to true
    return {
        config: ({ hmr }) => __awaiter(void 0, void 0, void 0, function* () {
            const viteOverlay = !(typeof hmr === 'object' && hmr.overlay === false);
            if (pluginConfig.overlay === false || !viteOverlay) {
                overlay = false;
            }
        }),
        configureServer({ root }) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                if (!pluginConfig.eslint)
                    return;
                const extensions = (_a = pluginConfig.eslint.extensions) !== null && _a !== void 0 ? _a : ['.js'];
                const eslint = new eslint_1.ESLint({
                    cwd: root,
                    extensions,
                });
                tiny_invariant_1.default(pluginConfig.eslint, 'config.eslint should not be `false`');
                tiny_invariant_1.default(pluginConfig.eslint.files, `eslint.files is required, but got ${pluginConfig.eslint.files}`);
                const paths = typeof pluginConfig.eslint.files === 'string'
                    ? [pluginConfig.eslint.files]
                    : pluginConfig.eslint.files;
                let diagnosticsCache = [];
                const dispatchDiagnostics = () => {
                    diagnosticsCache.forEach((n) => {
                        console.log(logger_1.diagnosticToTerminalLog(n, 'ESLint'));
                    });
                    const lastErr = diagnosticsCache[0];
                    if (!lastErr)
                        return;
                    if (overlay) {
                        worker_threads_1.parentPort === null || worker_threads_1.parentPort === void 0 ? void 0 : worker_threads_1.parentPort.postMessage({
                            type: 'ERROR',
                            payload: {
                                type: 'error',
                                err: logger_1.diagnosticToViteError(lastErr),
                            },
                        });
                    }
                };
                const handleFileChange = (filePath, type) => __awaiter(this, void 0, void 0, function* () {
                    if (!extensions.includes(path_1.default.extname(filePath)))
                        return;
                    if (type === 'unlink') {
                        const absPath = path_1.default.resolve(root, filePath);
                        diagnosticsCache = diagnosticsCache.filter((d) => d.id !== absPath);
                    }
                    else if (type === 'change') {
                        const diagnosticsOfChangedFile = yield eslint.lintFiles(filePath);
                        const newDiagnostics = diagnosticsOfChangedFile
                            .map((d) => logger_1.normalizeEslintDiagnostic(d))
                            .flat(1);
                        const absPath = diagnosticsOfChangedFile[0].filePath;
                        diagnosticsCache = diagnosticsCache.filter((d) => d.id !== absPath).concat(newDiagnostics);
                    }
                    dispatchDiagnostics();
                });
                // initial lint
                const diagnostics = yield eslint.lintFiles(paths);
                diagnosticsCache = diagnostics.map((p) => logger_1.normalizeEslintDiagnostic(p)).flat(1);
                dispatchDiagnostics();
                // watch lint
                Checker_1.Checker.watcher.add(paths);
                Checker_1.Checker.watcher.on('change', (filePath) => __awaiter(this, void 0, void 0, function* () {
                    handleFileChange(filePath, 'change');
                }));
                Checker_1.Checker.watcher.on('unlink', (filePath) => __awaiter(this, void 0, void 0, function* () {
                    handleFileChange(filePath, 'unlink');
                }));
            });
        },
    };
};
class EslintChecker extends Checker_1.Checker {
    constructor() {
        super({
            name: 'typescript',
            absFilePath: __filename,
            build: {
                buildBin: (pluginConfig) => {
                    var _a;
                    let ext = ['.js'];
                    let files = [];
                    if (pluginConfig.eslint) {
                        ext = (_a = pluginConfig.eslint.extensions) !== null && _a !== void 0 ? _a : ext;
                        files =
                            typeof pluginConfig.eslint.files === 'string'
                                ? [pluginConfig.eslint.files]
                                : pluginConfig.eslint.files;
                    }
                    return ['eslint', ['--ext', ext.join(','), ...files]];
                },
            },
            createDiagnostic,
        });
    }
    init() {
        const createServeAndBuild = super.initMainThread();
        module.exports.createServeAndBuild = createServeAndBuild;
        super.initWorkerThread();
    }
}
exports.EslintChecker = EslintChecker;
const eslintChecker = new EslintChecker();
eslintChecker.prepare();
eslintChecker.init();
