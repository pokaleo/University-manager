import "./chunk-EGRHWZRV.js";
import {
  GridColumn
} from "./chunk-VH2MUWJU.js";
import "./chunk-VPQC7TEI.js";
import "./chunk-KCWZ32HQ.js";
import "./chunk-QNRFZUBX.js";
import "./chunk-ZFVP5VBM.js";
import "./chunk-EMDRMWGL.js";
import "./chunk-H3KD7FYF.js";
import "./chunk-NZ6RMXB7.js";
import "./chunk-RQI6IG5T.js";
import "./chunk-KTZKXPFA.js";

// node_modules/@vaadin/flow-frontend/vaadin-grid-flow-selection-column.js
{
  class GridFlowSelectionColumnElement extends GridColumn {
    static get is() {
      return "vaadin-grid-flow-selection-column";
    }
    static get properties() {
      return {
        autoWidth: {
          type: Boolean,
          value: true
        },
        width: {
          type: String,
          value: "56px"
        },
        flexGrow: {
          type: Number,
          value: 0
        },
        selectAll: {
          type: Boolean,
          value: false,
          notify: true
        },
        selectAllHidden: Boolean
      };
    }
    constructor() {
      super();
      this._boundOnSelectEvent = this._onSelectEvent.bind(this);
      this._boundOnDeselectEvent = this._onDeselectEvent.bind(this);
    }
    static get observers() {
      return [
        "_onHeaderRendererOrBindingChanged(_headerRenderer, _headerCell, path, header, selectAll, selectAllHidden)"
      ];
    }
    connectedCallback() {
      super.connectedCallback();
      if (this._grid) {
        this._grid.addEventListener("select", this._boundOnSelectEvent);
        this._grid.addEventListener("deselect", this._boundOnDeselectEvent);
      }
    }
    disconnectedCallback() {
      super.disconnectedCallback();
      if (this._grid) {
        this._grid.removeEventListener("select", this._boundOnSelectEvent);
        this._grid.removeEventListener("deselect", this._boundOnDeselectEvent);
      }
    }
    _defaultHeaderRenderer(root, _column) {
      let checkbox = root.firstElementChild;
      if (!checkbox) {
        checkbox = document.createElement("vaadin-checkbox");
        checkbox.id = "selectAllCheckbox";
        checkbox.setAttribute("aria-label", "Select All");
        checkbox.classList.add("vaadin-grid-select-all-checkbox");
        checkbox.addEventListener("click", this._onSelectAllClick.bind(this));
        root.appendChild(checkbox);
      }
      const checked = this.selectAll;
      checkbox.hidden = this.selectAllHidden;
      checkbox.checked = checked;
    }
    _defaultRenderer(root, _column, { item, selected }) {
      let checkbox = root.firstElementChild;
      if (!checkbox) {
        checkbox = document.createElement("vaadin-checkbox");
        checkbox.setAttribute("aria-label", "Select Row");
        checkbox.addEventListener("click", this._onSelectClick.bind(this));
        root.appendChild(checkbox);
      }
      checkbox.__item = item;
      checkbox.checked = selected;
    }
    _onSelectClick(e) {
      e.currentTarget.checked ? this._grid.$connector.doDeselection([e.currentTarget.__item], true) : this._grid.$connector.doSelection([e.currentTarget.__item], true);
    }
    _onSelectAllClick(e) {
      e.preventDefault();
      if (this._grid.hasAttribute("disabled")) {
        e.currentTarget.checked = !e.currentTarget.checked;
        return;
      }
      this.selectAll ? this.$server.deselectAll() : this.$server.selectAll();
    }
    _onSelectEvent(e) {
    }
    _onDeselectEvent(e) {
      if (e.detail.userOriginated) {
        this.selectAll = false;
      }
    }
  }
  customElements.define(GridFlowSelectionColumnElement.is, GridFlowSelectionColumnElement);
  Vaadin.GridFlowSelectionColumnElement = GridFlowSelectionColumnElement;
}
//# sourceMappingURL=@vaadin_flow-frontend_vaadin-grid-flow-selection-column_js.js.map
