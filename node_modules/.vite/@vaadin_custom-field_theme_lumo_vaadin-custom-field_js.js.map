{
  "version": 3,
  "sources": ["../@vaadin/custom-field/src/vaadin-custom-field.js", "../@vaadin/custom-field/theme/lumo/vaadin-custom-field.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2019 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { FlattenedNodesObserver } from '@polymer/polymer/lib/utils/flattened-nodes-observer.js';\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { isChrome } from '@vaadin/component-base/src/browser-utils.js';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { FocusMixin } from '@vaadin/component-base/src/focus-mixin.js';\nimport { FieldMixin } from '@vaadin/field-base/src/field-mixin.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\n/**\n * `<vaadin-custom-field>` is a web component for wrapping multiple components as a single field.\n *\n * ```\n * <vaadin-custom-field label=\"Appointment time\">\n *   <vaadin-date-picker></vaadin-date-picker>\n *   <vaadin-time-picker></vaadin-time-picker>\n * </vaadin-custom-field>\n * ```\n *\n * ### Styling\n *\n * The following shadow DOM parts are available for styling:\n *\n * Part name            | Description\n * ---------------------|----------------\n * `label`              | The slotted label element wrapper\n * `helper-text`        | The slotted helper text element wrapper\n * `error-message`      | The slotted error message element wrapper\n * `required-indicator` | The `required` state indicator element\n *\n * The following state attributes are available for styling:\n *\n * Attribute           | Description                               | Part name\n * --------------------|-------------------------------------------|------------\n * `disabled`          | Set when the element is disabled          | :host\n * `invalid`           | Set when the element is invalid           | :host\n * `focused`           | Set when the element is focused           | :host\n * `has-label`         | Set when the element has a label          | :host\n * `has-value`         | Set when the element has a value          | :host\n * `has-helper`        | Set when the element has helper text      | :host\n * `has-error-message` | Set when the element has an error message | :host\n *\n * See [Styling Components](https://vaadin.com/docs/latest/ds/customization/styling-components) documentation.\n *\n * @fires {Event} change - Fired when the user commits a value change for any of the internal inputs.\n * @fires {Event} internal-tab - Fired on Tab keydown triggered from the internal inputs, meaning focus will not leave the inputs.\n * @fires {CustomEvent} invalid-changed - Fired when the `invalid` property changes.\n * @fires {CustomEvent} value-changed - Fired when the `value` property changes.\n *\n * @extends HTMLElement\n * @mixes FieldMixin\n * @mixes FocusMixin\n * @mixes ElementMixin\n * @mixes ThemableMixin\n */\nclass CustomField extends FieldMixin(FocusMixin(ThemableMixin(ElementMixin(PolymerElement)))) {\n  static get is() {\n    return 'vaadin-custom-field';\n  }\n\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: inline-flex;\n        }\n\n        :host::before {\n          content: '\\\\2003';\n          width: 0;\n          display: inline-block;\n          /* Size and position this element on the same vertical position as the input-field element\n           to make vertical align for the host element work as expected */\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n\n        .vaadin-custom-field-container {\n          width: 100%;\n          display: flex;\n          flex-direction: column;\n        }\n\n        .inputs-wrapper {\n          flex: none;\n        }\n      </style>\n\n      <div class=\"vaadin-custom-field-container\">\n        <div part=\"label\" on-click=\"focus\">\n          <slot name=\"label\"></slot>\n          <span part=\"required-indicator\" aria-hidden=\"true\"></span>\n        </div>\n\n        <div class=\"inputs-wrapper\" on-change=\"__onInputChange\">\n          <slot id=\"slot\"></slot>\n        </div>\n\n        <div part=\"helper-text\">\n          <slot name=\"helper\"></slot>\n        </div>\n\n        <div part=\"error-message\">\n          <slot name=\"error-message\"></slot>\n        </div>\n      </div>\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * The name of the control, which is submitted with the form data.\n       */\n      name: String,\n\n      /**\n       * The value of the field. When wrapping several inputs, it will contain `\\t`\n       * (Tab character) as a delimiter indicating parts intended to be used as the\n       * corresponding inputs values. Use the [`i18n`](#/elements/vaadin-custom-field#property-i18n)\n       * property to customize this behavior.\n       */\n      value: {\n        type: String,\n        observer: '__valueChanged',\n        notify: true\n      },\n\n      /**\n       * Array of available input nodes\n       * @type {!Array<!HTMLElement> | undefined}\n       */\n      inputs: {\n        type: Array,\n        readOnly: true\n      },\n\n      /**\n       * The object used to localize this component.\n       * To change the default localization, replace the entire\n       * _i18n_ object or just the property you want to modify.\n       *\n       * The object has the following JSON structure:\n       *\n       * ```\n       * {\n       *   // A function to format given `Array` as\n       *   // component value. Array is list of all internal values\n       *   // in the order of their presence in the DOM\n       *   // This function is called each time the internal input\n       *   // value is changed.\n       *   formatValue: inputValues => {\n       *     // returns a representation of the given array of values\n       *     // in the form of string with delimiter characters\n       *   },\n       *\n       *   // A function to parse the given value to an `Array` in the format\n       *   // of the list of all internal values\n       *   // in the order of their presence in the DOM\n       *   // This function is called when value of the\n       *   // custom field is set.\n       *   parseValue: value => {\n       *     // returns the array of values from parsed value string.\n       *   }\n       * }\n       * ```\n       *\n       * @type {!CustomFieldI18n}\n       */\n      i18n: {\n        type: Object,\n        value: () => {\n          return {\n            parseValue: function (value) {\n              return value.split('\\t');\n            },\n            formatValue: function (inputValues) {\n              return inputValues.join('\\t');\n            }\n          };\n        }\n      }\n    };\n  }\n\n  /** @protected */\n  connectedCallback() {\n    super.connectedCallback();\n\n    if (this.__observer) {\n      this.__observer.connect();\n    }\n  }\n\n  /** @protected */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    if (this.__observer) {\n      this.__observer.disconnect();\n    }\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    // See https://github.com/vaadin/vaadin-web-components/issues/94\n    this.setAttribute('role', 'group');\n\n    this.ariaTarget = this;\n\n    this.__setInputsFromSlot();\n    this.__observer = new FlattenedNodesObserver(this.$.slot, () => {\n      this.__setInputsFromSlot();\n    });\n\n    this.__fixChromeFocus();\n  }\n\n  /** @protected */\n  focus() {\n    this.inputs && this.inputs[0] && this.inputs[0].focus();\n  }\n\n  /**\n   * Override method inherited from `FocusMixin` to validate on blur.\n   * @param {boolean} focused\n   * @protected\n   */\n  _setFocused(focused) {\n    super._setFocused(focused);\n\n    if (!focused) {\n      this.validate();\n    }\n  }\n\n  /**\n   * Override method inherited from `FocusMixin` to not remove focused\n   * state when focus moves to another input in the custom field.\n   * @param {FocusEvent} event\n   * @return {boolean}\n   * @protected\n   */\n  _shouldRemoveFocus(event) {\n    const { relatedTarget } = event;\n    return !this.inputs.some((el) => relatedTarget === (el.focusElement || el));\n  }\n\n  /**\n   * Returns true if the current inputs values satisfy all constraints (if any).\n   *\n   * @return {boolean}\n   */\n  checkValidity() {\n    const invalidFields = this.inputs.filter((input) => !(input.validate || input.checkValidity).call(input));\n\n    if (invalidFields.length || (this.required && !this.value.trim())) {\n      // Either 1. one of the input fields is invalid or\n      // 2. the custom field itself is required but doesn't have a value\n      return false;\n    }\n    return true;\n  }\n\n  /** @private */\n  __fixChromeFocus() {\n    this.addEventListener('keydown', (e) => {\n      if (e.keyCode === 9) {\n        // FIXME(yuriy): remove this workaround once this issue is fixed:\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=1014868&can=2&num=100&q=slot%20shift%20tab\n        if (e.target.parentElement.localName === 'slot' && !e.defaultPrevented && isChrome) {\n          const slot = e.target.parentElement;\n          slot.setAttribute('tabindex', -1);\n          setTimeout(() => slot.removeAttribute('tabindex'));\n        }\n        if (\n          (this.inputs.indexOf(e.target) < this.inputs.length - 1 && !e.shiftKey) ||\n          (this.inputs.indexOf(e.target) > 0 && e.shiftKey)\n        ) {\n          this.dispatchEvent(new CustomEvent('internal-tab'));\n        } else {\n          // FIXME(yuriy): remove this workaround when value should not be updated before focusout\n          this.__setValue();\n        }\n      }\n    });\n  }\n\n  /** @private */\n  __onInputChange(event) {\n    // Stop native change events\n    event.stopPropagation();\n\n    this.__setValue();\n    this.validate();\n    this.dispatchEvent(\n      new CustomEvent('change', {\n        bubbles: true,\n        cancelable: false,\n        detail: {\n          value: this.value\n        }\n      })\n    );\n  }\n\n  /** @private */\n  __setValue() {\n    this.__settingValue = true;\n    this.value = this.i18n.formatValue.apply(this, [this.inputs.map((input) => input.value)]);\n    this.__settingValue = false;\n  }\n\n  /**\n   * Like querySelectorAll('*') but also gets all elements through any nested slots recursively\n   * @private\n   */\n  __queryAllAssignedElements(elem) {\n    const result = [];\n    let elements;\n    if (elem.tagName === 'SLOT') {\n      elements = elem.assignedElements({ flatten: true });\n    } else {\n      result.push(elem);\n      elements = Array.from(elem.children);\n    }\n    elements.forEach((elem) => result.push(...this.__queryAllAssignedElements(elem)));\n    return result;\n  }\n\n  /** @private */\n  __isInput(node) {\n    const isSlottedInput = node.getAttribute('slot') === 'input' || node.getAttribute('slot') === 'textarea';\n    return !isSlottedInput && (node.validate || node.checkValidity);\n  }\n\n  /** @private */\n  __getInputsFromSlot() {\n    return this.__queryAllAssignedElements(this.$.slot).filter((node) => this.__isInput(node));\n  }\n\n  /** @private */\n  __setInputsFromSlot() {\n    this._setInputs(this.__getInputsFromSlot());\n    this.__setValue();\n  }\n\n  /** @private */\n  __toggleHasValue(value) {\n    this.toggleAttribute('has-value', value !== null && value.trim() !== '');\n  }\n\n  /** @private */\n  __valueChanged(value, oldValue) {\n    if (this.__settingValue || !this.inputs) {\n      return;\n    }\n\n    this.__toggleHasValue(value);\n\n    const valuesArray = this.i18n.parseValue(value);\n    if (!valuesArray || valuesArray.length == 0) {\n      console.warn('Value parser has not provided values array');\n      return;\n    }\n\n    this.inputs.forEach((input, id) => (input.value = valuesArray[id]));\n    if (oldValue !== undefined) {\n      this.validate();\n    }\n  }\n\n  /**\n   * Fired when the user commits a value change for any of the internal inputs.\n   *\n   * @event change\n   */\n}\n\ncustomElements.define(CustomField.is, CustomField);\n\nexport { CustomField };\n", "/**\n * @license\n * Copyright (c) 2019 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport './vaadin-custom-field-styles.js';\nimport '../../src/vaadin-custom-field.js';\n"],
  "mappings": "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",
  "names": []
}
