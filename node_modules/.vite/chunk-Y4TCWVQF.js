import {
  ThemableMixin
} from "./chunk-PALO6AVQ.js";
import {
  ElementMixin
} from "./chunk-ZAXSWEEW.js";
import {
  PolymerElement,
  html
} from "./chunk-EMDRMWGL.js";

// node_modules/@vaadin/login/src/vaadin-login-mixin.js
var LoginMixin = (superClass) => class LoginMixin extends superClass {
  static get properties() {
    return {
      action: {
        type: String,
        value: null,
        notify: true
      },
      disabled: {
        type: Boolean,
        value: false,
        notify: true
      },
      error: {
        type: Boolean,
        value: false,
        reflectToAttribute: true,
        notify: true
      },
      noForgotPassword: {
        type: Boolean,
        value: false,
        notify: true
      },
      noAutofocus: {
        type: Boolean,
        value: false
      },
      i18n: {
        type: Object,
        value: function() {
          return {
            form: {
              title: "Log in",
              username: "Username",
              password: "Password",
              submit: "Log in",
              forgotPassword: "Forgot password"
            },
            errorMessage: {
              title: "Incorrect username or password",
              message: "Check that you have entered the correct username and password and try again."
            }
          };
        },
        notify: true
      },
      _preventAutoEnable: {
        type: Boolean,
        value: false
      }
    };
  }
  _retargetEvent(e) {
    e.stopPropagation();
    const { detail, composed, cancelable, bubbles } = e;
    const firedEvent = this.dispatchEvent(new CustomEvent(e.type, { bubbles, cancelable, composed, detail }));
    if (!firedEvent) {
      e.preventDefault();
    }
  }
};

// node_modules/@vaadin/login/src/vaadin-login-form-wrapper.js
var LoginFormWrapper = class extends LoginMixin(ElementMixin(ThemableMixin(PolymerElement))) {
  static get template() {
    return html`
      <style>
        :host {
          overflow: hidden;
          display: inline-block;
        }

        :host([hidden]) {
          display: none !important;
        }

        [part='form'] {
          flex: 1;
          display: flex;
          flex-direction: column;
          box-sizing: border-box;
        }

        [part='form-title'] {
          margin: 0;
        }

        [part='error-message'] {
          position: relative;
        }
      </style>
      <section part="form">
        <h2 part="form-title">[[i18n.form.title]]</h2>
        <div part="error-message" hidden$="[[!error]]">
          <h5 part="error-message-title">[[i18n.errorMessage.title]]</h5>
          <p part="error-message-description">[[i18n.errorMessage.message]]</p>
        </div>

        <slot name="form"></slot>

        <vaadin-button
          id="forgotPasswordButton"
          theme="tertiary small forgot-password"
          on-click="_forgotPassword"
          hidden$="[[noForgotPassword]]"
          >[[i18n.form.forgotPassword]]</vaadin-button
        >

        <div part="footer">
          <p>[[i18n.additionalInformation]]</p>
        </div>
      </section>
    `;
  }
  static get is() {
    return "vaadin-login-form-wrapper";
  }
  _forgotPassword() {
    this.dispatchEvent(new CustomEvent("forgot-password"));
  }
};
customElements.define(LoginFormWrapper.is, LoginFormWrapper);

// node_modules/@vaadin/login/src/vaadin-login-form.js
var LoginForm = class extends LoginMixin(ElementMixin(ThemableMixin(PolymerElement))) {
  static get template() {
    return html`
      <style>
        [part='vaadin-login-native-form'] * {
          width: 100%;
        }
      </style>
      <vaadin-login-form-wrapper
        theme$="[[theme]]"
        part="vaadin-login-native-form-wrapper"
        action="{{action}}"
        disabled="{{disabled}}"
        error="{{error}}"
        no-forgot-password="{{noForgotPassword}}"
        i18n="{{i18n}}"
        on-login="_retargetEvent"
        on-forgot-password="_retargetEvent"
      >
        <form part="vaadin-login-native-form" method="POST" action$="[[action]]" slot="form">
          <input id="csrf" type="hidden" />
          <vaadin-text-field
            name="username"
            label="[[i18n.form.username]]"
            id="vaadinLoginUsername"
            required
            on-keydown="_handleInputKeydown"
            autocapitalize="none"
            autocorrect="off"
            spellcheck="false"
          >
            <input type="text" slot="input" on-keyup="_handleInputKeyup" />
          </vaadin-text-field>

          <vaadin-password-field
            name="password"
            label="[[i18n.form.password]]"
            id="vaadinLoginPassword"
            required
            on-keydown="_handleInputKeydown"
            spellcheck="false"
            autocomplete="current-password"
          >
            <input type="password" slot="input" on-keyup="_handleInputKeyup" />
          </vaadin-password-field>

          <vaadin-button part="vaadin-login-submit" theme="primary contained" on-click="submit" disabled$="[[disabled]]"
            >[[i18n.form.submit]]</vaadin-button
          >
        </form>
      </vaadin-login-form-wrapper>
    `;
  }
  static get is() {
    return "vaadin-login-form";
  }
  connectedCallback() {
    super.connectedCallback();
    this._handleInputKeydown = this._handleInputKeydown.bind(this);
    if (!this.noAutofocus) {
      this.$.vaadinLoginUsername.focus();
    }
  }
  _attachDom(dom) {
    this.appendChild(dom);
  }
  static get observers() {
    return ["_errorChanged(error)"];
  }
  _errorChanged() {
    if (this.error && !this._preventAutoEnable) {
      this.disabled = false;
    }
  }
  submit() {
    if (this.disabled || !(this.__isValid(this.$.vaadinLoginUsername) && this.__isValid(this.$.vaadinLoginPassword))) {
      return;
    }
    this.error = false;
    this.disabled = true;
    const loginEventDetails = {
      bubbles: true,
      cancelable: true,
      detail: {
        username: this.$.vaadinLoginUsername.value,
        password: this.$.vaadinLoginPassword.value
      }
    };
    const firedEvent = this.dispatchEvent(new CustomEvent("login", loginEventDetails));
    if (this.action && firedEvent) {
      const csrfMetaName = document.querySelector("meta[name=_csrf_parameter]");
      const csrfMetaValue = document.querySelector("meta[name=_csrf]");
      if (csrfMetaName && csrfMetaValue) {
        this.$.csrf.name = csrfMetaName.content;
        this.$.csrf.value = csrfMetaValue.content;
      }
      this.querySelector('[part="vaadin-login-native-form"]').submit();
    }
  }
  __isValid(input) {
    return input.validate && input.validate() || input.checkValidity && input.checkValidity();
  }
  _isEnterKey(e) {
    return e.key === "Enter" || e.keyCode === 13;
  }
  _handleInputKeydown(e) {
    if (this._isEnterKey(e)) {
      const { currentTarget: inputActive } = e;
      const nextInput = inputActive.id === "vaadinLoginUsername" ? this.$.vaadinLoginPassword : this.$.vaadinLoginUsername;
      if (this.__isValid(inputActive)) {
        if (this.__isValid(nextInput)) {
          this.submit();
        } else {
          nextInput.focus();
        }
      }
    }
  }
  _handleInputKeyup(e) {
    const isTab = e.key === "Tab" || e.keyCode === 9;
    const input = e.currentTarget;
    if (isTab && input && input.select) {
      input.select();
      setTimeout(() => input.setSelectionRange(0, 9999));
    }
  }
};
customElements.define(LoginForm.is, LoginForm);

export {
  LoginMixin
};
/**
 * @license
 * Copyright (c) 2018 - 2022 Vaadin Ltd.
 * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
 */
//# sourceMappingURL=chunk-Y4TCWVQF.js.map
