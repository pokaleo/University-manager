/// <reference types="node" />
import type { HMRPayload, ServerOptions, ConfigEnv } from 'vite';
import type { Worker } from 'worker_threads';
/** TypeScript checker configuration */
export declare type TscConfig = boolean | Partial<{
    /** path to tsconfig.json file */
    tsconfigPath: string;
    /** root path of cwd */
    root: string;
}>;
/** vue-tsc checker configuration */
export declare type VueTscConfig = boolean | Partial<{}>;
/** vls checker configuration */
export declare type VlsConfig = boolean | Partial<{}>;
/** ESLint checker configuration */
export declare type EslintConfig = false | {
    /** The lint target files. This can contain any of file paths, directory paths, and glob patterns. ([Details](https://eslint.org/docs/developer-guide/nodejs-api#parameters-1)). */
    files: string | string[];
    /**
     * Specify linted file extensions, 'extensions' must be an array of non-empty strings, e.g. `['.jsx', '.js']`. ([Details](https://eslint.org/docs/developer-guide/nodejs-api#parameters)).
     * @defaultValue: ['.js']
     */
    extensions?: string[];
};
/** checkers shared configuration */
export interface SharedConfig {
    /**
     * Enable checking in build mode
     * @defaultValue `true`
     */
    enableBuild: boolean;
    /**
     * Show overlay when has TypeScript error
     * @defaultValue
     * Same as [Vite config](https://vitejs.dev/config/#root)
     */
    overlay: boolean;
}
export interface BuildInCheckers {
    typescript: TscConfig;
    vueTsc: VueTscConfig;
    vls: VlsConfig;
    eslint: EslintConfig;
}
export declare type BuildInCheckerNames = keyof BuildInCheckers;
export declare type PluginConfig = SharedConfig & BuildInCheckers;
/** Userland plugin configuration */
export declare type UserPluginConfig = Partial<PluginConfig>;
export declare enum ACTION_TYPES {
    config = "config",
    configureServer = "configureServer",
    overlayError = "overlayError",
    unref = "unref"
}
interface Action {
    type: string;
    payload: unknown;
}
export interface OverlayErrorAction extends Action {
    type: ACTION_TYPES.overlayError;
    payload: HMRPayload;
}
export interface ConfigAction extends Action {
    type: ACTION_TYPES.config;
    payload: Pick<ServerOptions, 'hmr'> & {
        env: ConfigEnv;
    };
}
export interface ConfigureServerAction extends Action {
    type: ACTION_TYPES.configureServer;
    payload: {
        root: string;
    };
}
export interface UnrefAction extends Action {
    type: ACTION_TYPES.unref;
}
export declare type Actions = OverlayErrorAction | ConfigAction | ConfigureServerAction | UnrefAction;
export declare type BuildCheckBin = BuildCheckBinStr | BuildCheckBinFn;
export declare type BuildCheckBinStr = [string, ReadonlyArray<string>];
export declare type BuildCheckBinFn = (config: UserPluginConfig) => [string, ReadonlyArray<string>];
export interface ConfigureServeChecker {
    worker: Worker;
    config: (config: ConfigAction['payload']) => void;
    configureServer: (serverConfig: ConfigureServerAction['payload']) => void;
}
export interface ServeAndBuildChecker {
    serve: ConfigureServeChecker;
    build: {
        buildBin: BuildCheckBin;
        buildFile?: string;
    };
}
/**
 * create serve & build checker
 */
export interface ServeChecker<T extends BuildInCheckerNames = any> {
    createDiagnostic: CreateDiagnostic<T>;
}
export interface CheckerDiagnostic {
    config: (options: Pick<ServerOptions, 'hmr'> & {
        env: ConfigEnv;
    }) => unknown;
    configureServer: (options: {
        root: string;
    }) => unknown;
}
export declare type CreateDiagnostic<T extends BuildInCheckerNames = any> = (config: Pick<BuildInCheckers, T> & SharedConfig) => CheckerDiagnostic;
export {};
//# sourceMappingURL=types.d.ts.map