import {
  addListener,
  gestures,
  removeListener
} from "./chunk-6FZMJTZI.js";
import "./chunk-QNRFZUBX.js";
import "./chunk-KTZKXPFA.js";

// node_modules/@vaadin/flow-frontend/contextMenuConnector.js
(function() {
  const tryCatchWrapper = function(callback) {
    return window.Vaadin.Flow.tryCatchWrapper(callback, "Vaadin Context Menu");
  };
  window.Vaadin.Flow.contextMenuConnector = {
    init: (target) => tryCatchWrapper(function(target2) {
      if (target2.$contextMenuConnector) {
        return;
      }
      target2.$contextMenuConnector = {
        openOnHandler: tryCatchWrapper(function(e) {
          e.preventDefault();
          e.stopPropagation();
          this.$contextMenuConnector.openEvent = e;
          let detail = {};
          if (target2.getContextMenuBeforeOpenDetail) {
            detail = target2.getContextMenuBeforeOpenDetail(e);
          }
          target2.dispatchEvent(new CustomEvent("vaadin-context-menu-before-open", {
            detail
          }));
        }),
        updateOpenOn: tryCatchWrapper(function(eventType) {
          this.removeListener();
          this.openOnEventType = eventType;
          customElements.whenDefined("vaadin-context-menu").then(tryCatchWrapper(() => {
            if (gestures[eventType]) {
              addListener(target2, eventType, this.openOnHandler);
            } else {
              target2.addEventListener(eventType, this.openOnHandler);
            }
          }));
        }),
        removeListener: tryCatchWrapper(function() {
          if (this.openOnEventType) {
            if (gestures[this.openOnEventType]) {
              removeListener(target2, this.openOnEventType, this.openOnHandler);
            } else {
              target2.removeEventListener(this.openOnEventType, this.openOnHandler);
            }
          }
        }),
        openMenu: tryCatchWrapper(function(contextMenu) {
          contextMenu.open(this.openEvent);
        }),
        removeConnector: tryCatchWrapper(function() {
          this.removeListener();
          target2.$contextMenuConnector = void 0;
        })
      };
    })(target),
    generateItems: (menu, appId, nodeId) => tryCatchWrapper(function(menu2, appId2, nodeId2) {
      menu2._containerNodeId = nodeId2;
      const getContainer = function(nodeId3) {
        try {
          return window.Vaadin.Flow.clients[appId2].getByNodeId(nodeId3);
        } catch (error) {
          console.error("Could not get node %s from app %s", nodeId3, appId2);
          console.error(error);
        }
      };
      const getChildItems = function(parent) {
        const container = getContainer(parent._containerNodeId);
        const items2 = container && Array.from(container.children).map((child) => {
          const item = {
            component: child,
            checked: child._checked,
            theme: child._theme
          };
          if (child.tagName == "VAADIN-CONTEXT-MENU-ITEM" && child._containerNodeId) {
            item.children = getChildItems(child);
          }
          child._item = item;
          return item;
        });
        return items2;
      };
      const items = getChildItems(menu2);
      menu2.items = items;
    })(menu, appId, nodeId),
    setChecked: (component, checked) => tryCatchWrapper(function(component2, checked2) {
      if (component2._item) {
        component2._item.checked = checked2;
      }
    })(component, checked),
    setTheme: (component, theme) => tryCatchWrapper((component2, theme2) => {
      if (component2._item) {
        component2._item.theme = theme2;
      }
    })(component, theme)
  };
})();
//# sourceMappingURL=@vaadin_flow-frontend_contextMenuConnector_js.js.map
