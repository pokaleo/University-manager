{
  "version": 3,
  "sources": ["../@vaadin/grid/src/vaadin-grid-column-group.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2016 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { FlattenedNodesObserver } from '@polymer/polymer/lib/utils/flattened-nodes-observer.js';\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { microTask } from '@vaadin/component-base/src/async.js';\nimport { ColumnBaseMixin } from './vaadin-grid-column.js';\nimport { updateColumnOrders } from './vaadin-grid-helpers.js';\n\n/**\n * A `<vaadin-grid-column-group>` is used to make groups of columns in `<vaadin-grid>` and\n * to configure additional headers and footers.\n *\n * Groups can be nested to create complex header and footer configurations.\n *\n * #### Example:\n * ```html\n * <vaadin-grid-column-group resizable id=\"columnGroup\">\n *   <vaadin-grid-column id=\"column1\"></vaadin-grid-column>\n *   <vaadin-grid-column id=\"column2\"></vaadin-grid-column>\n * </vaadin-grid-column-group>\n * ```\n *\n * ```js\n * const columnGroup = document.querySelector('#columnGroup');\n * columnGroup.headerRenderer = (root, columnGroup) => {\n *   root.textContent = 'header';\n * }\n *\n * const column1 = document.querySelector('#column1');\n * column1.headerRenderer = (root, column) => { ... };\n * column1.renderer = (root, column, model) => { ... };\n *\n * const column2 = document.querySelector('#column2');\n * column2.headerRenderer = (root, column) => { ... };\n * column2.renderer = (root, column, model) => { ... };\n * ```\n *\n * @extends HTMLElement\n * @mixes ColumnBaseMixin\n */\nclass GridColumnGroup extends ColumnBaseMixin(PolymerElement) {\n  static get is() {\n    return 'vaadin-grid-column-group';\n  }\n\n  static get properties() {\n    return {\n      /** @private */\n      _childColumns: {\n        value: function () {\n          return this._getChildColumns(this);\n        }\n      },\n\n      /**\n       * Flex grow ratio for the column group as the sum of the ratios of its child columns.\n       * @attr {number} flex-grow\n       */\n      flexGrow: {\n        type: Number,\n        readOnly: true\n      },\n\n      /**\n       * Width of the column group as the sum of the widths of its child columns.\n       */\n      width: {\n        type: String,\n        readOnly: true\n      },\n\n      /** @private */\n      _visibleChildColumns: Array,\n\n      /** @private */\n      _colSpan: Number,\n\n      /** @private */\n      _rootColumns: Array\n    };\n  }\n\n  static get observers() {\n    return [\n      '_updateVisibleChildColumns(_childColumns)',\n      '_childColumnsChanged(_childColumns)',\n      '_groupFrozenChanged(frozen, _rootColumns)',\n      '_groupHiddenChanged(hidden, _rootColumns)',\n      '_visibleChildColumnsChanged(_visibleChildColumns)',\n      '_colSpanChanged(_colSpan, _headerCell, _footerCell)',\n      '_groupOrderChanged(_order, _rootColumns)',\n      '_groupReorderStatusChanged(_reorderStatus, _rootColumns)',\n      '_groupResizableChanged(resizable, _rootColumns)'\n    ];\n  }\n\n  /** @protected */\n  connectedCallback() {\n    super.connectedCallback();\n    this._addNodeObserver();\n    this._updateFlexAndWidth();\n  }\n\n  /** @protected */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this._observer && this._observer.disconnect();\n  }\n\n  /**\n   * @param {string} path\n   * @param {unknown=} value\n   * @protected\n   */\n  _columnPropChanged(path, value) {\n    if (path === 'hidden') {\n      this._preventHiddenCascade = true;\n      this._updateVisibleChildColumns(this._childColumns);\n      this._preventHiddenCascade = false;\n    }\n\n    if (/flexGrow|width|hidden|_childColumns/.test(path)) {\n      this._updateFlexAndWidth();\n    }\n\n    if (path === 'frozen') {\n      // Don\u2019t unfreeze the frozen group because of a non-frozen child\n      this.frozen = this.frozen || value;\n    }\n\n    if (path === 'lastFrozen') {\n      // Don\u2019t unfreeze the frozen group because of a non-frozen child\n      this._lastFrozen = this._lastFrozen || value;\n    }\n  }\n\n  /** @private */\n  _groupOrderChanged(order, rootColumns) {\n    if (rootColumns) {\n      const _rootColumns = rootColumns.slice(0);\n\n      if (!order) {\n        _rootColumns.forEach((column) => (column._order = 0));\n        return;\n      }\n      // The parent column order number cascades downwards to it's children\n      // so that the resulting order numbering constructs as follows:\n      // [             1000              ]\n      // [     1100    ] | [     1200    ]\n      // [1110] | [1120] | [1210] | [1220]\n\n      // Trailing zeros are counted so we know the level on which we're working on.\n      const trailingZeros = /(0+)$/.exec(order).pop().length;\n\n      // In an unlikely situation where a group has more than 9 child columns,\n      // the child scope must have 1 digit less...\n      // Log^a_b = Ln(a)/Ln(b)\n      // Number of digits of a number is equal to floor(Log(number)_10) + 1\n      const childCountDigits = ~~(Math.log(rootColumns.length) / Math.LN10) + 1;\n\n      // Final scope for the child columns needs to mind both factors.\n      const scope = 10 ** (trailingZeros - childCountDigits);\n\n      if (_rootColumns[0] && _rootColumns[0]._order) {\n        _rootColumns.sort((a, b) => a._order - b._order);\n      }\n      updateColumnOrders(_rootColumns, scope, order);\n    }\n  }\n\n  /** @private */\n  _groupReorderStatusChanged(reorderStatus, rootColumns) {\n    if (reorderStatus === undefined || rootColumns === undefined) {\n      return;\n    }\n\n    rootColumns.forEach((column) => (column._reorderStatus = reorderStatus));\n  }\n\n  /** @private */\n  _groupResizableChanged(resizable, rootColumns) {\n    if (resizable === undefined || rootColumns === undefined) {\n      return;\n    }\n\n    rootColumns.forEach((column) => (column.resizable = resizable));\n  }\n\n  /** @private */\n  _updateVisibleChildColumns(childColumns) {\n    this._visibleChildColumns = Array.prototype.filter.call(childColumns, (col) => !col.hidden);\n  }\n\n  /** @private */\n  _childColumnsChanged(childColumns) {\n    if (!this._autoHidden && this.hidden) {\n      Array.prototype.forEach.call(childColumns, (column) => (column.hidden = true));\n      this._updateVisibleChildColumns(childColumns);\n    }\n  }\n\n  /** @protected */\n  _updateFlexAndWidth() {\n    if (!this._visibleChildColumns) {\n      return;\n    }\n\n    if (this._visibleChildColumns.length) {\n      this._setWidth(\n        'calc(' +\n          Array.prototype.reduce\n            .call(\n              this._visibleChildColumns,\n              (prev, curr) => (prev += ' + ' + (curr.width || '0px').replace('calc', '')),\n              ''\n            )\n            .substring(3) +\n          ')'\n      );\n    } else {\n      this._setWidth('0px');\n    }\n\n    this._setFlexGrow(Array.prototype.reduce.call(this._visibleChildColumns, (prev, curr) => prev + curr.flexGrow, 0));\n  }\n\n  /** @private */\n  _groupFrozenChanged(frozen, rootColumns) {\n    if (rootColumns === undefined || frozen === undefined) {\n      return;\n    }\n\n    // Don\u2019t propagate the default `false` value.\n    if (frozen !== false) {\n      Array.from(rootColumns).forEach((col) => (col.frozen = frozen));\n    }\n  }\n\n  /** @private */\n  _groupHiddenChanged(hidden, rootColumns) {\n    if (rootColumns && !this._preventHiddenCascade) {\n      this._ignoreVisibleChildColumns = true;\n      rootColumns.forEach((column) => (column.hidden = hidden));\n      this._ignoreVisibleChildColumns = false;\n    }\n\n    this._columnPropChanged('hidden');\n  }\n\n  /** @private */\n  _visibleChildColumnsChanged(visibleChildColumns) {\n    this._colSpan = visibleChildColumns.length;\n\n    if (!this._ignoreVisibleChildColumns) {\n      if (visibleChildColumns.length === 0) {\n        this._autoHidden = this.hidden = true;\n      } else if (this.hidden && this._autoHidden) {\n        this._autoHidden = this.hidden = false;\n      }\n    }\n  }\n\n  /** @private */\n  _colSpanChanged(colSpan, headerCell, footerCell) {\n    if (headerCell) {\n      headerCell.setAttribute('colspan', colSpan);\n      this._grid && this._grid._a11yUpdateCellColspan(headerCell, colSpan);\n    }\n    if (footerCell) {\n      footerCell.setAttribute('colspan', colSpan);\n      this._grid && this._grid._a11yUpdateCellColspan(footerCell, colSpan);\n    }\n  }\n\n  /**\n   * @param {!GridColumnGroup} el\n   * @return {!Array<!GridColumn>}\n   * @protected\n   */\n  _getChildColumns(el) {\n    return FlattenedNodesObserver.getFlattenedNodes(el).filter(this._isColumnElement);\n  }\n\n  /** @private */\n  _addNodeObserver() {\n    this._observer = new FlattenedNodesObserver(this, (info) => {\n      if (\n        info.addedNodes.filter(this._isColumnElement).length > 0 ||\n        info.removedNodes.filter(this._isColumnElement).length > 0\n      ) {\n        this._preventHiddenCascade = true;\n        this._rootColumns = this._getChildColumns(this);\n        this._childColumns = this._rootColumns;\n        this._preventHiddenCascade = false;\n\n        // Update the column tree with microtask timing to avoid shady style scope issues\n        microTask.run(() => {\n          this._grid && this._grid._updateColumnTree && this._grid._updateColumnTree();\n        });\n      }\n    });\n    this._observer.flush();\n  }\n\n  /**\n   * @param {!Node} node\n   * @return {boolean}\n   * @protected\n   */\n  _isColumnElement(node) {\n    return node.nodeType === Node.ELEMENT_NODE && /\\bcolumn\\b/.test(node.localName);\n  }\n}\n\ncustomElements.define(GridColumnGroup.is, GridColumnGroup);\n\nexport { GridColumnGroup };\n"],
  "mappings": "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",
  "names": []
}
