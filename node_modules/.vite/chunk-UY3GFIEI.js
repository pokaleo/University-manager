import {
  LoginMixin
} from "./chunk-Y4TCWVQF.js";
import {
  OverlayElement
} from "./chunk-O5EIIYDR.js";
import {
  ThemableMixin
} from "./chunk-PALO6AVQ.js";
import {
  ElementMixin
} from "./chunk-ZAXSWEEW.js";
import {
  PolymerElement,
  html
} from "./chunk-EMDRMWGL.js";
import {
  DomModule
} from "./chunk-H3KD7FYF.js";

// node_modules/@vaadin/login/src/vaadin-login-overlay-wrapper.js
var $_documentContainer = document.createElement("template");
$_documentContainer.innerHTML = `<dom-module id="vaadin-login-overlay-wrapper-template">
  <template>
    <style>
      [part="overlay"] {
        outline: none;
      }

      [part="card"] {
        max-width: 100%;
        box-sizing: border-box;
        overflow: hidden;
        display: flex;
        flex-direction: column;
      }

      [part="brand"] {
        box-sizing: border-box;
        overflow: hidden;
        flex-grow: 1;
        flex-shrink: 0;
        display: flex;
        flex-direction: column;
        justify-content: flex-end;
      }

      [part="brand"] h1 {
        color: inherit;
        margin: 0;
      }
    </style>
    <section part="card">
      <div part="brand">
        <slot name="title">
          <h1 part="title">[[title]]</h1>
        </slot>
        <p part="description">[[description]]</p>
      </div>
      <div part="form">
        <slot></slot>
      </div>
    </section>
  </template>
</dom-module>`;
document.head.appendChild($_documentContainer.content);
var memoizedTemplate;
var LoginOverlayWrapper = class extends OverlayElement {
  static get is() {
    return "vaadin-login-overlay-wrapper";
  }
  static get properties() {
    return {
      title: {
        type: String
      },
      description: {
        type: String
      }
    };
  }
  static get template() {
    if (!memoizedTemplate) {
      memoizedTemplate = super.template.cloneNode(true);
      const thisTemplate = DomModule.import(this.is + "-template", "template");
      const card = thisTemplate.content.querySelector("[part=card]");
      const styles = thisTemplate.content.querySelector("style");
      const content = memoizedTemplate.content.querySelector("#content");
      content.replaceChild(card, content.children[0]);
      content.appendChild(styles);
    }
    return memoizedTemplate;
  }
};
customElements.define(LoginOverlayWrapper.is, LoginOverlayWrapper);

// node_modules/@vaadin/login/src/vaadin-login-overlay.js
var LoginOverlay = class extends LoginMixin(ElementMixin(ThemableMixin(PolymerElement))) {
  static get template() {
    return html`
      <vaadin-login-overlay-wrapper
        id="vaadinLoginOverlayWrapper"
        opened="{{opened}}"
        focus-trap
        with-backdrop
        title="[[title]]"
        description="[[description]]"
        theme$="[[theme]]"
      >
        <vaadin-login-form
          theme="with-overlay"
          id="vaadinLoginForm"
          action="{{action}}"
          disabled="{{disabled}}"
          error="{{error}}"
          no-autofocus="[[noAutofocus]]"
          no-forgot-password="{{noForgotPassword}}"
          i18n="{{i18n}}"
          on-login="_retargetEvent"
          on-forgot-password="_retargetEvent"
        ></vaadin-login-form>
      </vaadin-login-overlay-wrapper>
    `;
  }
  static get is() {
    return "vaadin-login-overlay";
  }
  static get properties() {
    return {
      description: {
        type: String,
        value: "Application description",
        notify: true
      },
      opened: {
        type: Boolean,
        value: false,
        observer: "_onOpenedChange"
      },
      title: {
        type: String,
        value: "App name"
      }
    };
  }
  static get observers() {
    return ["__i18nChanged(i18n.header.*)"];
  }
  ready() {
    super.ready();
    this._preventClosingLogin = this._preventClosingLogin.bind(this);
  }
  connectedCallback() {
    super.connectedCallback();
    this.$.vaadinLoginOverlayWrapper.addEventListener("vaadin-overlay-outside-click", this._preventClosingLogin);
    this.$.vaadinLoginOverlayWrapper.addEventListener("vaadin-overlay-escape-press", this._preventClosingLogin);
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.$.vaadinLoginOverlayWrapper.removeEventListener("vaadin-overlay-outside-click", this._preventClosingLogin);
    this.$.vaadinLoginOverlayWrapper.removeEventListener("vaadin-overlay-escape-press", this._preventClosingLogin);
    this.$.vaadinLoginOverlayWrapper.opened = false;
  }
  __i18nChanged(i18n) {
    const header = i18n.base;
    if (!header) {
      return;
    }
    this.title = header.title;
    this.description = header.description;
  }
  _preventClosingLogin(e) {
    e.preventDefault();
  }
  _onOpenedChange() {
    if (!this.opened) {
      this.$.vaadinLoginForm.$.vaadinLoginUsername.value = "";
      this.$.vaadinLoginForm.$.vaadinLoginPassword.value = "";
      this.disabled = false;
      if (this._undoTeleport) {
        this._undoTeleport();
      }
    } else {
      this._undoTeleport = this._teleport(this._getElementsToTeleport());
      document.body.style.pointerEvents = this.$.vaadinLoginOverlayWrapper._previousDocumentPointerEvents;
    }
  }
  _teleport(elements) {
    const teleported = Array.from(elements).map((e) => {
      return this.$.vaadinLoginOverlayWrapper.appendChild(e);
    });
    return () => {
      while (teleported.length > 0) {
        this.appendChild(teleported.shift());
      }
    };
  }
  _getElementsToTeleport() {
    return this.querySelectorAll("[slot=title]");
  }
};
customElements.define(LoginOverlay.is, LoginOverlay);
/**
 * @license
 * Copyright (c) 2018 - 2022 Vaadin Ltd.
 * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
 */
//# sourceMappingURL=chunk-UY3GFIEI.js.map
