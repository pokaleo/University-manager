import {
  Select
} from "./chunk-RJD45Q34.js";
import {
  TextField
} from "./chunk-UMYQULRK.js";
import "./chunk-XNITCYAA.js";
import "./chunk-HEO3XYAH.js";
import {
  GridColumn
} from "./chunk-FUN4RVJ7.js";
import "./chunk-I4XSFGAQ.js";
import "./chunk-EGRHWZRV.js";
import {
  Checkbox
} from "./chunk-B6HQ7K3V.js";
import "./chunk-RARRYMG4.js";
import "./chunk-QFBWESZ7.js";
import "./chunk-VPQC7TEI.js";
import "./chunk-YBQVYLTV.js";
import "./chunk-3DPYGOOZ.js";
import "./chunk-OA3YIVWN.js";
import "./chunk-ON7ICNNX.js";
import "./chunk-YJVFTOSG.js";
import "./chunk-DN7NE4EQ.js";
import "./chunk-4JL67NGK.js";
import "./chunk-NENT67AA.js";
import "./chunk-YESAUM4I.js";
import "./chunk-2PREY5TQ.js";
import "./chunk-W2FE6W4J.js";
import "./chunk-IYXOBYFR.js";
import "./chunk-DFQLQY2A.js";
import "./chunk-JKBBW2QH.js";
import "./chunk-TK5N5WF6.js";
import "./chunk-SS2WBPLG.js";
import "./chunk-TZOGT4WC.js";
import "./chunk-LXJNOC7R.js";
import "./chunk-YMQIJIR3.js";
import "./chunk-75G4VMZU.js";
import "./chunk-7N2APOXI.js";
import "./chunk-6I3PSOTG.js";
import "./chunk-VRMTXLCJ.js";
import "./chunk-I6OY4CB4.js";
import "./chunk-2GZ522BV.js";
import "./chunk-BUARF445.js";
import "./chunk-ZGILPT2L.js";
import "./chunk-IASAGYPQ.js";
import "./chunk-THDKHJJJ.js";
import "./chunk-6FZMJTZI.js";
import "./chunk-UTZKFO5A.js";
import "./chunk-CHZ6BFNC.js";
import "./chunk-TNYX3KNS.js";
import "./chunk-5B3W7TLP.js";
import "./chunk-75WEHVQA.js";
import "./chunk-Q3ITW52D.js";
import "./chunk-SYJMCSOT.js";
import "./chunk-TSMFV5J4.js";
import "./chunk-WUR5UZ22.js";
import "./chunk-YZXPUGLM.js";
import {
  registerStyles
} from "./chunk-PALO6AVQ.js";
import "./chunk-OKCEHAIA.js";
import "./chunk-KCWZ32HQ.js";
import "./chunk-ZFVP5VBM.js";
import "./chunk-QNRFZUBX.js";
import {
  css
} from "./chunk-PYLEJJK2.js";
import {
  get,
  set
} from "./chunk-EMDRMWGL.js";
import "./chunk-H3KD7FYF.js";
import "./chunk-NZ6RMXB7.js";
import "./chunk-RQI6IG5T.js";
import "./chunk-KTZKXPFA.js";

// node_modules/@vaadin/grid-pro/src/vaadin-grid-pro-edit-checkbox.js
var GridProEditCheckbox = class extends Checkbox {
  static get is() {
    return "vaadin-grid-pro-edit-checkbox";
  }
};
customElements.define(GridProEditCheckbox.is, GridProEditCheckbox);

// node_modules/@vaadin/grid-pro/theme/lumo/vaadin-grid-pro-editor-styles.js
var gridProEditor = css`
  :host([theme~='grid-pro-editor']) {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    padding: 0;
    will-change: transform;
    font-size: inherit;
    --lumo-text-field-size: 27px;
    /* outline similar to what grid uses */
    box-shadow: inset 0 0 0 2px var(--lumo-primary-color-50pct);
  }

  :host([theme~='grid-pro-editor']) [part='input-field'] {
    padding: 0;
    border-radius: 0;
    flex-grow: 1;
    font-weight: 400;
  }

  /* reset outline inherited from text-field */
  :host([theme~='grid-pro-editor'][focus-ring]) [part='input-field'] {
    box-shadow: none;
  }

  :host([theme~='grid-pro-editor']) ::slotted(input) {
    padding: 0 var(--lumo-space-m);
    font-size: inherit;
  }
`;
registerStyles("", gridProEditor, { moduleId: "lumo-grid-pro-editor" });

// node_modules/@vaadin/grid-pro/theme/lumo/vaadin-grid-pro-edit-select-styles.js
var gridProEditSelect = css`
  :host([theme~='grid-pro-editor']) [part='toggle-button'] {
    margin-right: var(--lumo-space-xs);
  }

  :host([theme~='grid-pro-editor']) [part='input-field'] ::slotted([slot='value']) {
    box-sizing: border-box;
    padding: 0 var(--lumo-space-m);
    font-size: var(--lumo-font-size-m);
    /* prevent selection on editor focus */
    -webkit-user-select: none;
    -moz-user-select: none;
    user-select: none;
  }
`;
registerStyles("vaadin-grid-pro-edit-select", [gridProEditor, gridProEditSelect], {
  moduleId: "lumo-grid-pro-edit-select"
});

// node_modules/@vaadin/grid-pro/src/vaadin-grid-pro-edit-select.js
var GridProEditSelect = class extends Select {
  static get is() {
    return "vaadin-grid-pro-edit-select";
  }
  static get properties() {
    return {
      options: {
        type: Array,
        value: () => []
      },
      _grid: {
        type: Object
      },
      _initialized: {
        type: Boolean
      }
    };
  }
  static get observers() {
    return ["_optionsChanged(options)"];
  }
  ready() {
    super.ready();
    this.setAttribute("theme", "grid-pro-editor");
  }
  _onKeyDown(e) {
    super._onKeyDown(e);
    if (this.options.length === 0 && /^(ArrowDown|Down|ArrowUp|Up|Enter|SpaceBar| )$/.test(e.key)) {
      console.warn('Missing "editorOptions" for <vaadin-grid-pro-edit-column> select editor!');
    }
    if (e.defaultPrevented) {
      e.stopPropagation();
    }
  }
  _onKeyDownInside(event) {
    if (event.keyCode === 13) {
      this._enterKeydown = event;
    }
    if (event.keyCode === 9) {
      !this._grid.singleCellEdit && this._grid._switchEditCell(event);
    }
    super._onKeyDownInside(event);
  }
  _valueChanged(value, oldValue) {
    super._valueChanged(value, oldValue);
    if (value === "" && oldValue === void 0) {
      return;
    }
    if (this._initialized) {
      const enter = this._enterKeydown;
      if (enter && this._grid.enterNextRow) {
        this._grid._switchEditCell(enter);
      } else if (this._grid.singleCellEdit) {
        this._grid._stopEdit(false, true);
      } else {
        this.focus();
      }
    }
  }
  _optionsChanged(options) {
    if (options && options.length) {
      this.renderer = (root) => {
        if (root.firstChild) {
          return;
        }
        const listBox = document.createElement("vaadin-list-box");
        listBox.selected = options.indexOf(this.value);
        options.forEach((option) => {
          const item = document.createElement("vaadin-item");
          item.textContent = option;
          listBox.appendChild(item);
        });
        root.appendChild(listBox);
      };
      this._overlayElement.addEventListener("vaadin-overlay-outside-click", () => {
        this._grid._stopEdit();
      });
      setTimeout(() => {
        this.opened = true;
        this._initialized = true;
      });
    }
  }
};
customElements.define(GridProEditSelect.is, GridProEditSelect);

// node_modules/@vaadin/grid-pro/theme/lumo/vaadin-grid-pro-edit-text-field-styles.js
registerStyles("vaadin-grid-pro-edit-text-field", gridProEditor, {
  moduleId: "lumo-grid-pro-edit-text-field"
});

// node_modules/@vaadin/grid-pro/src/vaadin-grid-pro-edit-text-field.js
var GridProEditText = class extends TextField {
  static get is() {
    return "vaadin-grid-pro-edit-text-field";
  }
  ready() {
    super.ready();
    this.setAttribute("theme", "grid-pro-editor");
  }
};
customElements.define(GridProEditText.is, GridProEditText);

// node_modules/@vaadin/grid-pro/src/vaadin-grid-pro-edit-column.js
var GridProEditColumn = class extends GridColumn {
  static get is() {
    return "vaadin-grid-pro-edit-column";
  }
  static get properties() {
    return {
      editModeRenderer: Function,
      editorOptions: {
        type: Array,
        value: () => []
      },
      editorType: {
        type: String,
        notify: true,
        value: "text"
      },
      editorValuePath: {
        type: String,
        value: "value"
      },
      path: {
        type: String,
        observer: "_pathChanged"
      },
      _oldRenderer: Function
    };
  }
  static get observers() {
    return ["_editModeRendererChanged(editModeRenderer, __initialized)", "_cellsChanged(_cells.*)"];
  }
  constructor() {
    super();
    this.__editModeRenderer = function(root, column) {
      const cell = root.assignedSlot.parentNode;
      const tagName = column._getEditorTagName(cell);
      if (!root.firstElementChild || root.firstElementChild.localName.toLowerCase() !== tagName) {
        root.innerHTML = `
          <${tagName}></${tagName}>
        `;
      }
    };
  }
  _pathChanged(path) {
    if (!path || path.length == 0) {
      throw new Error("You should specify the path for the edit column");
    }
  }
  _cellsChanged() {
    this._cells.forEach((cell) => {
      const part = cell.getAttribute("part");
      if (part.indexOf("editable-cell") < 0) {
        cell.setAttribute("part", part + " editable-cell");
      }
    });
  }
  _editModeRendererChanged(renderer) {
    if (renderer) {
      this.editorType = "custom";
    } else if (this._oldRenderer) {
      this.editorType = "text";
    }
    this._oldRenderer = renderer;
  }
  _getEditorTagName(cell) {
    return this.editorType === "custom" ? this._getEditorComponent(cell).localName : this._getTagNameByType();
  }
  _getEditorComponent(cell) {
    return this.editorType === "custom" ? cell._content.firstElementChild : cell._content.querySelector(this._getEditorTagName(cell));
  }
  _getTagNameByType() {
    let type;
    switch (this.editorType) {
      case "checkbox":
        type = "checkbox";
        break;
      case "select":
        type = "select";
        break;
      case "text":
      default:
        type = "text-field";
        break;
    }
    return this.constructor.is.replace("column", type);
  }
  _focusEditor(editor) {
    editor.focus();
    if (this.editorType === "checkbox") {
      editor.setAttribute("focus-ring", "");
    } else if (editor instanceof HTMLInputElement) {
      editor.select();
    } else if (editor.focusElement && editor.focusElement instanceof HTMLInputElement) {
      editor.focusElement.select();
    }
  }
  _getEditorValue(editor) {
    const path = this.editorType === "checkbox" ? "checked" : this.editorValuePath;
    return get(editor, path);
  }
  _renderEditor(cell, model) {
    cell.__savedRenderer = this._renderer || cell._renderer;
    cell._renderer = this.editModeRenderer || this.__editModeRenderer;
    this._clearCellContent(cell);
    this._runRenderer(cell._renderer, cell, model);
  }
  _removeEditor(cell, _model) {
    if (!cell.__savedRenderer) {
      return;
    }
    cell._renderer = cell.__savedRenderer;
    cell.__savedRenderer = void 0;
    this._clearCellContent(cell);
    const row = cell.parentElement;
    this._grid._updateItem(row, row._item);
  }
  _setEditorOptions(editor) {
    if (this.editorOptions && this.editorOptions.length) {
      editor.options = this.editorOptions;
    }
  }
  _setEditorValue(editor, value) {
    const path = this.editorType === "checkbox" ? "checked" : this.editorValuePath;
    value = this.editorType === "checkbox" && typeof value === "string" ? value == "true" : value;
    set(editor, path, value);
    editor.notifyPath && editor.notifyPath(path, value);
  }
  _startCellEdit(cell, model) {
    this._renderEditor(cell, model);
    const editor = this._getEditorComponent(cell);
    editor.addEventListener("focusout", this._grid.__boundEditorFocusOut);
    editor.addEventListener("focusin", this._grid.__boundEditorFocusIn);
    editor.addEventListener("internal-tab", this._grid.__boundCancelCellSwitch);
    document.body.addEventListener("focusin", this._grid.__boundGlobalFocusIn);
    this._setEditorOptions(editor);
    this._setEditorValue(editor, get(model.item, this.path));
    editor._grid = this._grid;
    this._focusEditor(editor);
  }
  _stopCellEdit(cell, model) {
    document.body.removeEventListener("focusin", this._grid.__boundGlobalFocusIn);
    this._removeEditor(cell, model);
  }
};
customElements.define(GridProEditColumn.is, GridProEditColumn);
/**
 * @license
 * Copyright (c) 2018 - 2022 Vaadin Ltd.
 * This program is available under Commercial Vaadin Developer License 4.0 (CVDLv4).
 * See <a href="https://vaadin.com/license/cvdl-4.0">the website</a> for the complete license.
 */
//# sourceMappingURL=@vaadin_grid-pro_theme_lumo_vaadin-grid-pro-edit-column_js.js.map
