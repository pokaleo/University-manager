"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createScript = void 0;
const worker_threads_1 = require("worker_threads");
const types_1 = require("./types");
function createScript({ absFilename, buildBin, serverChecker, }) {
    return {
        mainScript: () => {
            // initialized in main thread
            const createWorker = (checkerConfig, env) => {
                const isBuild = env.command === 'build';
                const worker = new worker_threads_1.Worker(absFilename, {
                    workerData: { env, checkerConfig },
                });
                // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
                return {
                    worker,
                    config: (config) => {
                        if (isBuild)
                            return; // just run the command
                        const configAction = { type: types_1.ACTION_TYPES.config, payload: config };
                        worker.postMessage(configAction);
                    },
                    configureServer: (serverConfig) => {
                        const configureServerAction = {
                            type: types_1.ACTION_TYPES.configureServer,
                            payload: serverConfig,
                        };
                        worker.postMessage(configureServerAction);
                    },
                };
            };
            return (config, env) => ({
                serve: createWorker(config, env),
                build: { buildBin },
            });
        },
        workerScript: () => {
            // runs in worker thread
            let diagnostic = null;
            if (!worker_threads_1.parentPort)
                throw Error('should have parentPort as file runs in worker thread');
            const isBuild = worker_threads_1.workerData.env.command === 'build';
            // only run bin command and do not listen message in build mode
            const port = worker_threads_1.parentPort.on('message', (action) => {
                switch (action.type) {
                    case types_1.ACTION_TYPES.config: {
                        const checkerConfig = worker_threads_1.workerData.checkerConfig;
                        diagnostic = serverChecker.createDiagnostic(checkerConfig);
                        diagnostic.config(action.payload);
                        break;
                    }
                    case types_1.ACTION_TYPES.configureServer:
                        if (!diagnostic)
                            throw Error('diagnostic should be initialized in `config` hook of Vite');
                        diagnostic.configureServer(action.payload);
                        break;
                    case types_1.ACTION_TYPES.unref:
                        port.unref();
                        break;
                }
            });
            if (isBuild) {
                port.unref();
            }
        },
    };
}
exports.createScript = createScript;
