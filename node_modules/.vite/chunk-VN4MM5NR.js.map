{
  "version": 3,
  "sources": ["../@vaadin/board/src/vaadin-board-row.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2017 - 2022 Vaadin Ltd.\n * This program is available under Commercial Vaadin Developer License 4.0, available at https://vaadin.com/license/cvdl-4.0.\n */\nimport { DomIf } from '@polymer/polymer/lib/elements/dom-if.js';\nimport { DomRepeat } from '@polymer/polymer/lib/elements/dom-repeat.js';\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { ResizeMixin } from '@vaadin/component-base/src/resize-mixin.js';\n\nconst CLASSES = {\n  SMALL: 'small',\n  MEDIUM: 'medium',\n  LARGE: 'large'\n};\n\n/**\n * `<vaadin-board-row>` is a web component that together with `<vaadin-board>` component allows\n * to create flexible responsive layouts and build nice looking dashboard.\n *\n * Each row can contain up to four elements (fewer if colspan is used) and is automatically responsive.\n * The row changes between `large`, `medium` and `small` modes depending on the available width and\n * the set breakpoints.\n *\n * In `large` mode, typically all content is shown side-by-side, in `medium` half of the content is\n * side by side and in `small` mode, content is laid out vertically.\n *\n * The breakpoints can be set using custom CSS properties.\n * By default the breakpoints are `small: <600px`, `medium: < 960px`, `large >= 960px`.\n *\n * ```html\n * <vaadin-board>\n *   <vaadin-board-row>\n *     <div>This could be chart 1</div>\n *     <div>This could be chart 2</div>\n *     <div>This could be chart 3</div>\n *     <div>This could be chart 4</div>\n *   </vaadin-board-row>\n * </vaadin-board>\n * ```\n *\n * ### Styling\n *\n * The following custom properties are available for styling:\n *\n * Custom property | Description | Default\n * ----------------|-------------|-------------\n * `--vaadin-board-width-small` | Determines the width where mode changes from `small` to `medium` | `600px`\n * `--vaadin-board-width-medium` | Determines the width where mode changes from `medium` to `large` | `960px`\n *\n * @extends HTMLElement\n * @mixes ElementMixin\n * @mixes ResizeMixin\n */\nclass BoardRow extends ResizeMixin(ElementMixin(PolymerElement)) {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: flex;\n          flex-flow: row wrap;\n          align-items: stretch;\n          --small-size: var(--vaadin-board-width-small, 600px);\n          --medium-size: var(--vaadin-board-width-medium, 960px);\n        }\n\n        :host ::slotted(*) {\n          box-sizing: border-box;\n          flex-grow: 1;\n          overflow: hidden;\n        }\n      </style>\n      <slot id=\"insertionPoint\"></slot>\n    `;\n  }\n\n  static get is() {\n    return 'vaadin-board-row';\n  }\n\n  constructor() {\n    super();\n    this._oldWidth = 0;\n    this._oldBreakpoints = { smallSize: 600, mediumSize: 960 };\n    this._oldFlexBasis = [];\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    this.$.insertionPoint.addEventListener('slotchange', () => this.redraw());\n  }\n\n  /** @protected */\n  connectedCallback() {\n    super.connectedCallback();\n    this._onResize();\n  }\n\n  /**\n   * Adds styles for board row based on width.\n   * @private\n   */\n  _addStyleNames(width, breakpoints) {\n    if (width < breakpoints.smallSize) {\n      this.classList.add(CLASSES.SMALL);\n      this.classList.remove(CLASSES.MEDIUM);\n      this.classList.remove(CLASSES.LARGE);\n    } else if (width < breakpoints.mediumSize) {\n      this.classList.remove(CLASSES.SMALL);\n      this.classList.add(CLASSES.MEDIUM);\n      this.classList.remove(CLASSES.LARGE);\n    } else {\n      this.classList.remove(CLASSES.SMALL);\n      this.classList.remove(CLASSES.MEDIUM);\n      this.classList.add(CLASSES.LARGE);\n    }\n  }\n\n  /**\n   * Calculates flex basis based on colSpan, width and breakpoints.\n   * @param {number} colSpan colspan value of the row\n   * @param {number} width width of the row in px\n   * @param {number} colsInRow number of columns in the row\n   * @param {object} breakpoints object with smallSize and mediumSize number properties, which tells\n   * where the row should switch rendering size in pixels.\n   * @private\n   */\n  _calculateFlexBasis(colSpan, width, colsInRow, breakpoints) {\n    if (width < breakpoints.smallSize) {\n      colsInRow = 1;\n    } else if (width < breakpoints.mediumSize && colsInRow == 4) {\n      colsInRow = 2;\n    }\n    let flexBasis = (colSpan / colsInRow) * 100;\n    flexBasis = flexBasis > 100 ? 100 : flexBasis;\n    return flexBasis + '%';\n  }\n\n  /** @private */\n  _reportError() {\n    const errorMessage = 'The column configuration is not valid; column count should add up to 3 or 4.';\n    console.warn(errorMessage, 'check: \\r\\n' + this.outerHTML);\n  }\n\n  /**\n   * Parses board-cols from DOM.\n   * If there is not enough space in the row drop board cols.\n   * @param {!Array<!Node>} nodes array of nodes\n   * @return {!Array<number>} array of boardCols\n   * @private\n   */\n  _parseBoardCols(nodes) {\n    const boardCols = nodes.map((node) => {\n      if (node.getAttribute('board-cols')) {\n        return parseInt(node.getAttribute('board-cols'));\n      }\n      return 1;\n    });\n\n    let spaceLeft = 4;\n    let returnBoardCols = [];\n    nodes.forEach((node, i) => {\n      spaceLeft -= boardCols[i];\n    });\n\n    if (spaceLeft < 0) {\n      this._reportError();\n      boardCols.forEach((node, i) => {\n        returnBoardCols[i] = 1;\n      });\n    } else {\n      returnBoardCols = boardCols.slice(0);\n    }\n\n    return returnBoardCols;\n  }\n\n  /**\n   * If there is not enough space in the row.\n   * Extra items are dropped from DOM.\n   * @param {!Array<number>} boardCols array of board-cols for every node\n   * @param {!Array<!Node>} nodes array of nodes\n   * @return {!Array<!Node>} filtered array of nodes\n   * @private\n   */\n  _removeExtraNodesFromDOM(boardCols, nodes) {\n    let isErrorReported = false;\n    let spaceLeft = 4;\n    const returnNodes = [];\n    nodes.forEach((node, i) => {\n      spaceLeft -= boardCols[i];\n      if (spaceLeft < 0) {\n        if (!isErrorReported) {\n          isErrorReported = true;\n          this._reportError();\n        }\n        this.removeChild(node);\n      } else {\n        returnNodes[i] = node;\n      }\n    });\n    return returnNodes;\n  }\n\n  /**\n   * Redraws the row, if necessary.\n   *\n   * In most cases, a board row will redraw itself if your reconfigure it.\n   * If you dynamically change breakpoints\n   * --vaadin-board-width-small or --vaadin-board-width-medium,\n   * then you need to call this method.\n   */\n  redraw() {\n    this._recalculateFlexBasis(true);\n  }\n\n  /**\n   * @protected\n   * @override\n   */\n  _onResize() {\n    this._recalculateFlexBasis(false);\n  }\n\n  /** @private */\n  _recalculateFlexBasis(forceResize) {\n    const width = this.getBoundingClientRect().width;\n    const breakpoints = this._measureBreakpointsInPx();\n    if (\n      forceResize ||\n      width != this._oldWidth ||\n      breakpoints.smallSize != this._oldBreakpoints.smallSize ||\n      breakpoints.mediumSize != this._oldBreakpoints.mediumSize\n    ) {\n      const nodes = this.$.insertionPoint.assignedNodes({ flatten: true });\n      const isElementNode = (node) => {\n        return !(node.nodeType === node.TEXT_NODE || node instanceof DomRepeat || node instanceof DomIf);\n      };\n      const filteredNodes = nodes.filter(isElementNode);\n      this._addStyleNames(width, breakpoints);\n      const boardCols = this._parseBoardCols(filteredNodes);\n      const colsInRow = boardCols.reduce((a, b) => a + b, 0);\n      this._removeExtraNodesFromDOM(boardCols, filteredNodes).forEach((e, i) => {\n        const newFlexBasis = this._calculateFlexBasis(boardCols[i], width, colsInRow, breakpoints);\n        if (forceResize || !this._oldFlexBasis[i] || this._oldFlexBasis[i] != newFlexBasis) {\n          this._oldFlexBasis[i] = newFlexBasis;\n          e.style.flexBasis = newFlexBasis;\n        }\n      });\n      this._oldWidth = width;\n      this._oldBreakpoints = breakpoints;\n    }\n  }\n\n  /**\n   * Measure the breakpoints in pixels.\n   *\n   * The breakpoints for `small` and `medium` can be given in any unit: `px`, `em`, `in` etc.\n   * We need to know them in `px` so that they are comparable with the actual size.\n   *\n   * @return {object} object with smallSize and mediumSize number properties, which tells\n   * where the row should switch rendering size in pixels.\n   * @private\n   */\n  _measureBreakpointsInPx() {\n    // Convert minWidth to px units for comparison\n    const breakpoints = {};\n    const tmpStyleProp = 'background-position';\n    const smallSize = getComputedStyle(this).getPropertyValue('--small-size');\n    const mediumSize = getComputedStyle(this).getPropertyValue('--medium-size');\n    this.style.setProperty(tmpStyleProp, smallSize);\n    breakpoints.smallSize = parseFloat(getComputedStyle(this).getPropertyValue(tmpStyleProp));\n    this.style.setProperty(tmpStyleProp, mediumSize);\n    breakpoints.mediumSize = parseFloat(getComputedStyle(this).getPropertyValue(tmpStyleProp));\n    this.style.removeProperty(tmpStyleProp);\n    return breakpoints;\n  }\n}\n\ncustomElements.define(BoardRow.is, BoardRow);\n\nexport { BoardRow };\n"],
  "mappings": "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",
  "names": []
}
