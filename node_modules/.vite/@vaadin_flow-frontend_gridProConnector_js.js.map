{
  "version": 3,
  "sources": ["../@vaadin/flow-frontend/gridProConnector.js", "dep:@vaadin_flow-frontend_gridProConnector_js"],
  "sourcesContent": ["(function () {\n    const tryCatchWrapper = function (callback) {\n        return window.Vaadin.Flow.tryCatchWrapper(callback, 'Vaadin Grid Pro');\n    };\n\n    function isEditedRow(grid, rowData) {\n        return grid.__edited && grid.__edited.model.item.key === rowData.item.key;\n    }\n\n    window.Vaadin.Flow.gridProConnector = {\n        setEditModeRenderer: (column, component) => tryCatchWrapper(function (column, component) {\n            column.editModeRenderer = tryCatchWrapper(function editModeRenderer(root, _, rowData) {\n                if (!isEditedRow(this._grid, rowData)) {\n                    this._grid._stopEdit();\n                    return;\n                }\n\n                if (component.parentNode === root) {\n                    return;\n                }\n\n                root.appendChild(component);\n                this._grid._cancelStopEdit();\n                component.focus();\n            });\n\n            // Not needed in case of custom editor as value is set on server-side.\n            // Overridden in order to avoid blinking of the cell content.\n            column._setEditorValue = function (editor, value) {};\n            column._getEditorValue = function (editor) {\n                return;\n            };\n        })(column, component),\n\n        patchEditModeRenderer: column => tryCatchWrapper(function (column) {\n            column.__editModeRenderer = tryCatchWrapper(function __editModeRenderer(root, column, rowData) {\n                const cell = root.assignedSlot.parentNode;\n                const grid = column._grid;\n\n                if (!isEditedRow(grid, rowData)) {\n                    grid._stopEdit();\n                    return;\n                }\n\n                const tagName = column._getEditorTagName(cell);\n                if (!root.firstElementChild || root.firstElementChild.localName.toLowerCase() !== tagName) {\n                    root.innerHTML = `<${tagName}></${tagName}>`;\n                }\n            });\n        })(column)\n    };\n})();\n", "export default require(\"../node_modules/@vaadin/flow-frontend/gridProConnector.js\");"],
  "mappings": ";;;;;AAAA;AAAA;AAAA,IAAC,YAAY;AACT,YAAM,kBAAkB,SAAU,UAAU;AACxC,eAAO,OAAO,OAAO,KAAK,gBAAgB,UAAU,iBAAiB;AAAA,MACzE;AAEA,2BAAqB,MAAM,SAAS;AAChC,eAAO,KAAK,YAAY,KAAK,SAAS,MAAM,KAAK,QAAQ,QAAQ,KAAK;AAAA,MAC1E;AAEA,aAAO,OAAO,KAAK,mBAAmB;AAAA,QAClC,qBAAqB,CAAC,QAAQ,cAAc,gBAAgB,SAAU,SAAQ,YAAW;AACrF,kBAAO,mBAAmB,gBAAgB,0BAA0B,MAAM,GAAG,SAAS;AAClF,gBAAI,CAAC,YAAY,KAAK,OAAO,OAAO,GAAG;AACnC,mBAAK,MAAM,UAAU;AACrB;AAAA,YACJ;AAEA,gBAAI,WAAU,eAAe,MAAM;AAC/B;AAAA,YACJ;AAEA,iBAAK,YAAY,UAAS;AAC1B,iBAAK,MAAM,gBAAgB;AAC3B,uBAAU,MAAM;AAAA,UACpB,CAAC;AAID,kBAAO,kBAAkB,SAAU,QAAQ,OAAO;AAAA,UAAC;AACnD,kBAAO,kBAAkB,SAAU,QAAQ;AACvC;AAAA,UACJ;AAAA,QACJ,CAAC,EAAE,QAAQ,SAAS;AAAA,QAEpB,uBAAuB,YAAU,gBAAgB,SAAU,SAAQ;AAC/D,kBAAO,qBAAqB,gBAAgB,4BAA4B,MAAM,SAAQ,SAAS;AAC3F,kBAAM,OAAO,KAAK,aAAa;AAC/B,kBAAM,OAAO,QAAO;AAEpB,gBAAI,CAAC,YAAY,MAAM,OAAO,GAAG;AAC7B,mBAAK,UAAU;AACf;AAAA,YACJ;AAEA,kBAAM,UAAU,QAAO,kBAAkB,IAAI;AAC7C,gBAAI,CAAC,KAAK,qBAAqB,KAAK,kBAAkB,UAAU,YAAY,MAAM,SAAS;AACvF,mBAAK,YAAY,IAAI,aAAa;AAAA,YACtC;AAAA,UACJ,CAAC;AAAA,QACL,CAAC,EAAE,MAAM;AAAA,MACb;AAAA,IACJ,GAAG;AAAA;AAAA;;;ACnDH,IAAO,mDAAQ;",
  "names": []
}
