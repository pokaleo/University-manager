import { ErrorPayload } from 'vite';
import { SourceLocation } from '@babel/code-frame';
import type { Range } from 'vscode-languageclient';
import type { ESLint } from 'eslint';
import type { Diagnostic as LspDiagnostic, PublishDiagnosticsParams } from 'vscode-languageclient/node';
import type { Diagnostic as TsDiagnostic, LineAndCharacter } from 'typescript';
export interface NormalizedDiagnostic {
    /** error message */
    message?: string;
    /** error conclusion */
    conclusion?: string;
    /** error stack */
    stack?: string | string[];
    /** file name */
    id?: string;
    /** checker diagnostic source */
    checker: string;
    /** raw code frame generated by @babel/code-frame */
    codeFrame?: string;
    /** code frame, but striped */
    stripedCodeFrame?: string;
    /** error code location */
    loc?: SourceLocation;
    /** error level */
    level?: DiagnosticLevel;
}
export declare enum DiagnosticLevel {
    Warning = 0,
    Error = 1,
    Suggestion = 2,
    Message = 3
}
export declare function diagnosticToTerminalLog(d: NormalizedDiagnostic, name?: 'TypeScript' | 'vue-tsc' | 'VLS' | 'ESLint'): string;
export declare function diagnosticToViteError(diagnostics: NormalizedDiagnostic | NormalizedDiagnostic[]): ErrorPayload['err'];
export declare function createFrame({ source, location, }: {
    /** file source code */
    source: string;
    location: SourceLocation;
}): string;
export declare function tsLocationToBabelLocation(tsLoc: Record<'start' | 'end', LineAndCharacter /** 0-based */>): SourceLocation;
export declare function normalizeTsDiagnostic(d: TsDiagnostic): NormalizedDiagnostic;
export declare function normalizeLspDiagnostic({ diagnostic, absFilePath, fileText, }: {
    diagnostic: LspDiagnostic;
    absFilePath: string;
    fileText: string;
}): NormalizedDiagnostic;
export declare function normalizePublishDiagnosticParams(publishDiagnostics: PublishDiagnosticsParams): Promise<NormalizedDiagnostic[]>;
export declare function uriToAbsPath(documentUri: string): string;
export declare function lspRange2Location(range: Range): SourceLocation;
export declare function normalizeEslintDiagnostic(diagnostic: ESLint.LintResult): NormalizedDiagnostic[];
export declare function ensureCall(callback: CallableFunction): void;
//# sourceMappingURL=logger.d.ts.map