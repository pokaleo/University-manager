{
  "version": 3,
  "sources": ["../@vaadin/button/src/vaadin-button.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2017 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { ActiveMixin } from '@vaadin/component-base/src/active-mixin.js';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { FocusMixin } from '@vaadin/component-base/src/focus-mixin.js';\nimport { TabindexMixin } from '@vaadin/component-base/src/tabindex-mixin.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\n/**\n * `<vaadin-button>` is an accessible and customizable button that allows users to perform actions.\n *\n * ```html\n * <vaadin-button>Press me</vaadin-button>\n * ```\n *\n * ### Styling\n *\n * The following shadow DOM parts are available for styling:\n *\n * Part name | Description\n * ----------|-------------\n * `label`   | The label (text) inside the button.\n * `prefix`  | A slot for content before the label (e.g. an icon).\n * `suffix`  | A slot for content after the label (e.g. an icon).\n *\n * The following attributes are available for styling:\n *\n * Attribute    | Description\n * -------------|-------------\n * `active`     | Set when the button is pressed down, either with mouse, touch or the keyboard.\n * `disabled`   | Set when the button is disabled.\n * `focus-ring` | Set when the button is focused using the keyboard.\n * `focused`    | Set when the button is focused.\n *\n * See [Styling Components](https://vaadin.com/docs/latest/ds/customization/styling-components) documentation.\n *\n * @extends HTMLElement\n * @mixes ActiveMixin\n * @mixes TabindexMixin\n * @mixes FocusMixin\n * @mixes ElementMixin\n * @mixes ThemableMixin\n */\nclass Button extends ActiveMixin(TabindexMixin(FocusMixin(ElementMixin(ThemableMixin(PolymerElement))))) {\n  static get is() {\n    return 'vaadin-button';\n  }\n\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: inline-block;\n          position: relative;\n          outline: none;\n          white-space: nowrap;\n          -webkit-user-select: none;\n          -moz-user-select: none;\n          user-select: none;\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n\n        /* Aligns the button with form fields when placed on the same line.\n          Note, to make it work, the form fields should have the same \"::before\" pseudo-element. */\n        .vaadin-button-container::before {\n          content: '\\\\2003';\n          display: inline-block;\n          width: 0;\n        }\n\n        .vaadin-button-container {\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          text-align: center;\n          width: 100%;\n          height: 100%;\n          min-height: inherit;\n          text-shadow: inherit;\n          background: transparent;\n          padding: 0;\n          border: none;\n          box-shadow: none;\n        }\n\n        [part='prefix'],\n        [part='suffix'] {\n          flex: none;\n        }\n\n        [part='label'] {\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n      </style>\n      <div class=\"vaadin-button-container\">\n        <span part=\"prefix\">\n          <slot name=\"prefix\"></slot>\n        </span>\n        <span part=\"label\">\n          <slot></slot>\n        </span>\n        <span part=\"suffix\">\n          <slot name=\"suffix\"></slot>\n        </span>\n      </div>\n    `;\n  }\n\n  /**\n   * By default, `Space` is the only possible activation key for a focusable HTML element.\n   * Nonetheless, the button is an exception as it can be also activated by pressing `Enter`.\n   * See the \"Keyboard Support\" section in https://www.w3.org/TR/wai-aria-practices/examples/button/button.html.\n   *\n   * @protected\n   * @override\n   */\n  get _activeKeys() {\n    return ['Enter', ' '];\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    // By default, if the user hasn't provided a custom role,\n    // the role attribute is set to \"button\".\n    if (!this.hasAttribute('role')) {\n      this.setAttribute('role', 'button');\n    }\n  }\n\n  /**\n   * Since the button component is designed on the base of the `[role=button]` attribute,\n   * and doesn't have a native <button> inside, in order to be fully accessible from the keyboard,\n   * it should manually fire the `click` event once an activation key is pressed,\n   * as it follows from the WAI-ARIA specifications:\n   * https://www.w3.org/TR/wai-aria-practices-1.1/#button\n   *\n   * According to the UI Events specifications,\n   * the `click` event should be fired exactly on `keydown`:\n   * https://www.w3.org/TR/uievents/#event-type-keydown\n   *\n   * @param {KeyboardEvent} event\n   * @protected\n   * @override\n   */\n  _onKeyDown(event) {\n    super._onKeyDown(event);\n\n    if (this._activeKeys.includes(event.key)) {\n      event.preventDefault();\n\n      // `DisabledMixin` overrides the standard `click()` method\n      // so that it doesn't fire the `click` event when the element is disabled.\n      this.click();\n    }\n  }\n}\n\ncustomElements.define(Button.is, Button);\n\nexport { Button };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAAA,AA+CA,2BAAqB,YAAY,cAAc,WAAW,aAAa,cAAc,cAAc,CAAC,CAAC,CAAC,CAAC,EAAE;AAAA,aAC5F,KAAK;AACd,WAAO;AAAA,EACT;AAAA,aAEW,WAAW;AACpB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA8DT;AAAA,MAUI,cAAc;AAChB,WAAO,CAAC,SAAS,GAAG;AAAA,EACtB;AAAA,EAGA,QAAQ;AACN,UAAM,MAAM;AAIZ,QAAI,CAAC,KAAK,aAAa,MAAM,GAAG;AAC9B,WAAK,aAAa,QAAQ,QAAQ;AAAA,IACpC;AAAA,EACF;AAAA,EAiBA,WAAW,OAAO;AAChB,UAAM,WAAW,KAAK;AAEtB,QAAI,KAAK,YAAY,SAAS,MAAM,GAAG,GAAG;AACxC,YAAM,eAAe;AAIrB,WAAK,MAAM;AAAA,IACb;AAAA,EACF;AACF;AAEA,eAAe,OAAO,OAAO,IAAI,MAAM;",
  "names": []
}
