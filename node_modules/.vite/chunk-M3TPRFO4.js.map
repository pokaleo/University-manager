{
  "version": 3,
  "sources": ["../@vaadin/time-picker/src/vaadin-time-picker-item.js", "../@vaadin/time-picker/src/vaadin-time-picker-overlay.js", "../@vaadin/time-picker/src/vaadin-time-picker-scroller.js", "../@vaadin/time-picker/src/vaadin-time-picker-dropdown.js", "../@vaadin/time-picker/src/vaadin-time-picker-combo-box.js", "../@vaadin/time-picker/src/vaadin-time-picker.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2018 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { ComboBoxItem } from '@vaadin/combo-box/src/vaadin-combo-box-item.js';\n\n/**\n * An element used for items in `<vaadin-time-picker>`.\n *\n * ### Styling\n *\n * The following shadow DOM parts are available for styling:\n *\n * Part name | Description\n * ----------|-------------\n * `content` | The element that wraps the item content\n *\n * The following state attributes are exposed for styling:\n *\n * Attribute  | Description                   | Part name\n * -----------|-------------------------------|-----------\n * `selected` | Set when the item is selected | :host\n * `focused`  | Set when the item is focused  | :host\n *\n * See [Styling Components](https://vaadin.com/docs/latest/ds/customization/styling-components) documentation.\n *\n * @extends ComboBoxItem\n * @private\n */\nclass TimePickerItem extends ComboBoxItem {\n  static get is() {\n    return 'vaadin-time-picker-item';\n  }\n}\n\ncustomElements.define(TimePickerItem.is, TimePickerItem);\n", "/**\n * @license\n * Copyright (c) 2018 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { ComboBoxOverlay } from '@vaadin/combo-box/src/vaadin-combo-box-overlay.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nregisterStyles(\n  'vaadin-time-picker-overlay',\n  css`\n    #overlay {\n      width: var(--vaadin-time-picker-overlay-width, var(--_vaadin-time-picker-overlay-default-width, auto));\n    }\n  `,\n  { moduleId: 'vaadin-time-picker-overlay-styles' }\n);\n\n/**\n * An element used internally by `<vaadin-time-picker>`. Not intended to be used separately.\n *\n * @extends ComboBoxOverlay\n * @private\n */\nclass TimePickerOverlay extends ComboBoxOverlay {\n  static get is() {\n    return 'vaadin-time-picker-overlay';\n  }\n}\n\ncustomElements.define(TimePickerOverlay.is, TimePickerOverlay);\n", "/**\n * @license\n * Copyright (c) 2018 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { ComboBoxScroller } from '@vaadin/combo-box/src/vaadin-combo-box-scroller.js';\n\n/**\n * An element used internally by `<vaadin-time-picker>`. Not intended to be used separately.\n *\n * @extends ComboBoxScroller\n * @private\n */\nclass TimePickerScroller extends ComboBoxScroller {\n  static get is() {\n    return 'vaadin-time-picker-scroller';\n  }\n}\n\ncustomElements.define(TimePickerScroller.is, TimePickerScroller);\n", "/**\n * @license\n * Copyright (c) 2018 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport './vaadin-time-picker-item.js';\nimport './vaadin-time-picker-overlay.js';\nimport './vaadin-time-picker-scroller.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nimport { ComboBoxDropdown } from '@vaadin/combo-box/src/vaadin-combo-box-dropdown.js';\n\n/**\n * An element used internally by `<vaadin-time-picker>`. Not intended to be used separately.\n *\n * @extends ComboBoxDropdown\n * @private\n */\nclass TimePickerDropdown extends ComboBoxDropdown {\n  static get is() {\n    return 'vaadin-time-picker-dropdown';\n  }\n\n  static get template() {\n    return html`\n      <vaadin-time-picker-overlay\n        id=\"overlay\"\n        hidden$=\"[[_isOverlayHidden(_items.*, loading)]]\"\n        loading$=\"[[loading]]\"\n        opened=\"{{_overlayOpened}}\"\n        theme$=\"[[theme]]\"\n        position-target=\"[[positionTarget]]\"\n        no-vertical-overlap\n      ></vaadin-time-picker-overlay>\n    `;\n  }\n}\n\ncustomElements.define(TimePickerDropdown.is, TimePickerDropdown);\n", "/**\n * @license\n * Copyright (c) 2018 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport './vaadin-time-picker-dropdown.js';\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { ComboBoxMixin } from '@vaadin/combo-box/src/vaadin-combo-box-mixin.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\n/**\n * An element used internally by `<vaadin-time-picker>`. Not intended to be used separately.\n *\n * @extends HTMLElement\n * @mixes ComboBoxMixin\n * @mixes ThemableMixin\n */\nclass TimePickerComboBox extends ComboBoxMixin(ThemableMixin(PolymerElement)) {\n  static get is() {\n    return 'vaadin-time-picker-combo-box';\n  }\n\n  static get template() {\n    return html`\n      <style>\n        :host([opened]) {\n          pointer-events: auto;\n        }\n      </style>\n\n      <slot></slot>\n\n      <vaadin-time-picker-dropdown\n        id=\"dropdown\"\n        opened=\"[[opened]]\"\n        position-target=\"[[positionTarget]]\"\n        renderer=\"[[renderer]]\"\n        _focused-index=\"[[_focusedIndex]]\"\n        _item-id-path=\"[[itemIdPath]]\"\n        _item-label-path=\"[[itemLabelPath]]\"\n        loading=\"[[loading]]\"\n        theme=\"[[theme]]\"\n      ></vaadin-time-picker-dropdown>\n    `;\n  }\n\n  static get properties() {\n    return {\n      positionTarget: {\n        type: Object\n      }\n    };\n  }\n\n  /**\n   * Reference to the clear button element.\n   * @protected\n   * @return {!HTMLElement}\n   */\n  get clearElement() {\n    return this.querySelector('[part=\"clear-button\"]');\n  }\n\n  /**\n   * @protected\n   * @override\n   */\n  _getItemElements() {\n    return Array.from(this.$.dropdown._scroller.querySelectorAll('vaadin-time-picker-item'));\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    this.allowCustomValue = true;\n    this._toggleElement = this.querySelector('.toggle-button');\n\n    // See https://github.com/vaadin/vaadin-time-picker/issues/145\n    this.setAttribute('dir', 'ltr');\n  }\n\n  /** @protected */\n  _isClearButton(event) {\n    return (\n      super._isClearButton(event) ||\n      (event.type === 'input' && !event.isTrusted) || // fake input event dispatched by clear button\n      event.composedPath()[0].getAttribute('part') === 'clear-button'\n    );\n  }\n\n  /**\n   * @param {!Event} event\n   * @protected\n   */\n  _onChange(event) {\n    super._onChange(event);\n\n    if (this._isClearButton(event)) {\n      this._clear();\n    }\n  }\n}\n\ncustomElements.define(TimePickerComboBox.is, TimePickerComboBox);\n", "/**\n * @license\n * Copyright (c) 2018 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport '@vaadin/input-container/src/vaadin-input-container.js';\nimport './vaadin-time-picker-combo-box.js';\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { InputControlMixin } from '@vaadin/field-base/src/input-control-mixin.js';\nimport { InputController } from '@vaadin/field-base/src/input-controller.js';\nimport { LabelledInputController } from '@vaadin/field-base/src/labelled-input-controller.js';\nimport { PatternMixin } from '@vaadin/field-base/src/pattern-mixin.js';\nimport { inputFieldShared } from '@vaadin/field-base/src/styles/input-field-shared-styles.js';\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nregisterStyles('vaadin-time-picker', inputFieldShared, { moduleId: 'vaadin-time-picker-styles' });\n\n/**\n * `<vaadin-time-picker>` is a Web Component providing a time-selection field.\n *\n * ```html\n * <vaadin-time-picker></vaadin-time-picker>\n * ```\n * ```js\n * timePicker.value = '14:30';\n * ```\n *\n * When the selected `value` is changed, a `value-changed` event is triggered.\n *\n * ### Styling\n *\n * The following custom properties are available for styling:\n *\n * Custom property                         | Description                | Default\n * ----------------------------------------|----------------------------|---------\n * `--vaadin-field-default-width`          | Default width of the field | `12em`\n * `--vaadin-combo-box-overlay-max-height` | Max height of the overlay  | `65vh`\n *\n * `<vaadin-time-picker>` provides the same set of shadow DOM parts and state attributes as `<vaadin-text-field>`.\n * See [`<vaadin-text-field>`](#/elements/vaadin-text-field) for the styling documentation.\n *\n * In addition to `<vaadin-text-field>` parts, the following parts are available for theming:\n *\n * Part name       | Description\n * ----------------|----------------\n * `toggle-button` | The toggle button\n *\n * ### Internal components\n *\n * In addition to `<vaadin-time-picker>` itself, the following internal\n * components are themable:\n *\n * - `<vaadin-time-picker-combo-box>` - has the same API as [`<vaadin-combo-box-light>`](#/elements/vaadin-combo-box-light).\n * - `<vaadin-time-picker-overlay>` - has the same API as [`<vaadin-overlay>`](#/elements/vaadin-overlay).\n * - `<vaadin-time-picker-item>` - has the same API as [`<vaadin-item>`](#/elements/vaadin-item).\n * - [`<vaadin-input-container>`](#/elements/vaadin-input-container) - an internal element wrapping the input.\n *\n * Note: the `theme` attribute value set on `<vaadin-time-picker>` is\n * propagated to the internal components listed above.\n *\n * See [Styling Components](https://vaadin.com/docs/latest/ds/customization/styling-components) documentation.\n *\n * @fires {Event} change - Fired when the user commits a value change.\n * @fires {CustomEvent} invalid-changed - Fired when the `invalid` property changes.\n * @fires {CustomEvent} value-changed - Fired when the `value` property changes.\n *\n * @extends HTMLElement\n * @mixes ElementMixin\n * @mixes ThemableMixin\n * @mixes InputControlMixin\n * @mixes PatternMixin\n */\nclass TimePicker extends PatternMixin(InputControlMixin(ThemableMixin(ElementMixin(PolymerElement)))) {\n  static get is() {\n    return 'vaadin-time-picker';\n  }\n\n  static get template() {\n    return html`\n      <style>\n        /* See https://github.com/vaadin/vaadin-time-picker/issues/145 */\n        :host([dir='rtl']) [part='input-field'] {\n          direction: ltr;\n        }\n\n        :host([dir='rtl']) [part='input-field'] ::slotted(input)::placeholder {\n          direction: rtl;\n          text-align: left;\n        }\n\n        [part~='toggle-button'] {\n          cursor: pointer;\n        }\n      </style>\n\n      <div class=\"vaadin-time-picker-container\">\n        <div part=\"label\">\n          <slot name=\"label\"></slot>\n          <span part=\"required-indicator\" aria-hidden=\"true\" on-click=\"focus\"></span>\n        </div>\n\n        <vaadin-time-picker-combo-box\n          id=\"comboBox\"\n          filtered-items=\"[[__dropdownItems]]\"\n          value=\"{{_comboBoxValue}}\"\n          disabled=\"[[disabled]]\"\n          readonly=\"[[readonly]]\"\n          auto-open-disabled=\"[[autoOpenDisabled]]\"\n          position-target=\"[[_inputContainer]]\"\n          theme$=\"[[theme]]\"\n          on-change=\"__onChange\"\n        >\n          <vaadin-input-container\n            part=\"input-field\"\n            readonly=\"[[readonly]]\"\n            disabled=\"[[disabled]]\"\n            invalid=\"[[invalid]]\"\n            theme$=\"[[theme]]\"\n          >\n            <slot name=\"prefix\" slot=\"prefix\"></slot>\n            <slot name=\"input\"></slot>\n            <div id=\"clearButton\" part=\"clear-button\" slot=\"suffix\" aria-hidden=\"true\"></div>\n            <div id=\"toggleButton\" class=\"toggle-button\" part=\"toggle-button\" slot=\"suffix\" aria-hidden=\"true\"></div>\n          </vaadin-input-container>\n        </vaadin-time-picker-combo-box>\n\n        <div part=\"helper-text\">\n          <slot name=\"helper\"></slot>\n        </div>\n\n        <div part=\"error-message\">\n          <slot name=\"error-message\"></slot>\n        </div>\n      </div>\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * The time value for this element.\n       *\n       * Supported time formats are in ISO 8601:\n       * - `hh:mm` (default)\n       * - `hh:mm:ss`\n       * - `hh:mm:ss.fff`\n       * @type {string}\n       */\n      value: {\n        type: String,\n        notify: true,\n        value: ''\n      },\n\n      /**\n       * Minimum time allowed.\n       *\n       * Supported time formats are in ISO 8601:\n       * - `hh:mm`\n       * - `hh:mm:ss`\n       * - `hh:mm:ss.fff`\n       * @type {string}\n       */\n      min: {\n        type: String,\n        value: '00:00:00.000'\n      },\n\n      /**\n       * Maximum time allowed.\n       *\n       * Supported time formats are in ISO 8601:\n       * - `hh:mm`\n       * - `hh:mm:ss`\n       * - `hh:mm:ss.fff`\n       * @type {string}\n       */\n      max: {\n        type: String,\n        value: '23:59:59.999'\n      },\n\n      /**\n       * Defines the time interval (in seconds) between the items displayed\n       * in the time selection box. The default is 1 hour (i.e. `3600`).\n       *\n       * It also configures the precision of the value string. By default\n       * the component formats values as `hh:mm` but setting a step value\n       * lower than one minute or one second, format resolution changes to\n       * `hh:mm:ss` and `hh:mm:ss.fff` respectively.\n       *\n       * Unit must be set in seconds, and for correctly configuring intervals\n       * in the dropdown, it need to evenly divide a day.\n       *\n       * Note: it is possible to define step that is dividing an hour in inexact\n       * fragments (i.e. 5760 seconds which equals 1 hour 36 minutes), but it is\n       * not recommended to use it for better UX experience.\n       */\n      step: {\n        type: Number\n      },\n\n      /**\n       * Set true to prevent the overlay from opening automatically.\n       * @attr {boolean} auto-open-disabled\n       */\n      autoOpenDisabled: Boolean,\n\n      /** @private */\n      __dropdownItems: {\n        type: Array\n      },\n\n      /**\n       * The object used to localize this component.\n       * To change the default localization, replace the entire\n       * _i18n_ object or just the property you want to modify.\n       *\n       * The object has the following JSON structure:\n       *\n       * ```\n       * {\n       *   // A function to format given `Object` as\n       *   // time string. Object is in the format `{ hours: ..., minutes: ..., seconds: ..., milliseconds: ... }`\n       *   formatTime: (time) => {\n       *     // returns a string representation of the given\n       *     // object in `hh` / 'hh:mm' / 'hh:mm:ss' / 'hh:mm:ss.fff' - formats\n       *   },\n       *\n       *   // A function to parse the given text to an `Object` in the format\n       *   // `{ hours: ..., minutes: ..., seconds: ..., milliseconds: ... }`.\n       *   // Must properly parse (at least) text\n       *   // formatted by `formatTime`.\n       *   parseTime: text => {\n       *     // Parses a string in object/string that can be formatted by`formatTime`.\n       *   }\n       * }\n       * ```\n       *\n       * Both `formatTime` and `parseTime` need to be implemented\n       * to ensure the component works properly.\n       *\n       * @type {!TimePickerI18n}\n       */\n      i18n: {\n        type: Object,\n        value: () => {\n          return {\n            formatTime: (time) => {\n              if (!time) {\n                return;\n              }\n\n              const pad = (num = 0, fmt = '00') => (fmt + num).substr((fmt + num).length - fmt.length);\n              // Always display hour and minute\n              let timeString = `${pad(time.hours)}:${pad(time.minutes)}`;\n              // Adding second and millisecond depends on resolution\n              time.seconds !== undefined && (timeString += `:${pad(time.seconds)}`);\n              time.milliseconds !== undefined && (timeString += `.${pad(time.milliseconds, '000')}`);\n              return timeString;\n            },\n            parseTime: (text) => {\n              // Parsing with RegExp to ensure correct format\n              const MATCH_HOURS = '(\\\\d|[0-1]\\\\d|2[0-3])';\n              const MATCH_MINUTES = '(\\\\d|[0-5]\\\\d)';\n              const MATCH_SECONDS = MATCH_MINUTES;\n              const MATCH_MILLISECONDS = '(\\\\d{1,3})';\n              const re = new RegExp(\n                `^${MATCH_HOURS}(?::${MATCH_MINUTES}(?::${MATCH_SECONDS}(?:\\\\.${MATCH_MILLISECONDS})?)?)?$`\n              );\n              const parts = re.exec(text);\n              if (parts) {\n                // Allows setting the milliseconds with hundreds and tens precision\n                if (parts[4]) {\n                  while (parts[4].length < 3) {\n                    parts[4] += '0';\n                  }\n                }\n                return { hours: parts[1], minutes: parts[2], seconds: parts[3], milliseconds: parts[4] };\n              }\n            }\n          };\n        }\n      },\n\n      /** @private */\n      _comboBoxValue: {\n        type: String,\n        observer: '__comboBoxValueChanged'\n      },\n\n      /** @private */\n      _inputContainer: Object\n    };\n  }\n\n  static get observers() {\n    return ['__updateDropdownItems(i18n.*, min, max, step)'];\n  }\n\n  /**\n   * Used by `ClearButtonMixin` as a reference to the clear button element.\n   * @protected\n   * @return {!HTMLElement}\n   */\n  get clearElement() {\n    return this.$.clearButton;\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    this.addController(\n      new InputController(this, (input) => {\n        this._setInputElement(input);\n        this._setFocusElement(input);\n        this.stateTarget = input;\n        this.ariaTarget = input;\n      })\n    );\n    this.addController(new LabelledInputController(this.inputElement, this._labelController));\n    this._inputContainer = this.shadowRoot.querySelector('[part~=\"input-field\"]');\n  }\n\n  /**\n   * Override method inherited from `InputMixin` to forward the input to combo-box.\n   * @protected\n   * @override\n   */\n  _inputElementChanged(input) {\n    super._inputElementChanged(input);\n\n    if (input) {\n      this.$.comboBox._setInputElement(input);\n    }\n  }\n\n  /**\n   * Returns true if the current input value satisfies all constraints (if any).\n   * You can override this method for custom validations.\n   *\n   * @return {boolean} True if the value is valid\n   */\n  checkValidity() {\n    return !!(\n      this.inputElement.checkValidity() &&\n      (!this.value || this._timeAllowed(this.i18n.parseTime(this.value))) &&\n      (!this._comboBoxValue || this.i18n.parseTime(this._comboBoxValue))\n    );\n  }\n\n  /**\n   * Override method inherited from `FocusMixin` to validate on blur.\n   * @param {boolean} focused\n   * @protected\n   */\n  _setFocused(focused) {\n    super._setFocused(focused);\n\n    if (!focused) {\n      this.validate();\n    }\n  }\n\n  /** @private */\n  __validDayDivisor(step) {\n    // valid if undefined, or exact divides a day, or has millisecond resolution\n    return !step || (24 * 3600) % step === 0 || (step < 1 && ((step % 1) * 1000) % 1 === 0);\n  }\n\n  /**\n   * Override an event listener from `ClearButtonMixin`\n   * to prevent clearing the input value on Esc key.\n   * @param {Event} event\n   * @protected\n   */\n  _onKeyDown(e) {\n    if (this.readonly || this.disabled || this.__dropdownItems.length) {\n      return;\n    }\n\n    const stepResolution = (this.__validDayDivisor(this.step) && this.step) || 60;\n\n    if (e.keyCode === 40) {\n      this.__onArrowPressWithStep(-stepResolution);\n    } else if (e.keyCode === 38) {\n      this.__onArrowPressWithStep(stepResolution);\n    }\n  }\n\n  /** @private */\n  __onArrowPressWithStep(step) {\n    const objWithStep = this.__addStep(this.__getMsec(this.__memoValue), step, true);\n    this.__memoValue = objWithStep;\n    this.inputElement.value = this.i18n.formatTime(this.__validateTime(objWithStep));\n    this.__dispatchChange();\n  }\n\n  /** @private */\n  __dispatchChange() {\n    this.dispatchEvent(new CustomEvent('change', { bubbles: true }));\n  }\n\n  /**\n   * Returning milliseconds from Object in the format `{ hours: ..., minutes: ..., seconds: ..., milliseconds: ... }`\n   * @private\n   */\n  __getMsec(obj) {\n    let result = ((obj && obj.hours) || 0) * 60 * 60 * 1000;\n    result += ((obj && obj.minutes) || 0) * 60 * 1000;\n    result += ((obj && obj.seconds) || 0) * 1000;\n    result += (obj && parseInt(obj.milliseconds)) || 0;\n\n    return result;\n  }\n\n  /**\n   * Returning seconds from Object in the format `{ hours: ..., minutes: ..., seconds: ..., milliseconds: ... }`\n   * @private\n   */\n  __getSec(obj) {\n    let result = ((obj && obj.hours) || 0) * 60 * 60;\n    result += ((obj && obj.minutes) || 0) * 60;\n    result += (obj && obj.seconds) || 0;\n    result += (obj && obj.milliseconds / 1000) || 0;\n\n    return result;\n  }\n\n  /**\n   * Returning Object in the format `{ hours: ..., minutes: ..., seconds: ..., milliseconds: ... }`\n   * from the result of adding step value in milliseconds to the milliseconds amount.\n   * With `precision` parameter rounding the value to the closest step valid interval.\n   * @private\n   */\n  __addStep(msec, step, precision) {\n    // If the time is `00:00` and step changes value downwards, it should be considered as `24:00`\n    if (msec === 0 && step < 0) {\n      msec = 24 * 60 * 60 * 1000;\n    }\n\n    const stepMsec = step * 1000;\n    const diffToNext = msec % stepMsec;\n    if (stepMsec < 0 && diffToNext && precision) {\n      msec -= diffToNext;\n    } else if (stepMsec > 0 && diffToNext && precision) {\n      msec -= diffToNext - stepMsec;\n    } else {\n      msec += stepMsec;\n    }\n\n    var hh = Math.floor(msec / 1000 / 60 / 60);\n    msec -= hh * 1000 * 60 * 60;\n    var mm = Math.floor(msec / 1000 / 60);\n    msec -= mm * 1000 * 60;\n    var ss = Math.floor(msec / 1000);\n    msec -= ss * 1000;\n\n    return { hours: hh < 24 ? hh : 0, minutes: mm, seconds: ss, milliseconds: msec };\n  }\n\n  /** @private */\n  __updateDropdownItems(i8n, min, max, step) {\n    const minTimeObj = this.__validateTime(this.__parseISO(min));\n    const minSec = this.__getSec(minTimeObj);\n\n    const maxTimeObj = this.__validateTime(this.__parseISO(max));\n    const maxSec = this.__getSec(maxTimeObj);\n\n    this.__adjustValue(minSec, maxSec, minTimeObj, maxTimeObj);\n\n    this.__dropdownItems = this.__generateDropdownList(minSec, maxSec, step);\n\n    if (step !== this.__oldStep) {\n      this.__oldStep = step;\n      const parsedObj = this.__validateTime(this.__parseISO(this.value));\n      this.__updateValue(parsedObj);\n    }\n\n    if (this.value) {\n      this._comboBoxValue = this.i18n.formatTime(this.i18n.parseTime(this.value));\n    }\n  }\n\n  /** @private */\n  __generateDropdownList(minSec, maxSec, step) {\n    if (step < 15 * 60 || !this.__validDayDivisor(step)) {\n      return [];\n    }\n\n    const generatedList = [];\n\n    // Default step in overlay items is 1 hour\n    step = step || 3600;\n\n    let time = -step + minSec;\n    while (time + step >= minSec && time + step <= maxSec) {\n      const timeObj = this.__validateTime(this.__addStep(time * 1000, step));\n      time += step;\n      const formatted = this.i18n.formatTime(timeObj);\n      generatedList.push({ label: formatted, value: formatted });\n    }\n\n    return generatedList;\n  }\n\n  /** @private */\n  __adjustValue(minSec, maxSec, minTimeObj, maxTimeObj) {\n    // Do not change the value if it is empty\n    if (!this.__memoValue) {\n      return;\n    }\n\n    const valSec = this.__getSec(this.__memoValue);\n\n    if (valSec < minSec) {\n      this.__updateValue(minTimeObj);\n    } else if (valSec > maxSec) {\n      this.__updateValue(maxTimeObj);\n    }\n  }\n\n  /**\n   * Override an observer from `InputMixin`.\n   * @protected\n   * @override\n   */\n  _valueChanged(value, oldValue) {\n    const parsedObj = (this.__memoValue = this.__parseISO(value));\n    const newValue = this.__formatISO(parsedObj) || '';\n\n    if (this.value !== '' && this.value !== null && !parsedObj) {\n      this.value = oldValue;\n    } else if (this.value !== newValue) {\n      this.value = newValue;\n    } else {\n      this.__updateInputValue(parsedObj);\n    }\n\n    this._toggleHasValue(!!this.value);\n  }\n\n  /** @private */\n  __comboBoxValueChanged(value, oldValue) {\n    if (value === '' && oldValue === undefined) {\n      return;\n    }\n\n    const parsedObj = this.i18n.parseTime(value);\n    const newValue = this.i18n.formatTime(parsedObj) || '';\n\n    if (parsedObj) {\n      if (value !== newValue) {\n        this._comboBoxValue = newValue;\n      } else {\n        this.__updateValue(parsedObj);\n      }\n    } else {\n      this.value = '';\n    }\n  }\n\n  /** @private */\n  __onChange(event) {\n    event.stopPropagation();\n\n    this.validate();\n\n    this.__dispatchChange();\n  }\n\n  /** @private */\n  __updateValue(obj) {\n    const timeString = this.__formatISO(this.__validateTime(obj)) || '';\n    this.value = timeString;\n  }\n\n  /** @private */\n  __updateInputValue(obj) {\n    const timeString = this.i18n.formatTime(this.__validateTime(obj)) || '';\n    this._comboBoxValue = timeString;\n  }\n\n  /** @private */\n  __validateTime(timeObject) {\n    if (timeObject) {\n      timeObject.hours = parseInt(timeObject.hours);\n      timeObject.minutes = parseInt(timeObject.minutes || 0);\n      timeObject.seconds = this.__stepSegment < 3 ? undefined : parseInt(timeObject.seconds || 0);\n      timeObject.milliseconds = this.__stepSegment < 4 ? undefined : parseInt(timeObject.milliseconds || 0);\n    }\n    return timeObject;\n  }\n\n  /** @private */\n  get __stepSegment() {\n    if (this.step % 3600 === 0) {\n      // Accept hours\n      return 1;\n    } else if (this.step % 60 === 0 || !this.step) {\n      // Accept minutes\n      return 2;\n    } else if (this.step % 1 === 0) {\n      // Accept seconds\n      return 3;\n    } else if (this.step < 1) {\n      // Accept milliseconds\n      return 4;\n    }\n    return undefined;\n  }\n\n  /** @private */\n  __formatISO(time) {\n    // The default i18n formatter implementation is ISO 8601 compliant\n    return TimePicker.properties.i18n.value().formatTime(time);\n  }\n\n  /** @private */\n  __parseISO(text) {\n    // The default i18n parser implementation is ISO 8601 compliant\n    return TimePicker.properties.i18n.value().parseTime(text);\n  }\n\n  /**\n   * Returns true if `time` satisfies the `min` and `max` constraints (if any).\n   *\n   * @param {!TimePickerTime} time Value to check against constraints\n   * @return {boolean} True if `time` satisfies the constraints\n   * @protected\n   */\n  _timeAllowed(time) {\n    const parsedMin = this.i18n.parseTime(this.min);\n    const parsedMax = this.i18n.parseTime(this.max);\n\n    return (\n      (!this.__getMsec(parsedMin) || this.__getMsec(time) >= this.__getMsec(parsedMin)) &&\n      (!this.__getMsec(parsedMax) || this.__getMsec(time) <= this.__getMsec(parsedMax))\n    );\n  }\n\n  /**\n   * Override method inherited from `ClearButtonMixin`.\n   * @protected\n   */\n  _onClearButtonClick() {}\n\n  /**\n   * Override method inherited from `InputConstraintsMixin`.\n   * @protected\n   */\n  _onChange() {}\n\n  /**\n   * Override method inherited from `InputMixin`.\n   * @protected\n   */\n  _onInput() {\n    // Need to invoke _checkInputValue from PatternMixin to prevent invalid input\n    this._checkInputValue();\n  }\n\n  /**\n   * Fired when the user commits a value change.\n   *\n   * @event change\n   */\n}\n\ncustomElements.define(TimePicker.is, TimePicker);\n\nexport { TimePicker };\n"],
  "mappings": "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",
  "names": []
}
