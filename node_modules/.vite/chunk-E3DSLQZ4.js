import {
  InputControlMixin
} from "./chunk-LAUGTD7S.js";

// node_modules/@vaadin/field-base/src/input-field-mixin.js
var InputFieldMixin = (superclass) => class InputFieldMixinClass extends InputControlMixin(superclass) {
  static get properties() {
    return {
      autocomplete: {
        type: String
      },
      autocorrect: {
        type: String
      },
      autocapitalize: {
        type: String
      },
      _enabledCharPattern: {
        type: String,
        observer: "_enabledCharPatternChanged"
      }
    };
  }
  static get delegateAttrs() {
    return [...super.delegateAttrs, "autocapitalize", "autocomplete", "autocorrect"];
  }
  constructor() {
    super();
    this._boundOnPaste = this._onPaste.bind(this);
    this._boundOnDrop = this._onDrop.bind(this);
    this._boundOnBeforeInput = this._onBeforeInput.bind(this);
  }
  _inputElementChanged(input) {
    super._inputElementChanged(input);
    if (input) {
      if (input.value && input.value !== this.value) {
        console.warn(`Please define value on the <${this.localName}> component!`);
        input.value = "";
      }
      if (this.value) {
        input.value = this.value;
      }
    }
  }
  get __data() {
    return this.__dataValue || {};
  }
  set __data(value) {
    this.__dataValue = value;
  }
  _onBlur(event) {
    super._onBlur(event);
    this.validate();
  }
  _onInput(event) {
    super._onInput(event);
    if (this.invalid) {
      this.validate();
    }
  }
  _forwardInputValue(value) {
    super._forwardInputValue(value);
    if (this.invalid) {
      this.validate();
    }
  }
  _addInputListeners(input) {
    super._addInputListeners(input);
    input.addEventListener("paste", this._boundOnPaste);
    input.addEventListener("drop", this._boundOnDrop);
    input.addEventListener("beforeinput", this._boundOnBeforeInput);
  }
  _removeInputListeners(input) {
    super._removeInputListeners(input);
    input.removeEventListener("paste", this._boundOnPaste);
    input.removeEventListener("drop", this._boundOnDrop);
    input.removeEventListener("beforeinput", this._boundOnBeforeInput);
  }
  _onKeyDown(event) {
    if (this._enabledCharPattern && !this.__shouldAcceptKey(event)) {
      event.preventDefault();
    }
    super._onKeyDown(event);
  }
  __shouldAcceptKey(event) {
    return event.metaKey || event.ctrlKey || !event.key || event.key.length !== 1 || this.__enabledCharRegExp.test(event.key);
  }
  _onPaste(e) {
    if (this._enabledCharPattern) {
      const pastedText = (e.clipboardData || window.clipboardData).getData("text");
      if (!this.__enabledTextRegExp.test(pastedText)) {
        e.preventDefault();
      }
    }
  }
  _onDrop(e) {
    if (this._enabledCharPattern) {
      const draggedText = e.dataTransfer.getData("text");
      if (!this.__enabledTextRegExp.test(draggedText)) {
        e.preventDefault();
      }
    }
  }
  _onBeforeInput(e) {
    if (this._enabledCharPattern && e.data && !this.__enabledTextRegExp.test(e.data)) {
      e.preventDefault();
    }
  }
  _enabledCharPatternChanged(charPattern) {
    if (charPattern) {
      this.__enabledCharRegExp = new RegExp("^" + charPattern + "$");
      this.__enabledTextRegExp = new RegExp("^" + charPattern + "*$");
    }
  }
};

export {
  InputFieldMixin
};
/**
 * @license
 * Copyright (c) 2021 - 2022 Vaadin Ltd.
 * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
 */
//# sourceMappingURL=chunk-E3DSLQZ4.js.map
